<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Max Hamulyák · Kaylumah</title>
  <subtitle type="text">A blog and portfolio website for Kaylumah, a company founded by Max Hamulyák</subtitle>
  <id>https://BaseUrl_1/feed.xml</id>
  <rights type="text">© Kaylumah. All rights reserved.</rights>
  <updated>DateTimeOffset_1</updated>
  <logo>https://BaseUrl_1/assets/logo_alt.svg</logo>
  <generator>Kaylumah Site Generator</generator>
  <link rel="self" type="application/atom+xml" href="https://BaseUrl_1/feed.xml" />
  <link rel="alternate" type="text/html" href="https://BaseUrl_1/blog.html" />
  <link rel="related" type="text/html" href="https://BaseUrl_1/archive.html" />
  <entry>
    <id>https://BaseUrl_1/2023/04/14/csharp-client-for-openapi-revistted.html</id>
    <title type="text">Generate C# client for OpenAPI - Revisited</title>
    <summary type="text">A comparison of NSwag.MSBuild and OpenApiReference</summary>
    <published>DateTimeOffset_2</published>
    <updated>DateTimeOffset_2</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2023/04/14/csharp-client-for-openapi-revistted.html" />
    <category term="C#" />
    <category term="NSwag" />
    <category term="OpenAPI" />
    <category term="Swashbuckle" />
    <content type="html">&lt;p&gt;I am working on an article for the blog that relies on a C# generated Open API client. I wrote an article on that a few years ago called &lt;a href="https://BaseUrl_2/2021/05/23/generate-csharp-client-for-openapi.html" class="external"&gt;&amp;quot;Generate C# client for OpenAPI&amp;quot;&lt;/a&gt;. So I decided to check if the advice from that post would still be valid today. Combined with the fact that, according to analytics, it is one of my most popular articles to date, this post was born.&lt;/p&gt;
&lt;p&gt;The solution provided relied on using an MSBuild task to generate the API on build using a tool called NSwag. However, even back then, in 2021, an alternative was already available. Steve Collins, another dotnet content creator, published an article called &lt;a href="https://stevetalkscode.co.uk/openapireference-commands" class="external"&gt;&amp;quot;Using OpenApiReference To Generate Open API Client Code&amp;quot;&lt;/a&gt;. The alternative directly adds OpenAPI support to the project while still using NSWag under the hood. Back then, Steve mentioned that there was little documentation, and I was already familiar with doing it manually, so I decided to stick with that. Today I wanted to compare doing it manually or via the built-in mechanism.&lt;/p&gt;
&lt;h2 id="safe-openapi-specification-on-build"&gt;&lt;a href="#safe-openapi-specification-on-build"&gt;Safe OpenAPI specification on build&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The purpose of the post is not to detail how to configure an OpenAPI spec for your project since the standard template already supports Swashbuckle. You can find more information on that over &lt;a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-7.0&amp;amp;tabs=visual-studio" class="external"&gt;at Microsoft Learn&lt;/a&gt;. One thing I like to add to the standard template, is that I want the specification to be part of the project output. We can achieve that with the Swashbuckle CLI, which you can install with the command &lt;code&gt;dotnet tool install --local Swashbuckle.AspNetCore.Cli --version 6.4.0&lt;/code&gt;. Note that the version of the CLI must match the version of Swashbuckle used in the API project. After you install the tool, you can modify the csproj to look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Target Name=&amp;quot;Generate OpenAPI Specification Document&amp;quot; AfterTargets=&amp;quot;Build&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OpenApiDocumentName&amp;gt;v1&amp;lt;/OpenApiDocumentName&amp;gt;
    &amp;lt;ApiDll&amp;gt;$(OutputPath)$(AssemblyName).dll&amp;lt;/ApiDll&amp;gt;
    &amp;lt;OutputApiDocument&amp;gt;$(OutputPath)$(AssemblyName).json&amp;lt;/OutputApiDocument&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;Exec Command=&amp;quot;dotnet swagger tofile --output $(OutputApiDocument) $(ApiDll) $(OpenApiDocumentName)&amp;quot; ContinueOnError=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;swagger&lt;/code&gt; command takes the output location (OutputApiDocument), the DLL for the specification (ApiDll) and the document name (OpenAPIDocumentName) as input parameters. The default name of the API document is &lt;code&gt;v1&lt;/code&gt;. We use some existing MSBuild properties to populate these parameters, so in our case, &lt;code&gt;OutputPath&lt;/code&gt; looks like &lt;code&gt;bin/Debug/net7.0/&lt;/code&gt; and &lt;code&gt;AssemblyName&lt;/code&gt; is &lt;code&gt;Demo&lt;/code&gt;. That means that after the project builds, a file &lt;code&gt;bin/Debug/net7.0/Demo.json&lt;/code&gt; will contain our Open API Specification.&lt;/p&gt;
&lt;p&gt;Note that as part of the &lt;code&gt;bin&lt;/code&gt; folder, the specification is not under source control. Sometimes I place it in the project root to track any changes made to the specification. Doing so is especially useful for monitoring unexpected or unintended changes to the specification.&lt;/p&gt;
&lt;h2 id="use-nswag.msbuild-to-generate-a-csharp-client"&gt;&lt;a href="#use-nswag.msbuild-to-generate-a-csharp-client"&gt;Use NSwag.MSBuild to generate a csharp client&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add NSwag manually to our project, we need the &lt;code&gt;NSwag.MSBuild&lt;/code&gt; NuGet package. Which we can install via &lt;code&gt;dotnet add package NSwag.MSBuild --version 13.18.2&lt;/code&gt;. The process is mostly the same as I detailed in 2021; one of the few changes is the target framework to use. Modify the csproj as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Target Name=&amp;quot;NSwag&amp;quot; AfterTargets=&amp;quot;PostBuildEvent&amp;quot; Condition=&amp;quot; '$(Configuration)' == 'Debug' &amp;quot;&amp;gt;
    &amp;lt;!--https://github.com/RicoSuter/NSwag/wiki/NSwag.MSBuild--&amp;gt;
    &amp;lt;!-- &amp;lt;Exec Command=&amp;quot;$(NSwagExe_Net70) new&amp;quot; /&amp;gt; --&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;OpenApiDocument&amp;gt;../../Api/Demo/bin/Debug/net7.0/Demo.json&amp;lt;/OpenApiDocument&amp;gt;
      &amp;lt;NSwagConfiguration&amp;gt;nswag.json&amp;lt;/NSwagConfiguration&amp;gt;
      &amp;lt;GeneratedOutput&amp;gt;Client.g.cs&amp;lt;/GeneratedOutput&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
    &amp;lt;Exec Command=&amp;quot;$(NSwagExe_Net70) run $(NSwagConfiguration) /variables:OpenApiDocument=$(OpenApiDocument),GeneratedOutput=$(GeneratedOutput)&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can uncomment &lt;code&gt;$(NSwagExe_Net70) new&lt;/code&gt; to generate a fresh nswag.json, the configuration file used for NSwag. After you have the config file, you still need to specify the runtime, the document, and the output location. Abbreviated the change to the file looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;runtime&amp;quot;: &amp;quot;Net70&amp;quot;,
  &amp;quot;defaultVariables&amp;quot;: null,
  &amp;quot;documentGenerator&amp;quot;: {
    &amp;quot;fromDocument&amp;quot;: {
      &amp;quot;json&amp;quot;: &amp;quot;$(OpenApiDocument)&amp;quot;
    }
  },
  &amp;quot;codeGenerators&amp;quot;: {
     &amp;quot;openApiToCSharpClient&amp;quot;: { 
      // ...
      &amp;quot;output&amp;quot;: &amp;quot;$(GeneratedOutput)&amp;quot;
      // ...
     }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't remember it being possible back in 2021, but you can now change the JSON serializer used in the generated client. You can do so by modifying the value of &lt;code&gt;codeGenerators/openApiToCSharpClient/jsonLibrary&lt;/code&gt; to &lt;code&gt;SystemTextJson&lt;/code&gt;. If you do not do this, you must install the &lt;code&gt;Newtonsoft.Json&lt;/code&gt; package, or the generated code will not compile.&lt;/p&gt;
&lt;h2 id="using-openapi-reference"&gt;&lt;a href="#using-openapi-reference"&gt;Using OpenAPI Reference&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="using-openapi-reference-from-visual-studio"&gt;&lt;a href="#using-openapi-reference-from-visual-studio"&gt;Using OpenAPI reference from Visual Studio&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can imagine that people do not like the manual way, especially if you don't know the inner workings of MSBuild; it can feel a bit like magic. Adding an OpenAPI reference via Visual Studio is as simple as right-clicking any project and choosing add connected service.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20230414/openapi/01_add_service_reference.png" width="1546" height="1000" alt="Microsoft Visual Studio - Add Service reference" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20230414/openapi/02_select_service_type.png" width="1443" height="925" alt="Microsoft Visual Studio - Select service reference type" /&gt;&lt;/p&gt;
&lt;p&gt;By choosing the option &amp;quot;Service reference...&amp;quot; instead of &amp;quot;Connected Service&amp;quot; you get the second prompt immediately. By selecting &amp;quot;Connected service&amp;quot; you get the overview of all connected services for the project and then need an extra click to add the service reference.&lt;/p&gt;
&lt;p&gt;We can customize the input for the msbuild task on the third screen. We only need to specify the file location of the Open API JSON.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20230414/openapi/03_add_openapi.png" width="1547" height="923" alt="Microsoft Visual Studio - Add service reference OpenAPI" /&gt;&lt;/p&gt;
&lt;p&gt;By selecting &amp;quot;finish&amp;quot;, Visual Studio will make all necessary modifications. Easy right? The project file should now look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
  &amp;lt;OpenApiReference Include=&amp;quot;..\..\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; 
                    CodeGenerator=&amp;quot;NSwagCSharp&amp;quot;
                    Link=&amp;quot;OpenAPIs\Demo.json&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;

&amp;lt;ItemGroup&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;Microsoft.Extensions.ApiDescription.Client&amp;quot; Version=&amp;quot;3.0.0&amp;quot;&amp;gt;
    &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
  &amp;lt;/PackageReference&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;NSwag.ApiDescription.Client&amp;quot; Version=&amp;quot;13.0.5&amp;quot;&amp;gt;
    &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
  &amp;lt;/PackageReference&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated code will be in the &lt;code&gt;obj&lt;/code&gt; folder if you build the project. As mentioned above, the API specification is in the &lt;code&gt;Debug/net7.0&lt;/code&gt; folder, so it will break if I retarget this solution to a newer framework. That is another reason to just put the specification at the root of the API project.&lt;/p&gt;
&lt;h3 id="using-openapi-reference-from-command-line"&gt;&lt;a href="#using-openapi-reference-from-command-line"&gt;Using OpenAPI reference from command line&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You may wonder if it is as simple if you do not have Visual Studio as your IDE. It is; Microsoft published a dotnet tool for this exact reason. You can install it by running &lt;code&gt;dotnet tool install --local Microsoft.dotnet-openapi --version 7.0.4&lt;/code&gt;. You can add the API specification by using a terminal from your project's directory and running the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet dotnet-openapi add file ..\..\Api\Demo\bin\Debug\net7.0\Demo.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;12.0.2&amp;quot; /&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;NSwag.ApiDescription.Client&amp;quot; Version=&amp;quot;13.0.5&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&amp;lt;ItemGroup&amp;gt;
  &amp;lt;OpenApiReference Include=&amp;quot;..\..\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah, that is right, it is similar but not the same as if done via Visual Studio.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The package &lt;code&gt;Microsoft.Extensions.ApiDescription.Client&lt;/code&gt; is missing.&lt;/li&gt;
&lt;li&gt;The version for NewtonSoft is different.&lt;/li&gt;
&lt;li&gt;The CodeGenerator is not specified, and it defaults to &lt;code&gt;NSwagCSharp&lt;/code&gt;.
I expected the tool to use the same templates as Visual Studio, but this is not the case. The missing package is still used, but as a transitive dependency of &lt;code&gt;NSwag.ApiDescription.Client&lt;/code&gt;, with the installed version it is just a preview build.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do note that it is not required to use the dotnet tool for this; you can manually add the same lines as provided above. The tool is just there for convenience. Documentation for the tool is still somewhat limited but is described at the &lt;a href="https://learn.microsoft.com/en-us/aspnet/core/web-api/microsoft.dotnet-openapi?view=aspnetcore-7.0" class="external"&gt;docs&lt;/a&gt; over here.&lt;/p&gt;
&lt;h3 id="influence-created-output"&gt;&lt;a href="#influence-created-output"&gt;Influence created output&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have already seen that for the manual approach, making changes to the configuration can be done by modifying the nswag.json, a file we do not have when using OpenApiReference. So this section will go into making the same modification for this version.&lt;/p&gt;
&lt;p&gt;Before I go into it, we must fix one issue with the template used so far. There is a glaring issue which only appears if you have built the project in different ways. For example, here is the output building from Visual Studio&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;1&amp;gt;GenerateNSwagCSharp:
1&amp;gt;  &amp;quot;C:\Users\hamulyak\.nuget\packages\nswag.msbuild\13.0.5\build\../tools/Win/NSwag.exe&amp;quot; openapi2csclient /className:DemoClient /namespace:ConnectedService /input:C:\projects\BlogTopics\MyBlog\src\Api\Demo\bin\Debug\net7.0\Demo.json /output:obj\DemoClient.cs
1&amp;gt;NSwag command line tool for .NET 4.6.1+ WinX64, toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))
1&amp;gt;Visit http://NSwag.org for more information.
1&amp;gt;NSwag bin directory: C:\Users\hamulyak\.nuget\packages\nswag.msbuild\13.0.5\tools\Win
1&amp;gt;Code has been successfully written to file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare that with the output from the dotnet CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;  GenerateNSwagCSharp:
    dotnet --roll-forward-on-no-candidate-fx 2 C:\Users\hamulyak\.nuget\packages\nswag.msbuild\13.0.5\build\../tools/NetCore21//dotnet-nswag.dll openapi2csclient /className:DemoClient /na
  mespace:ConnectedService /input:C:\projects\BlogTopics\MyBlog\src\Api\Demo\bin\Debug\net7.0\Demo.json /output:obj\DemoClient.cs
  NSwag command line tool for .NET Core NetCore21, toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))
  Visit http://NSwag.org for more information.
  NSwag bin directory: C:\Users\hamulyak\.nuget\packages\nswag.msbuild\13.0.5\tools\NetCore21
  Code has been successfully written to file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you see the issue? The CLI variant differs from the NSwag version used; it uses a &lt;code&gt;NetCore21&lt;/code&gt; dll. We get this behaviour because the templates use an outdated package version. According to NuGet the old version (13.0.5) is downloaded over 2 million times, whereas all other versions do not exceed half a million. After updating, the NSwag version will equal your project's target framework.&lt;/p&gt;
&lt;p&gt;Back to the issue at hand, how do we customize the output? It is a mix-match situation. You can modify the Namespace and Client name directly by specifying them as properties on the &lt;OpenApiReference&gt; line like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;OpenApiReference Include=&amp;quot;..\..\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; 
                  CodeGenerator=&amp;quot;NSwagCSharp&amp;quot; 
                  Namespace=&amp;quot;MyNamespace&amp;quot;
                  ClassName=&amp;quot;MyClient&amp;quot; 
                  Link=&amp;quot;OpenAPIs\Demo.json&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other options, like the JsonLibrary, need to be formatted differently. Like &lt;code&gt;Namespace&lt;/code&gt;, there is an &lt;code&gt;Options&lt;/code&gt; attribute. For example, we change the configuration below to use SystemTextJson and provide a custom name for the Exception class in the generated code base.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;OpenApiReference Include=&amp;quot;..\..\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; 
                  CodeGenerator=&amp;quot;NSwagCSharp&amp;quot; 
                  Options=&amp;quot;/JsonLibrary:SystemTextJson /ExceptionClass:DemoApiException&amp;quot; 
                  ClassName=&amp;quot;MyClient&amp;quot; 
                  Link=&amp;quot;OpenAPIs\Demo.json&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any value set by nswag.json can also be provided here in the format &lt;code&gt;/propertyName:value&lt;/code&gt;. I like to point out that properties like namespace can not be set here, so the following snippet will not work.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;OpenApiReference 
  Include=&amp;quot;..\..\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; 
  CodeGenerator=&amp;quot;NSwagCSharp&amp;quot; 
  Options=&amp;quot;/Namespace:MyNamspace /JsonLibrary:SystemTextJson /ExceptionClass:DemoApiException&amp;quot; 
  ClassName=&amp;quot;MyClient&amp;quot; 
  Link=&amp;quot;OpenAPIs\Demo.json&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is that task creates the following NSwag command (displayed in the output window)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet --roll-forward-on-no-candidate-fx 2 &amp;quot;C:\Users\hamulyak\.nuget\packages\nswag.msbuild\13.18.2\build\../tools/Net70//dotnet-nswag.dll&amp;quot; openapi2csclient /className:MyClient /namespace:Override /input:&amp;quot;C:\projects\BlogTopics\MyBlog\src\Api\Demo\bin\Debug\net7.0\Demo.json&amp;quot; /output:&amp;quot;obj\DemoClient.cs&amp;quot; /Namespace:MyNamspace /JsonLibrary:SystemTextJson /ExceptionClass:DemoApiException
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It has a duplicate &lt;code&gt;/Namespace&lt;/code&gt;, and the first wins. The only way to customize the namespace is by providing it as an attribute. Otherwise, the default value, which is the assembly name, will be used.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In conclusion, I cannot deny that the OpenApiReference feels a lot easier than the manual approach. It has its issues. For example, the lack of documentation configuring the generated code is disappointing. I also think it is weird that the different approaches between Visual Studio and command-line are out of sync and that both templates are outdated. It makes me question if people are using it. Both reasons are not a hard no-go for me. The new approach does feel less like magic, but the trade-off for me is that the settings used are less transparent than a nswag.json file. As I showed in the previous version of this article, NSwag can also function without specifying all options and will apply the defaults themselves. I like things to be explicit, so that is a point in favour of the manual approach, that it gives me a choice to specify everything or omit the things I don't need. The abstraction might have been better if we could still provide a config file or if there were properties that Microsoft would map to NSwag stuff internally, decoupling my code generation from the implementation. What do you think about this? Which version do you prefer?&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/GenerateCSharpClientForOpenAPIRevisited" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="additional-resources"&gt;&lt;a href="#additional-resources"&gt;Additional Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/generating-http-api-clients-using-visual-studio-connected-services/" class="external"&gt;Visual Studio Connected Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2022/09/17/how-to-use-azurite-for-testing-azure-storage-in-dotnet.html</id>
    <title type="text">How to use Azurite for testing Azure Storage in dotnet?</title>
    <summary type="text">Learn how to setup the Azure SDK for dotnet with Azurite</summary>
    <published>DateTimeOffset_3</published>
    <updated>DateTimeOffset_3</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2022/09/17/how-to-use-azurite-for-testing-azure-storage-in-dotnet.html" />
    <category term="C#" />
    <category term="Azure" />
    <category term="Testing" />
    <content type="html">&lt;h2 id="how-to-test-a-dependency-on-azure"&gt;&lt;a href="#how-to-test-a-dependency-on-azure"&gt;How to test a dependency on Azure?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A recent project tasked me with integrating an application with Azure Blob Storage. Due to my post &lt;a href="https://BaseUrl_1/2022/02/21/working-with-azure-sdk-for-dotnet.html" class="external"&gt;&amp;quot;Working with Azure SDK for .NET&amp;quot;&lt;/a&gt;, I knew all about the current SDK to interface with Azure. The team in charge of the dotnet SDK has done a great job with providing accessible samples. My previous post did not focus on the testability aspects of the System, mainly because it was a simple demo for production code that is, of course, a no-go.&lt;/p&gt;
&lt;p&gt;There are a few ways we can go about testing this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a mock or fake implementation of every Storage API required.&lt;/li&gt;
&lt;li&gt;Hide the blob implementation behind an internal interface and mock that in your tests.&lt;/li&gt;
&lt;li&gt;Create a real storage account (per developer) in Azure.&lt;/li&gt;
&lt;li&gt;Emulate storage account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The argument to go with option 1 / 2 is that you, the developer, are not responsible for testings Azure's internal components. Option 3 has the challenge of cost and test repeatability. Because option three hosts the dependency externally, you need to set up and teardown for anything done in your tests. For example, you cannot create a file with the same name twice. Option 4 has the problem: any emulator does not guarantee to be 100% equal to the real deal.&lt;/p&gt;
&lt;p&gt;While I agree with the argument for the first two options, the point here is to test if we can successfully integrate with Azure (as opposed to asserting their SDK works as expected). You can debate if testing with emulators or Azure is still a unit test. Using EntityFramework's DbContext in a test would warrant the same definition question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: if you only remember one thing from this post, let it be that every option except the third requires you to test in Azure. All other options are not the actual integration, and your application can behave differently once deployed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-can-azurite-help-by-emulating-azure-storage"&gt;&lt;a href="#how-can-azurite-help-by-emulating-azure-storage"&gt;How can Azurite help by emulating Azure Storage?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The test solution I picked was using the popular open-source emulator called &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite" class="external"&gt;Azurite&lt;/a&gt;. The Azurite tool offers a local environment for Azure Blob, Azure Queue and Azure Table services. In the past, we also had Microsofts own Storage Account Emulator, but it appears that development on that has stopped, and the focussed shifted to Azurite.&lt;/p&gt;
&lt;p&gt;There are several ways to run Azurite (i.e. Docker or NPM).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;# install Azurite
npm install -g azurite

# run Azurite
azurite --silent --location c:\azurite --debug c:\azurite\debug.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we create a demo app and install blob storage via &lt;code&gt;dotnet add package Azure.Storage.Blobs&lt;/code&gt;. We can connect with the following snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Azure.Storage.Blobs;

var connectionString = &amp;quot;DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;&amp;quot;;
var blobServiceClient = new BlobServiceClient(connectionString);
var properties = await blobServiceClient.GetPropertiesAsync().ConfigureAwait(false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet works because the connection string we provided is the default connection string for Azurite. It contains the default account known as &lt;code&gt;devstoreaccount1&lt;/code&gt; and connects over HTTP. The default connection string also assumes you are running blob, queue and table services. For example, on NPM you could run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;# Run only Blob
azurite-blob --silent --location c:\azurite --debug c:\azurite\debug.log
# Run only Queue
azurite-queue --silent --location c:\azurite --debug c:\azurite\debug.log
# Run only Table
azurite-table --silent --location c:\azurite --debug c:\azurite\debug.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most would stop here because what I have shown so far is more than enough to use BlobServices from test code. It even works in &lt;a href="https://docs.microsoft.com/en-us/azure/storage/blobs/use-azurite-to-run-automated-tests#run-tests-on-azure-pipelines" class="external"&gt;Azure Pipelines&lt;/a&gt;. I, however, am still not entirely happy with it.&lt;/p&gt;
&lt;h2 id="how-to-use-azurite-without-a-connectionstring"&gt;&lt;a href="#how-to-use-azurite-without-a-connectionstring"&gt;How to use Azurite without a ConnectionString?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the post &lt;a href="https://BaseUrl_1/2022/02/21/working-with-azure-sdk-for-dotnet.html" class="external"&gt;&amp;quot;Working with Azure SDK for .NET&amp;quot;&lt;/a&gt; I made a point that connection strings should be a thing of the past. The &lt;code&gt;TokenCredential&lt;/code&gt; should be the way forward (&lt;code&gt;dotnet add package Azure.Identity&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Azure.Identity;
using Azure.Storage.Blobs;

var endpoint = new Uri(&amp;quot;http://127.0.0.1:10000/devstoreaccount1&amp;quot;);
var credential = new DefaultAzureCredential();
var blobServiceClient = new BlobServiceClient(endpoint, credential, new BlobClientOptions());
var properties = await blobServiceClient.GetPropertiesAsync().ConfigureAwait(false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the default configuration, the above snippet should have worked. However, you get the following error &lt;code&gt;System.ArgumentException: Cannot use TokenCredential without HTTPS.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Azurite has an overload to provide HTTPS support. You can &lt;a href="https://github.com/Azure/Azurite#https-setup" class="external"&gt;use a tool&lt;/a&gt; called mkcert to generate the required files.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;# Run once
mkcert 127.0.0.1

# Run over HTTPs
azurite --silent --location c:\azurite --debug c:\azurite\debug.log --cert 127.0.0.1.pem --key 127.0.0.1-key.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the endpoint Uri to HTTPS:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Azure.Identity;
using Azure.Storage.Blobs;

var endpoint = new Uri(&amp;quot;https://127.0.0.1:10000/devstoreaccount1&amp;quot;);
var credential = new DefaultAzureCredential();
var blobServiceClient = new BlobServiceClient(endpoint, credential, new BlobClientOptions());
var properties = await blobServiceClient.GetPropertiesAsync().ConfigureAwait(false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run our test example now, it will fail with the warning that an SSL connection cannot be established. We can solve this with generating a CA certificate from mkcert with &lt;code&gt;mkcert --install&lt;/code&gt;. However, even with a valid SSL certificate TokenCredential will still fail. For TokenCredential to work we need to pass &lt;code&gt;--oath basic&lt;/code&gt; to Azurite.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;azurite --silent --location c:\azurite --debug c:\azurite\debug.log --cert 127.0.0.1.pem --key 127.0.0.1-key.pem --oauth basic
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="can-i-use-azurite-https-connection-string-in-cicd-pipelines"&gt;&lt;a href="#can-i-use-azurite-https-connection-string-in-cicd-pipelines"&gt;Can I use Azurite HTTPS connection string in CICD pipelines?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we can use TokenCredential, I am happy. The test instance of our BlobServiceClient is almost identical to the production configuration. We have established that it works locally, but how about a CICD environment? I modified the example pipeline to add the mkcert bits.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;steps:
  - bash: |
      choco install mkcert
      npm install -g azurite
      mkdir azurite
      cd azurite
      mkcert --install
      mkcert 127.0.0.1
      azurite --oauth basic --cert 127.0.0.1.pem --key 127.0.0.1-key.pem --silent --location data --debug data\debug.log &amp;amp;
    displayName: &amp;quot;Install and Run Azurite&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, adding a certificate to the trust store requires a password prompt. On an Azure-hosted agent, this does not work and causes the agent &lt;a href="https://github.com/FiloSottile/mkcert/issues/286" class="external"&gt;to be stuck&lt;/a&gt;. To me, this could mean one of two things. Either the Azure team does not test over HTTPS, or they have a different set of test tooling. As it turns out, they have a set of helpers to construct the service clients and disable SSL verification. Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Azure.Core.Pipeline;
using Azure.Identity;
using Azure.Storage.Blobs;

var endpoint = new Uri(&amp;quot;https://127.0.0.1:10000/devstoreaccount1&amp;quot;);
var credential = new DefaultAzureCredential();
var blobServiceClient = new BlobServiceClient(endpoint, credential, new BlobClientOptions()
{
    Transport = new HttpClientTransport(new HttpClient(new HttpClientHandler
    {
        ServerCertificateCustomValidationCallback =
            HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
    }))
});
var properties = await blobServiceClient.GetPropertiesAsync().ConfigureAwait(false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can now be used in Azure Pipelines like this (note the lack of mkcert --install)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;steps:
  - bash: |
      choco install mkcert
      npm install -g azurite
      mkdir azurite
      cd azurite
      mkcert 127.0.0.1
      azurite --oauth basic --cert 127.0.0.1.pem --key 127.0.0.1-key.pem --silent --location data --debug data\debug.log &amp;amp;
    displayName: &amp;quot;Install and Run Azurite&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="how-to-use-azurite-in-my-project"&gt;&lt;a href="#how-to-use-azurite-in-my-project"&gt;How to use Azurite in my project?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The testing helpers have more to it than disabling SSL but are not present on NuGet. So naturally, I raised &lt;a href="https://github.com/Azure/azure-sdk-for-net/issues/30751" class="external"&gt;an issue&lt;/a&gt; to the SDK team if they have any plans in that direction. Unfortunately, at this point, they have no interest in releasing their internal test tooling. The techniques I mentioned thus far can be used standalone. I, however, felt this was an excellent opportunity to create my first NuGet Package. The package cannot assume how anybody runs Azurite, so I introduced two classes. You can use &lt;code&gt;AzuriteAccountBuilder&lt;/code&gt; to configure how things are run, like the account or the ports being used. The &lt;code&gt;AzuriteAccount&lt;/code&gt; class provides access to stuff like the connection string. For convenience the package also creates helper methods to create &lt;code&gt;BlobServiceClient&lt;/code&gt;, &lt;code&gt;TableServiceClient&lt;/code&gt; or &lt;code&gt;QueueServiceClient&lt;/code&gt; form an &lt;code&gt;AzuriteAccount&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My package is designed for use in a test project so let us create a new test project (i.e. &lt;code&gt;dotnet new xunit&lt;/code&gt;) and add my package to it &lt;code&gt;dotnet add package Kaylumah.Testing.Azurite --version 1.0.0&lt;/code&gt;.
The most explicit way to create an AzuriteAccount is with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public async Task Test1()
{
    var account = new AzuriteAccountBuilder()
        .WithProtocol(secure: false)
        .WithDefaultAccount()
        .WithDefaultBlobEndpoint()
        .WithDefaultQueueEndpoint()
        .WithDefaultTableEndpoint()
        .Build();

    var blobServiceClient = account.CreateBlobServiceViaConnectionString();
    await blobServiceClient.GetPropertiesAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet above creates a connection string based on the default settings. That means it should match the connection string when someone runs Azurite without parameters. For convenience, I have also added a helper class that creates this default account for you.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public async Task Test2()
{
    var account = AzuriteHelper.CreateDefaultAzuriteAccountBuilder().Build();
    var blobServiceClient = account.CreateBlobServiceViaSharedKeyCredential();
    await blobServiceClient.GetPropertiesAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package offers the same convenience helpers for Queue and Table storage. You can use the connection string, shared key, azure sas key or token credential with the helpers.&lt;/p&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started this journey with knowledge about Azurite and the dotnet SDK for Azure. I knew from experience that I no longer wanted to work with managed identity instead of connection strings. I needed a way to have repeatable tests on local and CI/CD environments. The funny thing is that after I had everything working the way I wanted, I could not use the required API I needed. For a moment, I had forgotten Azurite is an emulator, and not all features are supported. So I had to fall back on shared key credentials, which work fine over HTTPS and could already be used in pipelines. Luckily I designed the package to work with a variety of configurations.&lt;/p&gt;
&lt;p&gt;Usually, this is where I post a link to the posts GitHub repo. This time, the source code is the NuGet package on this &lt;a href="https://github.com/kaylumah/Kaylumah.Testing.Azurite" class="external"&gt;GitHub Repo&lt;/a&gt;. In the post itself, I focussed on NPM; if you are looking for how to integrate with Docker containers, you can find an example test &lt;a href="https://github.com/kaylumah/Kaylumah.Testing.Azurite/blob/main/test/Unit/AzuriteDockerRunner.cs" class="external"&gt;in the GitHub repo&lt;/a&gt; As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them. Especially since this is my first NuGet package let me know if it helped you out.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2022/06/07/share-debug-configuration-with-launch-profiles.html</id>
    <title type="text">Share debug configuration between .NET IDEs with launch profiles</title>
    <summary type="text">Pick your own .NET IDE and benefit from shared developer configuration with launchSettings.json</summary>
    <published>DateTimeOffset_4</published>
    <updated>DateTimeOffset_4</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2022/06/07/share-debug-configuration-with-launch-profiles.html" />
    <category term="Rider" />
    <category term="Visual Studio" />
    <category term="VS Code" />
    <content type="html">&lt;p&gt;Anno 2022, as &lt;code&gt;.NET&lt;/code&gt; developers, we are spoilt with multiple options for our development environment. Of course, having a choice sparks the debate that my IDE is better than your IDE. I feel that after &lt;code&gt;bring your own device&lt;/code&gt;, we are moving to a &lt;code&gt;bring your own IDE&lt;/code&gt; workspace. Given the rise of tooling like &lt;code&gt;VS Code DevContainer&lt;/code&gt; and &lt;code&gt;GitHub Codespaces&lt;/code&gt;, I think more developers will likely opt for such tooling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you know that most of my blogs are written for use in dev containers and are available in GitHub Codespaces?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each IDE has its perks but also its quirks. Who am I to tell you that tool X is better than Y. If you can work using the tool you prefer, you can be much more productive than a tool because the company said so. It does bring its challenges. For example, if you change a file in your IDE, I don't want it formatted when I open it in my IDE. My version control system will show more changes to a project than happened. Lucky for us, tools like &lt;code&gt;.editorConfig&lt;/code&gt; help us a lot to streamline this process. I switch back and forth a lot between VS Code and Visual Studio. My team was working with &lt;code&gt;Rider&lt;/code&gt; for a recent customer project. Keeping settings in sync between two IDEs was hard enough. So it made me wonder, is there an equivalent for &lt;code&gt;.editorConfig&lt;/code&gt; but used for debug-configuration. I knew that &lt;code&gt;Visual Studio&lt;/code&gt; has the concept of a &lt;code&gt;launchSettings.json&lt;/code&gt; file. As I discovered, it is possible to make both &lt;code&gt;Rider&lt;/code&gt; and &lt;code&gt;VS Code&lt;/code&gt; play nice with &lt;code&gt;launchSettings.json&lt;/code&gt;. It is by no means perfect, but at least for me, it solves some of the caveats in a &lt;code&gt;bring your own IDE&lt;/code&gt; world.&lt;/p&gt;
&lt;p&gt;If you were wondering, &amp;quot;Max launchSettings.json has been around for years; why are you writing this article?&amp;quot; The answer to that is straightforward. It bugged me a lot that I had to repeat myself. When searching for how to configure my IDE, I came across the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-6.0#development-and-launchsettingsjson" class="external"&gt;ASP.NET Fundamentals - Environment&lt;/a&gt;. It suggests using the &lt;code&gt;VS Code&lt;/code&gt; variant of configuration but does not mention that you can reuse your &lt;code&gt;Visual Studio&lt;/code&gt; one. Reading that article prompted me to write down what I learned so that someday someone might benefit from it.&lt;/p&gt;
&lt;h2 id="what-is-launchsettings"&gt;&lt;a href="#what-is-launchsettings"&gt;What is LaunchSettings?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me begin with a quick recap about &lt;code&gt;launchSettings.json&lt;/code&gt;. A launch settings file contains &lt;a href="https://github.com/dotnet/project-system/blob/main/docs/launch-profiles.md" class="external"&gt;Launch Profiles&lt;/a&gt;. A &lt;code&gt;Launch Profile&lt;/code&gt; is a kind of configuration that specifies how to run your project. Having these launch profiles allows you to switch between configurations easily. Typical scenarios are switching between Development and Production environments or enabling feature flags. Launch profiles are in the optional &lt;code&gt;Properties\launchSettings.json&lt;/code&gt; file. For example, a freshly created console project will not have one, whereas a web API project will define one.&lt;/p&gt;
&lt;p&gt;A launch profile has a couple of properties depending on the project type. I will highlight the ones that are relevant to this post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commandName&lt;/code&gt;: the only required setting which determines how a project is launched. To work in every IDE this settings needs to be &lt;code&gt;Project&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commandLineArgs&lt;/code&gt;: a string containing arguments to supply to the application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environmentVariables&lt;/code&gt;: A collection of name/value pairs, each specifying an environment variable and value to set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few important notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Environment values set in launchSettings.json override values set in the system environment.&lt;/li&gt;
&lt;li&gt;The launchSettings.json file is only used on the local development machine.&lt;/li&gt;
&lt;li&gt;The launchSettings.json file shouldn't store secrets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="project-setup"&gt;&lt;a href="#project-setup"&gt;Project Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For our sample application, we will create a new project using the &amp;quot;Console Template&amp;quot; with &lt;code&gt;dotnet new console&lt;/code&gt;. Since it is a console, we must create a &lt;code&gt;Properties\launchSettings.json&lt;/code&gt; by hand. At a minimum, the file would look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;$schema&amp;quot;: &amp;quot;https://json.schemastore.org/launchsettings.json&amp;quot;,
    &amp;quot;profiles&amp;quot;: {
        &amp;quot;DemoConsole.V0&amp;quot;: {
            &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are demoing features of &lt;code&gt;launchSettings.json&lt;/code&gt;, it will not be a nice demo if we don't populate it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;$schema&amp;quot;: &amp;quot;https://json.schemastore.org/launchsettings.json&amp;quot;,
    &amp;quot;profiles&amp;quot;: {
        &amp;quot;DemoConsole.V0&amp;quot;: {
            &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
            &amp;quot;commandLineArgs&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;environmentVariables&amp;quot;: {
                &amp;quot;KAYLUMAH_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;
            }
        },
        &amp;quot;DemoConsole.V1&amp;quot;: {
            &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
            &amp;quot;environmentVariables&amp;quot;: {
                &amp;quot;KAYLUMAH_ENVIRONMENT&amp;quot;: &amp;quot;Production&amp;quot;
            }
        },
        &amp;quot;DemoConsole.V2&amp;quot;: {
            &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
            &amp;quot;commandLineArgs&amp;quot;: &amp;quot;--mysetting myvalue&amp;quot;,
            &amp;quot;environmentVariables&amp;quot;: {
                &amp;quot;KAYLUMAH_ENVIRONMENT&amp;quot;: &amp;quot;Production&amp;quot;
            }
        },
        &amp;quot;DemoConsole.V3&amp;quot;: {
            &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
            &amp;quot;commandLineArgs&amp;quot;: &amp;quot;--mysetting myvalue&amp;quot;,
            &amp;quot;environmentVariables&amp;quot;: {
                &amp;quot;KAYLUMAH_ENVIRONMENT&amp;quot;: &amp;quot;Production&amp;quot;,
                &amp;quot;KAYLUMAH_FROMVARIABLE1&amp;quot;: &amp;quot;$(TargetFramework)&amp;quot;,
                &amp;quot;KAYLUMAH_FROMVARIABLE2&amp;quot;: &amp;quot;$(MyCustomProp)&amp;quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The console app will build an &lt;code&gt;IConfiguration&lt;/code&gt; and print it to the console. Since I don't feel like adding all my environment variables, I add only the ones prefixed with &lt;code&gt;KAYLUMAH_&lt;/code&gt;, kinda like how .NET automatically includes variables prefixed with &lt;code&gt;DOTNET_&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.Extensions.Configuration;

IConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
configurationBuilder.AddEnvironmentVariables(&amp;quot;KAYLUMAH_&amp;quot;);
if (args is { Length: &amp;gt; 0 })
{
    configurationBuilder.AddCommandLine(args);
}
var configuration = configurationBuilder.Build();

if (configuration is IConfigurationRoot configurationRoot)
{
    Console.WriteLine(configurationRoot.GetDebugView());
}

Console.WriteLine(&amp;quot;Done...&amp;quot;);
Console.ReadLine();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run the project now, the output should be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: 'KAYLUMAH_')

Done...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also generate a project from the &lt;code&gt;webapi template&lt;/code&gt;. We slightly modify it so it contains a second profile, so it looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;$schema&amp;quot;: &amp;quot;https://json.schemastore.org/launchsettings.json&amp;quot;,
  &amp;quot;iisSettings&amp;quot;: {
    &amp;quot;windowsAuthentication&amp;quot;: false,
    &amp;quot;anonymousAuthentication&amp;quot;: true,
    &amp;quot;iisExpress&amp;quot;: {
      &amp;quot;applicationUrl&amp;quot;: &amp;quot;http://localhost:33652&amp;quot;,
      &amp;quot;sslPort&amp;quot;: 44325
    }
  },
  &amp;quot;profiles&amp;quot;: {
    &amp;quot;DemoApi&amp;quot;: {
      &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
      &amp;quot;dotnetRunMessages&amp;quot;: true,
      &amp;quot;launchBrowser&amp;quot;: true,
      &amp;quot;launchUrl&amp;quot;: &amp;quot;swagger&amp;quot;,
      &amp;quot;applicationUrl&amp;quot;: &amp;quot;https://localhost:7238;http://localhost:5200&amp;quot;,
      &amp;quot;environmentVariables&amp;quot;: {
        &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;
      }
    },
    &amp;quot;DemoApi.Production&amp;quot;: {
      &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;,
      &amp;quot;dotnetRunMessages&amp;quot;: true,
      &amp;quot;launchBrowser&amp;quot;: true,
      &amp;quot;launchUrl&amp;quot;: &amp;quot;swagger&amp;quot;,
      &amp;quot;applicationUrl&amp;quot;: &amp;quot;https://localhost:7238;http://localhost:5200&amp;quot;,
      &amp;quot;environmentVariables&amp;quot;: {
        &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Production&amp;quot;
      }
    },
    &amp;quot;IIS Express&amp;quot;: {
      &amp;quot;commandName&amp;quot;: &amp;quot;IISExpress&amp;quot;,
      &amp;quot;launchBrowser&amp;quot;: true,
      &amp;quot;launchUrl&amp;quot;: &amp;quot;swagger&amp;quot;,
      &amp;quot;environmentVariables&amp;quot;: {
        &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on your chosen profile, you see a &lt;code&gt;Swagger UI&lt;/code&gt; dashboard.&lt;/p&gt;
&lt;h2 id="share-debug-configuration-from-microsoft-visual-studio"&gt;&lt;a href="#share-debug-configuration-from-microsoft-visual-studio"&gt;Share debug configuration from Microsoft Visual Studio&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I could not verify it online, but I think Visual Studio introduced launch settings as part of the first &lt;code&gt;ASP NET Core&lt;/code&gt; release. Since launch profiles is a &lt;code&gt;Visual Studio&lt;/code&gt; feature, I don't have much to add above the definition I've already given for the specification. One cool thing I like to mention is that running from &lt;code&gt;Visual Studio&lt;/code&gt; &lt;code&gt;launchSettings&lt;/code&gt; can reference &lt;code&gt;MSBuild&lt;/code&gt; variables. That is a pretty handy way to provide something dynamic.&lt;/p&gt;
&lt;p&gt;For our console, we see the following selection in Visual Studio:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/visualstudio_console_launchprofile.png" width="2640" height="796" alt="Microsoft Visual Studio - Console Launch Profile" /&gt;&lt;/p&gt;
&lt;p&gt;For our API, we see the following selection in Visual Studio:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/visualstudio_api_launchprofile.png" width="2604" height="1080" alt="Microsoft Visual Studio - API Launch Profile" /&gt;&lt;/p&gt;
&lt;p&gt;As you see, the WebAPI variant shows more than just our launch profiles.&lt;/p&gt;
&lt;p&gt;Another aspect of development configuration is the ability to run more projects simultaneously. We can achieve this in &lt;code&gt;Visual Studio&lt;/code&gt; by selecting multiple startup projects.  As far as I know, this function is user-specific, which would result in every developer repeating information. Luckily there is a handy plugin called &lt;a href="https://marketplace.visualstudio.com/items?itemName=vs-publisher-141975.SwitchStartupProjectForVS2022" class="external"&gt;SwitchStartUpProject&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can quickly provide multiple configurations. We can provide a &lt;code&gt;ProfileName&lt;/code&gt; for each project that matches one in our launch settings. It is that simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;Version&amp;quot;: 3,
    &amp;quot;ListAllProjects&amp;quot;: false,
    &amp;quot;MultiProjectConfigurations&amp;quot;: {
        &amp;quot;Demo&amp;quot;: {
            &amp;quot;Projects&amp;quot;: {
                &amp;quot;DemoConsole&amp;quot;: {
                    &amp;quot;ProfileName&amp;quot;: &amp;quot;DemoConsole.V1&amp;quot;
                },
                &amp;quot;DemoApi&amp;quot;: {
                    &amp;quot;ProfileName&amp;quot;: &amp;quot;DemoApi&amp;quot;
                }
            },
            &amp;quot;SolutionConfiguration&amp;quot;: &amp;quot;Release&amp;quot;,
            &amp;quot;SolutionPlatform&amp;quot;: &amp;quot;x64&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/visualstudio_compound_configuration.png" width="3848" height="348" alt="Microsoft Visual Studio - Compound Settings" /&gt;&lt;/p&gt;
&lt;h2 id="share-debug-configuration-from-jetbrains-rider"&gt;&lt;a href="#share-debug-configuration-from-jetbrains-rider"&gt;Share debug configuration from JetBrains Rider&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As it turns out, &lt;code&gt;launchSettings&lt;/code&gt; has been supported in &lt;code&gt;Rider&lt;/code&gt; for a long time. They first introduced it in &lt;a href="https://blog.jetbrains.com/dotnet/2018/11/08/using-net-core-launchsettings-json-rundebug-apps-rider/" class="external"&gt;November 2018&lt;/a&gt;. As a matter of fact, to use &lt;code&gt;launchSettings&lt;/code&gt; inside &lt;code&gt;Rider&lt;/code&gt; you don't need to do a thing. &lt;code&gt;Rider&lt;/code&gt; &lt;a href="https://www.jetbrains.com/help/rider/Run_Debug_Configuration_dotNet_Launch_Settings_Profile.html#creating-run-debug-configurations-based-on-launch-profiles" class="external"&gt;automatically detects&lt;/a&gt; if your projects are using &lt;code&gt;launchSettings&lt;/code&gt;. Not all features are supported, but using profiles of &lt;code&gt;commandName project&lt;/code&gt; are. If you did provide MSBuild variable in &lt;code&gt;launchSettings&lt;/code&gt; &lt;code&gt;Rider&lt;/code&gt; would correctly pass them along.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/rider_launchprofiles.png" width="964" height="904" alt="JetBrains Rider - launch profiles" /&gt;&lt;/p&gt;
&lt;p&gt;A thing I like about &lt;code&gt;Rider&lt;/code&gt; is that I don't need an additional plugin to support multiple start up projects.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/rider_compound_configuration.png" width="3456" height="2144" alt="JetBrains Rider - Compound Settings" /&gt;&lt;/p&gt;
&lt;p&gt;It's important to check &lt;code&gt;Store as project file&lt;/code&gt;; otherwise, you won't share it with your team. In this particular example, it will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;component name=&amp;quot;ProjectRunConfigurationManager&amp;quot;&amp;gt;
  &amp;lt;configuration default=&amp;quot;false&amp;quot; name=&amp;quot;Console and API&amp;quot; type=&amp;quot;CompoundRunConfigurationType&amp;quot;&amp;gt;
    &amp;lt;toRun name=&amp;quot;DemoApi: DemoApi.Production&amp;quot; type=&amp;quot;LaunchSettings&amp;quot; /&amp;gt;
    &amp;lt;toRun name=&amp;quot;DemoConsole: DemoConsole.V3&amp;quot; type=&amp;quot;LaunchSettings&amp;quot; /&amp;gt;
    &amp;lt;method v=&amp;quot;2&amp;quot; /&amp;gt;
  &amp;lt;/configuration&amp;gt;
&amp;lt;/component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="share-debug-configuration-from-microsoft-vs-code"&gt;&lt;a href="#share-debug-configuration-from-microsoft-vs-code"&gt;Share debug configuration from Microsoft VS Code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last but not least is &lt;code&gt;VS Code&lt;/code&gt;, the reason I started this article. When you open a .NET project in &lt;code&gt;VS Code&lt;/code&gt;, you get prompted to create a &lt;code&gt;launch.json&lt;/code&gt; file. A &lt;code&gt;launch.json&lt;/code&gt; file is very similar to a &lt;code&gt;launchSettings.json&lt;/code&gt;. Both options provide the means to choose a project, set command-line arguments and override environment variables. The default &lt;code&gt;launch.json&lt;/code&gt; does not pass any additional configuration to the project. So what would be the logical output of our command?
The answer might surprise you.&lt;/p&gt;
&lt;p&gt;Given the following configuration in &lt;code&gt;launch.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;.NET Core Launch (console)&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;coreclr&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
    &amp;quot;preLaunchTask&amp;quot;: &amp;quot;build&amp;quot;,
    &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/bin/Debug/net6.0/DemoConsole.dll&amp;quot;,
    &amp;quot;args&amp;quot;: [],
    &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
    &amp;quot;console&amp;quot;: &amp;quot;internalConsole&amp;quot;,
    &amp;quot;stopAtEntry&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: 'KAYLUMAH_')

Done...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is because you have secretly been using &lt;code&gt;launchSettings.json&lt;/code&gt; the whole time. In May 2018, release &lt;a href="https://github.com/OmniSharp/omnisharp-vscode/blob/master/CHANGELOG.md#1150-may-10-2018" class="external"&gt;1.15.0&lt;/a&gt; of the extension shipped &lt;code&gt;launchSettings.json&lt;/code&gt; support. If you don't add &lt;code&gt;launchSettingsProfile&lt;/code&gt; to your &lt;code&gt;launch.json&lt;/code&gt;, it will use the first profile for a project that is of type &lt;code&gt;&amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot;&lt;/code&gt;. Ever had unexplained variables in your project? This is likely the reason why. Remember our default profile set an environment variable, and variables from &lt;code&gt;launchSettings.json&lt;/code&gt; win from system environment variables. I recommend explicitly specifying &lt;code&gt;launchSettingsProfile&lt;/code&gt; to make it clear that a) you are using it and b) if you change the order of profiles, you don't create unexpected changes for other developers.&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;Rider&lt;/code&gt; the support for this feature comes with a few &lt;a href="https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md#launchsettingsjson-support" class="external"&gt;restrictions&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only profiles with &amp;quot;commandName&amp;quot;: &amp;quot;Project&amp;quot; are supported.&lt;/li&gt;
&lt;li&gt;Only environmentVariables, applicationUrl and commandLineArgs properties are supported&lt;/li&gt;
&lt;li&gt;Settings in launch.json will take precedence over settings in launchSettings.json, so for example, if args is already set to something other than an empty string/array in launch.json then the launchSettings.json content will be ignored.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since you can provide arguments and environment variables in both &lt;code&gt;launch.json&lt;/code&gt; and &lt;code&gt;launchSettings.json&lt;/code&gt;, let's look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;.NET Core Launch (console)&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;coreclr&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
    &amp;quot;preLaunchTask&amp;quot;: &amp;quot;build&amp;quot;,
    &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/bin/Debug/net6.0/DemoConsole.dll&amp;quot;,
    &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
    &amp;quot;console&amp;quot;: &amp;quot;internalConsole&amp;quot;,
    &amp;quot;stopAtEntry&amp;quot;: false,
    &amp;quot;launchSettingsProfile&amp;quot;: &amp;quot;DemoConsole.V2&amp;quot;,
    &amp;quot;args&amp;quot;: [
        &amp;quot;--othersetting&amp;quot;,
        &amp;quot;vscode&amp;quot;
    ],
    &amp;quot;env&amp;quot;: {
        &amp;quot;KAYLUMAH_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;,
        &amp;quot;KAYLUMAH_OTHER&amp;quot;: &amp;quot;From target&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: 'KAYLUMAH_')
OTHER=From target (EnvironmentVariablesConfigurationProvider Prefix: 'KAYLUMAH_')
othersetting=vscode (CommandLineConfigurationProvider)

Done...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few things that happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Since &lt;code&gt;launch.json&lt;/code&gt; specified args the commandLineArgs from &lt;code&gt;launchSettings.json&lt;/code&gt; are ignored.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;launch.json&lt;/code&gt; specified env and &lt;code&gt;launchSettings.json&lt;/code&gt; specified &lt;code&gt;environmentVariables&lt;/code&gt; both sets get merged.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;launch.json&lt;/code&gt; will win, the value for &lt;code&gt;KAYLUMAH_ENVIRONMENT&lt;/code&gt; is &lt;code&gt;Development&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The default configuration for our web api looks slightly different because it adds support to open the browser after the project starts.
Our base URL comes from the &lt;code&gt;launchSettings.json&lt;/code&gt;, but the &lt;code&gt;launchUrl&lt;/code&gt; gets ignored. You can achieve the same behaviour by updating the generated &lt;code&gt;serverReadyAction&lt;/code&gt; with an &lt;code&gt;uriFormat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;.NET Core Launch (web)&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;coreclr&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;preLaunchTask&amp;quot;: &amp;quot;build&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/bin/Debug/net6.0/DemoApi.dll&amp;quot;,
            &amp;quot;args&amp;quot;: [],
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
            &amp;quot;stopAtEntry&amp;quot;: false,
            &amp;quot;serverReadyAction&amp;quot;: {
                &amp;quot;action&amp;quot;: &amp;quot;openExternally&amp;quot;,
                &amp;quot;pattern&amp;quot;: &amp;quot;\\bNow listening on:\\s+(https?://\\S+)&amp;quot;,
                &amp;quot;uriFormat&amp;quot;: &amp;quot;%s/swagger&amp;quot;
            },
            &amp;quot;env&amp;quot;: {
                &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;
            },
            &amp;quot;sourceFileMap&amp;quot;: {
                &amp;quot;/Views&amp;quot;: &amp;quot;${workspaceFolder}/Views&amp;quot;
            }
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;.NET Core Attach&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;coreclr&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of the three IDEs, &lt;code&gt;VS Code&lt;/code&gt; has the easiest way to share compound configurations. Just add the following to your &lt;code&gt;launch.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;compounds&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;Console + API&amp;quot;,
        &amp;quot;configurations&amp;quot;: [
            &amp;quot;Launch WebAPI&amp;quot;,
            &amp;quot;Launch Console&amp;quot;
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20220607/launch-settings/vscode_launchprofiles.png" width="680" height="620" alt="Microsoft VS Code - launch profiles" /&gt;&lt;/p&gt;
&lt;h2 id="bonus-use-launch-settings-from-dotnet-cli"&gt;&lt;a href="#bonus-use-launch-settings-from-dotnet-cli"&gt;Bonus use Launch Settings from Dotnet CLI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Technically the Dotnet CLI is not an IDE, so consider this a small bonus chapter. I am including the CLI since it also uses launch profiles when running locally.&lt;/p&gt;
&lt;p&gt;As it turns out the CLI also defaults to the first project in &lt;code&gt;Properties\launchSettings.json&lt;/code&gt;, so in our case &lt;code&gt;DemoConsole.V0&lt;/code&gt;. Just like VS Code did. The following example uses a bit of &lt;code&gt;PowerShell&lt;/code&gt; to run the CLI.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-pwsh"&gt;# prints the default
dotnet run

# Sets env var for current session
$env:KAYLUMAH_COMMANDLINE=&amp;quot;Session ENV var&amp;quot;
# prints COMMANDLINE + the default
dotnet run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we don't want any launch profile just run &lt;code&gt;dotnet run --no-launch-profile&lt;/code&gt; and to specify a profile run &lt;code&gt;dotnet run --launch-profile &amp;quot;DemoConsole.V2&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we discovered, it's more than likely that you were using launch profiles outside Visual Studio without realising it. I am not sure that not if unspecified, it is a sensible default to take the first one, particularly since someone can change the order of projects. I like that in at least three popular IDEs; we have an easy mechanism for sharing settings.&lt;/p&gt;
&lt;p&gt;In the future, I am also hoping for a shared tool for compound configurations. At the very least, managing compound configurations using existing launch profiles is much easier than duplicating arguments and environment variables for each IDE. One last note is that I discovered that MSBuild variable replacement does not appear to be working from &lt;code&gt;VS Code&lt;/code&gt; or the &lt;code&gt;CLI&lt;/code&gt;. Not sure if that's a bug or by design, but it's important that not every IDE supports all features of the &lt;code&gt;launchSettings.json&lt;/code&gt;. As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/WorkingWithLaunchSettings" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="sources-used"&gt;&lt;a href="#sources-used"&gt;Sources Used&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/dotnet/project-system/blob/main/docs/launch-profiles.md&lt;/li&gt;
&lt;li&gt;https://www.jetbrains.com/help/rider/Run_Debug_Configuration_dotNet_Launch_Settings_Profile.html&lt;/li&gt;
&lt;li&gt;https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md#launchsettingsjson-support&lt;/li&gt;
&lt;li&gt;https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-run&lt;/li&gt;
&lt;li&gt;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0#environment-variables-set-in-generated-launchsettingsjson&lt;/li&gt;
&lt;li&gt;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-6.0#development-and-launchsettingsjson&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2022/02/21/working-with-azure-sdk-for-dotnet.html</id>
    <title type="text">Working with Azure SDK for .NET</title>
    <summary type="text">The latest iteration of the Azure SDK for dotnet has several cool features baked into its design. We take a look at some common scenarios</summary>
    <published>DateTimeOffset_5</published>
    <updated>DateTimeOffset_5</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2022/02/21/working-with-azure-sdk-for-dotnet.html" />
    <category term="C#" />
    <category term="Azure" />
    <content type="html">&lt;p&gt;February 2022 marks the 20th anniversary of the dotnet platform, which is quite a milestone. I found it the perfect time to reflect; I have been working professionally for almost six years and using .NET during the four years before that in my studies. For a dotnet blogger like myself, I could not stand idly by and let this pass without a post. February 2022 also marks another milestone for me. My first ever open-source contribution has been released into the wild. I made a &lt;a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/CHANGELOG.md#760-2022-02-08" class="external"&gt;small contribution&lt;/a&gt; to the &lt;code&gt;Azure SDK for .NET&lt;/code&gt;. So in honour of both, I wrote this article with small tips and tricks I picked up when working with the SDK.&lt;/p&gt;
&lt;h2 id="which-azure-sdk-should-i-use"&gt;&lt;a href="#which-azure-sdk-should-i-use"&gt;Which Azure SDK should I use?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since &lt;a href="https://devblogs.microsoft.com/azure-sdk/state-of-the-azure-sdk-2021/" class="external"&gt;July 2019&lt;/a&gt;, Microsoft has made a design effort to unify the SDKs for the different services. There are shared concepts between the libraries like authentication and diagnostics. The libraries follow the pattern &lt;code&gt;Azure.{service}.{library}&lt;/code&gt;.
My contribution was to the ServiceBus SDK, so today's article focus is the service bus. Almost everything described is transferable to the other SDKs; only a few bits are ServiceBus specific. The NuGet package we need is the &lt;code&gt;Azure.Messaging.Service&lt;/code&gt; package.&lt;/p&gt;
&lt;h2 id="how-to-set-up-azure-service-bus-with-azure-cli"&gt;&lt;a href="#how-to-set-up-azure-service-bus-with-azure-cli"&gt;How to set up Azure Service Bus with Azure CLI?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the local development aspect of any service is as important as ease of use in production. Unfortunately, there is no way to emulate the service bus locally; Jimmy Bogard wrote about that in &lt;a href="https://jimmybogard.com/local-development-with-azure-service-bus/" class="external"&gt;this article&lt;/a&gt;. Without emulating, we need to set up our resources in Azure, even for our development environment. There are a few possible options to create resources in Azure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manually via the Azure Portal&lt;/li&gt;
&lt;li&gt;Infrastructure as Code (ARM, Bicep, etc.)&lt;/li&gt;
&lt;li&gt;Scripting (Azure CLI, Azure Powershell Module)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For prototypes such as this article, I prefer Azure CLI since the commands are repeatable and, more importantly, easy to understand.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;When I work with the Azure CLI, I use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.azurecli" class="external"&gt;Azure CLI Tools&lt;/a&gt; extension for VS Code. It provides Intellisense and snippets to work with the CLI.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;AzureSubscriptionId=&amp;quot;&amp;lt;subscription-id&amp;gt;&amp;quot;
AzureTenantId=&amp;quot;&amp;lt;tenant-id&amp;gt;&amp;quot;
AzureResourceGroup=&amp;quot;demorg001&amp;quot;
AzureLocation=&amp;quot;westeurope&amp;quot;

# Sign in to Azure using device code - After login session is scoped to Subscription in Tenant
az login --use-device-code --tenant $AzureTenantId
az account set --subscription $AzureSubscriptionId

# Set default values for location and resource group
az config set defaults.location=$AzureLocation defaults.group=$AzureResourceGroup

# Create resource group and capture resource group identifier
ResourceGroupId=$(az group create --name $AzureResourceGroup --query &amp;quot;id&amp;quot; --output tsv)

# Generate Unique ID based on ResourceGroupId
UniqueId=$(echo -n $ResourceGroupId | md5sum | cut -c-13)

# Create ServiceBus and Queue
ServiceBusNamespace=&amp;quot;sbdemo0001$UniqueId&amp;quot;
QueueName=&amp;quot;demoqueue&amp;quot;
echo &amp;quot;Going to create ServiceBus $ServiceBusNamespace and Queue $QueueName&amp;quot;
AzureServiceBusId=$(az servicebus namespace create --name $ServiceBusNamespace --sku Basic --query id -o tsv)
AzureServiceBusQueueId=$(az servicebus queue create --name $QueueName --namespace-name $ServiceBusNamespace --default-message-time-to-live P0Y0M0DT0H0M30S --query id -o tsv)

# Fetch ServiceBus Connectionstring
PrimaryConnectionString=$(az servicebus namespace authorization-rule keys list \
    --namespace-name $ServiceBusNamespace \
    --name &amp;quot;RootManageSharedAccessKey&amp;quot; \
    --query &amp;quot;primaryConnectionString&amp;quot; \
    --output tsv)

echo &amp;quot;$PrimaryConnectionString&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above snippet uses the default generated RootManageSharedAccessKey, which provides full access to your servicebus so use with caution!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-does-the-azure-service-bus-sdk-work"&gt;&lt;a href="#how-does-the-azure-service-bus-sdk-work"&gt;How does the Azure Service Bus SDK work?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A message bus is dependent on both a sender and receiver for communication. There are many examples in the &lt;a href="https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/servicebus/Azure.Messaging.ServiceBus" class="external"&gt;official GitHub repo&lt;/a&gt;, so I won't go into much more details regarding the bus itself.&lt;/p&gt;
&lt;p&gt;This demo will focus on SDK features, so I created an Xunit project that runs multiple scenarios. Since all scenarios require some logic to communicate with the bus, I made the following extension method to avoid unnecessary boilerplate. In a real-world application sending and receiving messages using the ServiceBusClient would not be hidden behind a single extension method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System;
using System.Threading.Tasks;
using Azure.Messaging.ServiceBus;
using FluentAssertions;

namespace Test.Integration;

public static partial class ServiceBusClientTestExtensions
{
    public static async Task RunScenario(this ServiceBusClient client, string queueName, string scenarioName)
    {
        var sender = client.CreateSender(queueName);
        var receiver = client.CreateReceiver(queueName);

        var message = $&amp;quot;{scenarioName}-{DateTimeOffset.Now:s}&amp;quot;;
        await sender.SendMessageAsync(new ServiceBusMessage(message));
        var receivedMessage = await receiver.ReceiveMessageAsync();

        receivedMessage.Body.ToString().Should().Be(message);
        await Task.Delay(TimeSpan.FromSeconds(35));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default method described by the docs is to pass the ServiceBusConnection string to the ServiceBusClient and create it as needed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string ConnectionString = &amp;quot;&amp;lt;your-connectionstring&amp;gt;&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario01_UsePrimaryConnectionString()
    {
        await using var client = new ServiceBusClient(ConnectionString);
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario01_UsePrimaryConnectionString));
        await scenario();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Never store credentials in source control!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-to-use-azure-sdk-without-connection-strings"&gt;&lt;a href="#how-to-use-azure-sdk-without-connection-strings"&gt;How to use Azure SDK without connection strings?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working with secrets like our connection string provides extra overhead. Luckily this incarnation of the Azure SDK embraces token authentication via TokenCredential. For this, we need to install the package &lt;code&gt;Azure.Identity&lt;/code&gt;. Using this method is the preferred method of authenticating the Azure SDK.
The easiest way to use this SDK is by creating a &lt;code&gt;DefaultAzureCredential&lt;/code&gt;, which attempts to authenticate with a couple of common authentication mechanisms in order.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Environment&lt;/li&gt;
&lt;li&gt;Managed Identity&lt;/li&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;Azure CLI&lt;/li&gt;
&lt;li&gt;Azure Powershell&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string FullyQualifiedNamespace = &amp;quot;&amp;lt;your-namespace&amp;gt;.servicebus.windows.net&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario02_UseFullyQualifiedNamespace()
    {
        await using var client = new ServiceBusClient(FullyQualifiedNamespace, new DefaultAzureCredential());
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario02_UseFullyQualifiedNamespace));
        await scenario();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seeing the snippet, you might wonder how is providing &lt;code&gt;your-namespace.servicebus.windows.net&lt;/code&gt; any better than a connection string? It's a good question; you still should not store something like that as plain text in source control. For one thing, it will probably be environment-specific. We still need it because we need an address so our application can communicate with Azure. The big difference here is that our address does not contain the key; the address alone is not enough to provide access to our resources.&lt;/p&gt;
&lt;p&gt;Depending on how your organization handles roles and access management in Azure, you can now run this test and achieve the same result as before, without those pesky connection strings.
For example, since I created a service bus, my user is the owner of that bus. Being the service bus instance owner is not enough to authenticate and successfully run our scenario. I require one of the service bus specific data roles. You can find a list of supported under &lt;code&gt;Access Control (IAM)&lt;/code&gt; in the portal. I opted to use the &lt;code&gt;&amp;quot;Azure Service Bus Data Owner&amp;quot;&lt;/code&gt; role for this tutorial.
The tricky bit is that role management in Azure is very granular. When I assign a role, I need to select a scope:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subscription&lt;/li&gt;
&lt;li&gt;resourceGroup&lt;/li&gt;
&lt;li&gt;resource (i.e. ServiceBusNamespace)&lt;/li&gt;
&lt;li&gt;child resource (i.e. queue)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scopes are inherited, so if I assign my user a role on a resource group, all resources (if applicable) in that resource group will provide me with the same access.&lt;/p&gt;
&lt;p&gt;We can update our Azure CLI script to provide the logged-in user access to the resource.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;# Assign Role &amp;quot;Azure Service Bus Data Owner&amp;quot; for the current user
UserIdentity=$(az ad signed-in-user show --query objectId -o tsv)
az role assignment create --assignee $UserIdentity --role &amp;quot;Azure Service Bus Data Owner&amp;quot; --scope $AzureServiceBusId
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you know why the previous script captured the AzureServiceBusId ;-)&lt;/p&gt;
&lt;p&gt;One thing to note is that DefaultAzureCredential's intended use is to simplify getting started with development. In a real-world application, you would probably need a custom ChainedTokenCredential that uses ManagedIdentityCredential for production and AzureCliCredential for development.&lt;/p&gt;
&lt;h2 id="how-can-i-use-the-azure-sdk-with-dependency-injection"&gt;&lt;a href="#how-can-i-use-the-azure-sdk-with-dependency-injection"&gt;How can I use the Azure SDK with Dependency Injection?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that always bothered me with the code I have shown so far is creating clients on the fly. I prefer to receive my service bus client from the dependency injection container. Discovering that this was a viable solution caused me to submit that PR to the Azure SDK repo. The team had already provided the normal ServiceBusClient, so I recreated the extension method to make ServiceBusAdministrationClient available via DI. It's time to install our third NuGet package, &lt;code&gt;Microsoft.Extensions.Azure&lt;/code&gt; which provides the necessary bits.&lt;/p&gt;
&lt;p&gt;After installing the package, we get the &lt;code&gt;AddAzureClients&lt;/code&gt; extension method on IServiceCollection. It provides access to the &lt;code&gt;AzureClientFactoryBuilder&lt;/code&gt; on which we can register everything Azure SDK related. In the case of ServiceBus we get &lt;code&gt;AddServiceBusClient&lt;/code&gt; and &lt;code&gt;AddServiceBusClientWithNamespace&lt;/code&gt;. I like that these methods are much more explicit than the constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string FullyQualifiedNamespace = &amp;quot;&amp;lt;your-namespace&amp;gt;.servicebus.windows.net&amp;quot;;
    private const string ConnectionString = &amp;quot;&amp;lt;your-connectionstring&amp;gt;&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario03_UseDependencyInjectionWithPrimaryConnectionString()
    {
        var services = new ServiceCollection();
        services.AddAzureClients(builder =&amp;gt; {
            builder.AddServiceBusClient(ConnectionString);
        });
        var serviceProvider = services.BuildServiceProvider();
        var client = serviceProvider.GetRequiredService&amp;lt;ServiceBusClient&amp;gt;();
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario03_UseDependencyInjectionWithPrimaryConnectionString));
        await scenario();
    }

    [Fact]
    public async Task Test_Scenario04_UseDependencyInjectionWithFullyQualifiedNamespace()
    {
        var services = new ServiceCollection();
        services.AddAzureClients(builder =&amp;gt; {
            builder.AddServiceBusClientWithNamespace(FullyQualifiedNamespace);
        });
        var serviceProvider = services.BuildServiceProvider();
        var client = serviceProvider.GetRequiredService&amp;lt;ServiceBusClient&amp;gt;();
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario04_UseDependencyInjectionWithFullyQualifiedNamespace));
        await scenario();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why the &lt;code&gt;FullyQualifiedNamespace&lt;/code&gt; one does not need credentials this time around. That's because the Azure SDK can take care of this by default. As mentioned in the previous section, &lt;code&gt;DefaultAzureCredential&lt;/code&gt; is the easiest way to hit the ground running. There are two ways we can customize this behaviour. We can either provide a default credential for all Azure Clients or on a per-client basis.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string FullyQualifiedNamespace = &amp;quot;&amp;lt;your-namespace&amp;gt;.servicebus.windows.net&amp;quot;;
    private const string ConnectionString = &amp;quot;&amp;lt;your-connectionstring&amp;gt;&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario05_DependencyInjectionChangeDefaultToken()
    {
        var services = new ServiceCollection();
        services.AddAzureClients(builder =&amp;gt; {
            builder.AddServiceBusClientWithNamespace(FullyQualifiedNamespace);
            
            builder.UseCredential(new ManagedIdentityCredential());
        });
        var serviceProvider = services.BuildServiceProvider();
        var client = serviceProvider.GetRequiredService&amp;lt;ServiceBusClient&amp;gt;();
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario05_DependencyInjectionChangeDefaultToken));
        await scenario.Should().ThrowAsync&amp;lt;CredentialUnavailableException&amp;gt;();
    }

    [Fact]
    public async Task Test_Scenario06_DependencyInjectionChangeDefaultTokenOnClientLevel()
    {
        var services = new ServiceCollection();
        services.AddAzureClients(builder =&amp;gt; {
            builder.AddServiceBusClientWithNamespace(FullyQualifiedNamespace)
                .WithCredential(new AzureCliCredential());
            
            builder.UseCredential(new ManagedIdentityCredential());
        });
        var serviceProvider = services.BuildServiceProvider();
        var client = serviceProvider.GetRequiredService&amp;lt;ServiceBusClient&amp;gt;();
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario06_DependencyInjectionChangeDefaultTokenOnClientLevel));
        await scenario();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first sample will not work since I have not set up ManagedIdentity in my environment. The second one also sets ManagedIdentityCredential as the default credential. However, since I set up AzureCliCredential on the client registration, it trumps the global one.&lt;/p&gt;
&lt;h2 id="can-we-have-different-client-config-when-using-the-azure-sdk"&gt;&lt;a href="#can-we-have-different-client-config-when-using-the-azure-sdk"&gt;Can we have different client config when using the Azure SDK?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is where things get cool. When you register a client with the SDK, a client named &lt;code&gt;Default&lt;/code&gt; gets registered. If, for example, you retrieve &lt;code&gt;ServiceBusClient&lt;/code&gt; from the dependency injection, what happens is that the AzureClientFactoy creates this client for you.&lt;/p&gt;
&lt;p&gt;In the case of servicebus, you might have multiple different namespaces registered. Every registration provides access to a method &lt;code&gt;WithName&lt;/code&gt;. To use named clients in your code, replace &lt;code&gt;ServiceBusClient&lt;/code&gt; with &lt;code&gt;IAzureClientFactory&amp;lt;ServiceBusClient&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string FullyQualifiedNamespace = &amp;quot;&amp;lt;your-namespace&amp;gt;.servicebus.windows.net&amp;quot;;
    private const string ConnectionString = &amp;quot;&amp;lt;your-connectionstring&amp;gt;&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario07_MultipleClients()
    {
        var services = new ServiceCollection();
        services.AddAzureClients(builder =&amp;gt;
        {
            builder.AddServiceBusClient(ConnectionString);

            builder.AddServiceBusClientWithNamespace(FullyQualifiedNamespace)
                .WithName(&amp;quot;OtherClient&amp;quot;);
        });
        var serviceProvider = services.BuildServiceProvider();
        var clientFactory = serviceProvider.GetRequiredService&amp;lt;IAzureClientFactory&amp;lt;ServiceBusClient&amp;gt;&amp;gt;();
        
        var clientDefault = clientFactory.CreateClient(&amp;quot;Default&amp;quot;);
        var scenarioDefaultClient = async () =&amp;gt; await clientDefault.RunScenario(QueueName, nameof(Test_Scenario07_MultipleClients) + &amp;quot;A&amp;quot;);
        await scenarioDefaultClient();
        
        var otherClient = clientFactory.CreateClient(&amp;quot;OtherClient&amp;quot;);
        var scenarioOtherClient = async () =&amp;gt; await otherClient.RunScenario(QueueName, nameof(Test_Scenario07_MultipleClients) + &amp;quot;B&amp;quot;);
        await scenarioOtherClient();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="can-i-use-configuration-to-create-azure-sdk-clients"&gt;&lt;a href="#can-i-use-configuration-to-create-azure-sdk-clients"&gt;Can I use configuration to create Azure SDK clients?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I had one criticism of the SDK, it would be that the extension methods require the address right there in the call to the method. To be fair, there is an overload that uses IConfiguration, but that leaves everything up to the SDK to validate.&lt;/p&gt;
&lt;p&gt;In my &lt;a href="https://BaseUrl_2/2021/11/29/validated-strongly-typed-ioptions.html" class="external"&gt;previous article on validating IOptions&lt;/a&gt;, I wrote about a way to make sure all configuration for my app is valid.&lt;/p&gt;
&lt;p&gt;That approach, of course, requires access to the dependency injection container. Luckily there is an additional method available.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class UnitTest1
{
    private const string FullyQualifiedNamespace = &amp;quot;&amp;lt;your-namespace&amp;gt;.servicebus.windows.net&amp;quot;;
    private const string QueueName = &amp;quot;demoqueue&amp;quot;;

    [Fact]
    public async Task Test_Scenario08_StronglyTypedOptions()
    {
        var services = new ServiceCollection();
        services.Configure&amp;lt;DemoOptions&amp;gt;(options =&amp;gt;
        {
            options.ServiceBusNamespace = FullyQualifiedNamespace;
        });
        services.AddAzureClients(builder =&amp;gt;
        {
            builder.AddClient&amp;lt;ServiceBusClient, ServiceBusClientOptions&amp;gt;((options, credential, provider) =&amp;gt;
            {
                var demoOptions = provider.GetRequiredService&amp;lt;IOptions&amp;lt;DemoOptions&amp;gt;&amp;gt;();
                return new ServiceBusClient(demoOptions.Value.ServiceBusNamespace, credential, options);
            });
        });
        var serviceProvider = services.BuildServiceProvider();
        var client = serviceProvider.GetRequiredService&amp;lt;ServiceBusClient&amp;gt;();
        var scenario = async () =&amp;gt; await client.RunScenario(QueueName, nameof(Test_Scenario08_StronglyTypedOptions));
        await scenario();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A single blog is too short for providing an overview of everything the Azure SDK offers. I like that authentication and interoperability with the dependency injection container are baked into the SDK. I have not even touched on diagnostics and testability, which are both great topics built into the entire SDK. Who knows, perhaps that is a topic for another time.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/WorkingWithAzureSdkForDotnet" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="additional-resources"&gt;&lt;a href="#additional-resources"&gt;Additional Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/azure/sdk/azure-sdk-for-dotnet" class="external"&gt;Azure SDK for Dotnet on Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/README.md" class="external"&gt;Azure.Messaging.ServiceBus on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md" class="external"&gt;Azure.Core on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md" class="external"&gt;Azure.Identity on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Microsoft.Extensions.Azure/README.md" class="external"&gt;Microsoft.Extensions.Azure on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging" class="external"&gt;Service bus on Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/best-practices-for-using-azure-sdk-with-asp-net-core" class="external"&gt;Best practices Azure SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-gb/cli/azure/use-cli-effectively" class="external"&gt;Best practices Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2022/01/31/improve-code-quality-with-bannedsymbolanalyzers.html</id>
    <title type="text">Improve Code Quality with BannedSymbolAnalyzers</title>
    <summary type="text">Learn how a simple Roslyn Analyzer can improve code consistency</summary>
    <published>DateTimeOffset_6</published>
    <updated>DateTimeOffset_6</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2022/01/31/improve-code-quality-with-bannedsymbolanalyzers.html" />
    <category term="C#" />
    <category term="Code Quality" />
    <content type="html">&lt;p&gt;There are many aspects of code quality; testability and consistency come to mind. I don t find it hard to imagine that the longer a project takes with multiple engineers that work on it, the more inconsistencies are in your codebase.&lt;/p&gt;
&lt;p&gt;Thanks to the combination of .editorConfig and Roslyn Analyzers, managing this for your team is easier. Recently, however, I was required to create a custom check for my code. A quick google search pointed me to &lt;a href="https://www.meziantou.net/the-roslyn-analyzers-i-use.htm" class="external"&gt;an article from Meziantou&lt;/a&gt; which mentioned the &amp;quot;Banned Symbol&amp;quot; Roslyn Analyzer.&lt;/p&gt;
&lt;h2 id="scenario"&gt;&lt;a href="#scenario"&gt;Scenario&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving into this Analyzer, let's take a few steps back and do a quick scenario sketch. Imagine you work for a company that allows funds transfer between two parties. Since your company needs to make money, you charge a small fee.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class FeeCalculator : IFeeCalculator
{
    private const decimal FeePercentage = 0.12M;
    private const decimal MinimumCharge = 0.50M;
    private const decimal PriorityFeePercentage = 0.25M;
    private const decimal PriorityMinimumCharge = 7.50M;

    public decimal Calculate(decimal baseAmount, bool isPriority = false)
    {
        if (isPriority)
        {
            return InternalCalculate(baseAmount, PriorityFeePercentage, PriorityMinimumCharge);
        }
        return InternalCalculate(baseAmount, FeePercentage, MinimumCharge);
    }

    private static decimal InternalCalculate(decimal amount, decimal percentage, decimal minimumFee)
    {
        var calculatedFee = amount * (percentage / 100);
        if (calculatedFee &amp;lt; minimumFee)
        {
            return minimumFee;
        }
        return calculatedFee;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The company decided to offer &amp;quot;Monday Madness&amp;quot; at a heavily discounted fee as a special offer.
The implementation would look similar to the snippet below.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class DatedFeeCalculator : IFeeCalculator
{
    private const decimal DiscountedFeePercentage = 0.07M;
    private const decimal FeePercentage = 0.12M;
    private const decimal MinimumCharge = 0.50M;
    private const decimal PriorityFeePercentage = 0.25M;
    private const decimal PriorityMinimumCharge = 7.50M;

    public decimal Calculate(decimal baseAmount, bool isPriority = false)
    {
        if (isPriority)
        {
            return InternalCalculate(baseAmount, PriorityFeePercentage, PriorityMinimumCharge);
        }

        if (DateTime.Now.DayOfWeek == DayOfWeek.Monday)
        {
            return InternalCalculate(baseAmount, DiscountedFeePercentage, MinimumCharge);
        }
        return InternalCalculate(baseAmount, FeePercentage, MinimumCharge);
    }

    private static decimal InternalCalculate(decimal amount, decimal percentage, decimal minimumFee)
    {
        var calculatedFee = amount * (percentage / 100);
        if (calculatedFee &amp;lt; minimumFee)
        {
            return minimumFee;
        }
        return calculatedFee;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take notice of line &lt;code&gt;16&lt;/code&gt; which now uses &lt;code&gt;DateTime.Now&lt;/code&gt;; the problem that now arises is: how do we test this code?&lt;/p&gt;
&lt;h2 id="why-testing-datetime-is-hard"&gt;&lt;a href="#why-testing-datetime-is-hard"&gt;Why testing DateTime is hard&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following test only results in a green build on a Monday, which is excellent if we release every week just before &amp;quot;Monday Madness&amp;quot; but not so great on every other day.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public void Test2_Discounted()
{
    IFeeCalculator calculator = new DatedFeeCalculator();
    var fee = calculator.Calculate(10_000M, false);
    fee.Should().Be(7.00M); // note only on Mondays it's 7.00; every other day its 12.00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could mitigate by skipping the offending test every day that is not Monday like this; problem solved, right?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[SkippableFact]
public void Test2_Discounted_Alternative()
{
    Skip.If(DateTimeOffset.Now.DayOfWeek != DayOfWeek.Monday);
    IFeeCalculator calculator = new DatedFeeCalculator();
    var fee = calculator.Calculate(10_000M, false);
    fee.Should().Be(7.00M);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, no, not actually. What we want is to decouple our code from statics like DateTime.Now by putting them behind an interface. By providing an interface implementation, we can &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices#stub-static-references" class="external"&gt;stub a static reference&lt;/a&gt;.
In an ideal world, this interface would already exist, similar to ILogger in Microsoft.Extensions. For some background reading on why it does not yet exist, see this &lt;a href="https://github.com/dotnet/runtime/issues/36617" class="external"&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updated-scenario"&gt;&lt;a href="#updated-scenario"&gt;Updated Scenario&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In its most simple from the SystemClock can look like the snippet below.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public interface ISystemClock
{
    DateTimeOffset Now { get; }
}

public class SystemClock : ISystemClock
{
    public DateTimeOffset Now =&amp;gt; DateTimeOffset.Now;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our updated scenario looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class SystemClockFeeCalculator : IFeeCalculator
{
    private const decimal DiscountedFeePercentage = 0.07M;
    private const decimal FeePercentage = 0.12M;
    private const decimal MinimumCharge = 0.50M;
    private const decimal PriorityFeePercentage = 0.25M;
    private const decimal PriorityMinimumCharge = 7.50M;

    private readonly ISystemClock systemClock;

    public SystemClockFeeCalculator(ISystemClock systemClock)
    {
        this.systemClock = systemClock;
    }


    public decimal Calculate(decimal baseAmount, bool isPriority = false)
    {
        if (isPriority)
        {
            return InternalCalculate(baseAmount, PriorityFeePercentage, PriorityMinimumCharge);
        }

        if (systemClock.Now.DayOfWeek == DayOfWeek.Monday)
        {
            return InternalCalculate(baseAmount, DiscountedFeePercentage, MinimumCharge);
        }
        return InternalCalculate(baseAmount, FeePercentage, MinimumCharge);
    }

    private static decimal InternalCalculate(decimal amount, decimal percentage, decimal minimumFee)
    {
        var calculatedFee = amount * (percentage / 100);
        if (calculatedFee &amp;lt; minimumFee)
        {
            return minimumFee;
        }
        return calculatedFee;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the use of a TestSystemClock or a Moq, we can test our behaviour every day of the week. See, we are improving quality already. In a previous article, &lt;a href="https://BaseUrl_2/2021/04/11/an-approach-to-writing-mocks.html" class="external"&gt;&amp;quot;Adventures with Mock&amp;quot;&lt;/a&gt; you can read more about my preferred way of creating mocks.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public sealed class SystemClockMock : Mock&amp;lt;ISystemClock&amp;gt;
{
    public SystemClockMock SetupSystemTime(DateTimeOffset systemTime)
    {
        Setup(x =&amp;gt; x.Now).Returns(systemTime);
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks to &lt;code&gt;SystemClockMock&lt;/code&gt; I can now change the current date for the test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public void Test3_FakeClock_Monday()
{
    var clock = new SystemClockMock()
        .SetupSystemTime(new DateTimeOffset(new DateTime(2022, 1, 31)));
    IFeeCalculator calculator = new SystemClockFeeCalculator(clock.Object);
    var fee = calculator.Calculate(10_000M, false);
    fee.Should().Be(7.00M);
}

[Fact]
public void Test3_FakeClock_Tuesday()
{
    var clock = new SystemClockMock()
        .SetupSystemTime(new DateTimeOffset(new DateTime(2022, 2, 1)));
    IFeeCalculator calculator = new SystemClockFeeCalculator(clock.Object);
    var fee = calculator.Calculate(10_000M, false);
    fee.Should().Be(12.00M);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="force-wrapper-over-static-reference"&gt;&lt;a href="#force-wrapper-over-static-reference"&gt;Force Wrapper over Static Reference&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have our SystemClock, how do we make sure every dev in our team uses it over just calling &lt;code&gt;DateTimeOffset.Now&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Finally, our Roslyn Analyzer comes into play. We can use &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md" class="external"&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/a&gt;, which triggers the build warning &lt;code&gt;RS0030&lt;/code&gt;. I prefer to enable these warnings on every project under src, so I use a Directory.Build.props file to install the analyzer via NuGet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project&amp;gt;
  &amp;lt;Import Project=&amp;quot;../Directory.Build.props&amp;quot; /&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.BannedApiAnalyzers&amp;quot; Version=&amp;quot;3.3.2&amp;quot;&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;AdditionalFiles Include=&amp;quot;$(MSBuildThisFileDirectory)/BannedSymbols.txt&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All that remains is to create a file called &lt;code&gt;BannedSymbols.txt&lt;/code&gt; with the following content&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I also blocked the use of DateTime in favour of DateTimeOffset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;T:System.DateTime;Always use System.DateTimeOffset over System.DateTime
P:System.DateTimeOffset.Now;Use ISystemClock.Now instead
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this point on every use of &lt;code&gt;DateTimeOffset.Now&lt;/code&gt; results in the following error: &lt;code&gt;error RS0030: The symbol 'DateTimeOffset.Now' is banned in this project: Use ISystemClock.Now instead&lt;/code&gt;. Which in my opinion is pretty cool :)&lt;/p&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even if the system used in today's example is fictional, I think the BannedSymbolAnalyzers is a compelling package to include in your toolbelt. At the very least, I will use it to force DateTimeOffset over DateTime. Situation allowing I will also push my wrappers over static references to improve testability.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/ImproveCodeQualityWithBannedSymbolAnalyzers" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="additional-resources"&gt;&lt;a href="#additional-resources"&gt;Additional Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[https://github.com/dotnet/roslyn-analyzers](Roslyn Analyzers)&lt;/li&gt;
&lt;li&gt;[https://docs.microsoft.com/en-us/visualstudio/code-quality/roslyn-analyzers-overview](Visual Studio Code Quality)&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/11/29/validated-strongly-typed-ioptions.html</id>
    <title type="text">Validated Strongly Typed IOptions</title>
    <summary type="text">Find configuration errors early with data annotations validation for IOptions in .NET</summary>
    <published>DateTimeOffset_7</published>
    <updated>DateTimeOffset_7</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/11/29/validated-strongly-typed-ioptions.html" />
    <category term="C#" />
    <category term="Configuration" />
    <content type="html">&lt;p&gt;Almost every project will have some settings that are configured differently per environment. Chapter three of &amp;quot;The Twelve-Factor App&amp;quot; &lt;a href="https://12factor.net/config" class="external"&gt;explains&lt;/a&gt; why separating configuration from code is a good idea. In &lt;code&gt;.NET&lt;/code&gt;, we use the &lt;code&gt;IConfigurationBuilder&lt;/code&gt; to manage our configuration. An &lt;code&gt;IOptions&amp;lt;&amp;gt;&lt;/code&gt; is used to make a configuration available as a strongly typed type in our applications.&lt;/p&gt;
&lt;p&gt;As I understand it, the &lt;code&gt;configuration&lt;/code&gt; concept in &lt;code&gt;.NET&lt;/code&gt; is the combination of different configuration sources, called configuration providers, resulting in a single combined configuration. In contrast, the &lt;code&gt;options&lt;/code&gt; concept provides access to &lt;code&gt;configuration&lt;/code&gt; from our application code. I've attempted to illustrate it with the image below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211129/validated-strongly-typed-ioptions/001_configuration_sources.svg" width="1040" height="920" alt="Microsoft Extensions - IConfiguration - Different configuration sources" /&gt;&lt;/p&gt;
&lt;h2 id="configuration-in.net"&gt;&lt;a href="#configuration-in.net"&gt;Configuration in .NET&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Technically the image above is an over-simplification. In reality, you use an &lt;code&gt;IConfigurationBuilder&lt;/code&gt; where different providers are provided, and the configuration block in the middle is the merged build-result of the configuration builder. In fact, you get a preconfigured configuration builder every time you use the &lt;code&gt;ASP.NET&lt;/code&gt; Web templates. You get a &lt;a href="https://github.com/dotnet/runtime/blob/12a8819eee9865eb38bca6c05fdece1053102854/src/libraries/Microsoft.Extensions.Hosting/src/Host.cs#L53" class="external"&gt;default HostBuilder&lt;/a&gt; that setups an &lt;a href="https://github.com/dotnet/runtime/blob/12a8819eee9865eb38bca6c05fdece1053102854/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L124" class="external"&gt;IHost&lt;/a&gt;. This default builder also takes care of the &lt;a href="https://github.com/dotnet/runtime/blob/12a8819eee9865eb38bca6c05fdece1053102854/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L188" class="external"&gt;default configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The default configuration adds in order&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appsettings.json&lt;/li&gt;
&lt;li&gt;appsettings.Environment.json&lt;/li&gt;
&lt;li&gt;user secrets (if the environment is development)&lt;/li&gt;
&lt;li&gt;environment variables&lt;/li&gt;
&lt;li&gt;command-line arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The priority of settings is in the reverse order of adding them to the builder. Passing a setting via the &lt;code&gt;command line&lt;/code&gt; will always win from a setting in the &lt;code&gt;appsettings.json&lt;/code&gt; file. Fun fact, there are two configurations in &lt;code&gt;ASP.NET&lt;/code&gt;. You have the &lt;code&gt;AppConfiguration&lt;/code&gt; we just discussed, and you have the &lt;code&gt;HostConfiguration&lt;/code&gt;. The &lt;code&gt;HostConfiguration&lt;/code&gt; is used to set variables like the &lt;code&gt;DOTNET_ENVIRONMENT&lt;/code&gt;, which is used to load the proper &lt;code&gt;appsettings.json&lt;/code&gt; and user secrets. Via means of &lt;code&gt;ChainedConfiguration&lt;/code&gt; the entire &lt;code&gt;HostConfiguration&lt;/code&gt; is also available as part of &lt;code&gt;AppConfiguration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's look at an example. Take the following JSON configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;MySample&amp;quot;: {
        &amp;quot;MyText&amp;quot;: &amp;quot;Hello World!&amp;quot;,
        &amp;quot;MyCollection&amp;quot;: [
            {
                &amp;quot;MyOtherText&amp;quot;: &amp;quot;Goodbye Cruel World!&amp;quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That would result in the following two settings being present in our IConfiguration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MySample:MyText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MySample:MyCollection:0:MyOtherText&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this bit of knowledge, you can override any setting in any provider you can imagine. Visually it would look something like the image below. You can provide sensible defaults in appsettings.json and overwrite values as needed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211129/validated-strongly-typed-ioptions/002_configuration_dotnet.svg" width="551" height="490" alt="Microsoft Extensions - IConfiguration - configuration builder resolve order" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As pointed out by the &amp;quot;The Twelve-Factor App&amp;quot; article linked previously, adding configuration files per environment does not scale. I typically end up with one appsettings.json for the defaults and an appsettings.Production.json that gets transformed in my CICD pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can &lt;a href="https://andrewlock.net/exploring-dotnet-6-part-1-looking-inside-configurationmanager-in-dotnet-6/" class="external"&gt;read about changes to IConfiguration&lt;/a&gt; in &lt;code&gt;.NET6&lt;/code&gt; in a post from Andrew Lock. It also contains a different visual representation of configuration, which neatly displays the merging of the different levels.&lt;/p&gt;
&lt;h2 id="options-in.net"&gt;&lt;a href="#options-in.net"&gt;Options in .NET&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0#bind-hierarchical-configuration" class="external"&gt;Microsoft Docs&lt;/a&gt; the options pattern is the preferred way to read related configuration values. The options pattern comes in three different flavours, &lt;code&gt;IOptions&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;IOptionsSnapshot&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;IOptionsMonitor&amp;lt;&amp;gt;&lt;/code&gt;. Probably the most used one is the default &lt;code&gt;IOptions&lt;/code&gt; one, with the drawback that you cannot read configuration after your app starts. Others have taken the task upon themself to explain the differences between the interfaces, for example &lt;a href="https://andrewlock.net/creating-singleton-named-options-with-ioptionsmonitor" class="external"&gt;Andrew Lock&lt;/a&gt; and &lt;a href="https://khalidabuhakmeh.com/aspnet-core-ioptions-configuration" class="external"&gt;Khalid Abuhakmeh&lt;/a&gt;. For this post, I will keep it simple with the regular &lt;code&gt;IOptions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A typical registration of configuration would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static partial class ServiceCollectionExtensions
{
    public static IServiceCollection AddDemo(this IServiceCollection services, IConfiguration configuration)
    {
        services.Configure&amp;lt;DemoOptions&amp;gt;(configuration.GetSection(DemoOptions.DefaultConfigurationSectionName));
        return services;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This snippet requires the &lt;code&gt;Microsoft.Extensions.Options.ConfigurationExtensions&lt;/code&gt; package to work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at our dependency injection container right after this registration, we see more than just &lt;code&gt;IOptions&lt;/code&gt;. We have a total of seven registrations at this point.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;ServiceType = 'Microsoft.Extensions.Options.IOptions`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.UnnamedOptionsManager`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsSnapshot`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsManager`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsMonitor`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsMonitor`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsFactory`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsFactory`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsMonitorCache`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsCache`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsChangeTokenSource`1[Test.Unit.DemoOptions]' ImplementationType = ''
ServiceType = 'Microsoft.Extensions.Options.IConfigureOptions`1[Test.Unit.DemoOptions]' ImplementationType = ''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with the above approach is that it assumes the configuration exists at a predefined section, which is not very flexible. An alternative approach to register &lt;code&gt;IOptions&lt;/code&gt; is the use of an &lt;code&gt;Action&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static partial class ServiceCollectionExtensions
{
    public static IServiceCollection AddExample(this IServiceCollection services, Action&amp;lt;ExampleOptions&amp;gt; configureDelegate)
    {
        services.Configure(configureDelegate);
        return services;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this approach, we get a total of six DI registrations.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;ServiceType = 'Microsoft.Extensions.Options.IOptions`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.UnnamedOptionsManager`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsSnapshot`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsManager`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsMonitor`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsMonitor`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsFactory`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsFactory`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IOptionsMonitorCache`1[TOptions]' ImplementationType = 'Microsoft.Extensions.Options.OptionsCache`1[TOptions]'
ServiceType = 'Microsoft.Extensions.Options.IConfigureOptions`1[Test.Unit.ExampleOptions]' ImplementationType = ''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difference is that we do not get the &lt;code&gt;IOptionsChangeTokenSource&lt;/code&gt;. To be most flexible, you can combine both techniques like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static partial class ServiceCollectionExtensions
{
    public static IServiceCollection AddExample(this IServiceCollection services, IConfiguration config)
    {
        services.AddExample(options =&amp;gt; config.GetSection(ExampleOptions.DefaultConfigurationSectionName).Bind(options));
        return services;
    }

    public static IServiceCollection AddExample(this IServiceCollection services, Action&amp;lt;ExampleOptions&amp;gt; configureDelegate)
    {
        services.Configure(configureDelegate);
        return services;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="validated-options"&gt;&lt;a href="#validated-options"&gt;Validated Options&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we covered the basics, I can move on to the focal point of this blog post. As you can imagine overlaying the different configuration sources does not guarantee a valid result from the point of view of your application. Worse, since the number of configuration sources can differ between environments, you can potentially have configuration issues very late in your CICD pipeline. For example, if you use Azure Key Vault as a configuration provider, settings might be changed by anyone with access to the vault.&lt;/p&gt;
&lt;p&gt;In my article &lt;a href="https://BaseUrl_2/2021/05/23/generate-csharp-client-for-openapi.html" class="external"&gt;Generate C# client for OpenAPI&lt;/a&gt;, I used HttpClient to call a generated OpenAPI service. HTTP is the perfect example for validating configuration. In our API example, we will likely have different base URLs per environment. If we represent an URL as a string in configuration, it is feasible to enter &amp;quot;not-an-url&amp;quot; as its value, which causes your application to crash and burn.&lt;/p&gt;
&lt;p&gt;As I see it, there are two distinct ways configuration can fail.&lt;/p&gt;
&lt;h3 id="missing-configuration-sections"&gt;&lt;a href="#missing-configuration-sections"&gt;Missing Configuration Sections&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first variant is binding configuration at a section that does not exist. That is because &lt;code&gt;configuration.GetSection&lt;/code&gt; does not throw but &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configuration.getsection?view=dotnet-plat-ext-6.0" class="external"&gt;returns null&lt;/a&gt; for a section that does not exist. Oddly enough, when configuration fails to bind, you still get an &lt;code&gt;IOptions&amp;lt;TOptions&amp;gt;&lt;/code&gt; but with null values.&lt;/p&gt;
&lt;p&gt;When specifying a section by name, I expect that section to exist. Therefore I want my application to not boot with missing configuration sections. The following extension method takes care of that.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static IConfigurationSection GetExistingSectionOrThrow(this IConfiguration configuration, string key)
{
    var configurationSection = configuration.GetSection(key);

    if (!configurationSection.Exists())
    {
        throw configuration switch
        {
            IConfigurationRoot configurationIsRoot =&amp;gt; new ArgumentException($&amp;quot;Section with key '{key}' does not exist. Existing values are: {configurationIsRoot.GetDebugView()}&amp;quot;, nameof(key)),
            IConfigurationSection configurationIsSection =&amp;gt; new ArgumentException($&amp;quot;Section with key '{key}' does not exist at '{configurationIsSection.Path}'. Expected configuration path is '{configurationSection.Path}'&amp;quot;, nameof(key)),
            _ =&amp;gt; new ArgumentException($&amp;quot;Failed to find configuration at '{configurationSection.Path}'&amp;quot;, nameof(key))
        };
    }

    return configurationSection;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;caution&lt;/strong&gt;: configurationIsRoot.GetDebugView() prints all configuration settings and their value, if you have secrets you should add log masking to prevent them from being logged.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="dataannotations-validation"&gt;&lt;a href="#dataannotations-validation"&gt;DataAnnotations Validation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second variant is the most likely to occur. That is, settings are present but not valid in the context of the application. I recently browsed the Microsoft Docs after (again) losing time chasing configuration issues when I came across &lt;code&gt;IValidateOptions&lt;/code&gt;. I also rediscovered &lt;code&gt;ValidateDataAnnotations&lt;/code&gt; on the &lt;code&gt;IOptionsBuilder&lt;/code&gt;, which I previously dismissed since it was a different API (&lt;code&gt;AddOptions&amp;lt;&amp;gt;&lt;/code&gt;) than the &lt;code&gt;Configure&amp;lt;&amp;gt;&lt;/code&gt; APIs. With Resharper by my side, I checked the implementation and discovered that it uses &lt;code&gt;DataAnnotationValidateOptions&lt;/code&gt; a class that is a &lt;code&gt;IValidateOptions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When consuming an IOptions, there are three hooks we can use. We have &lt;code&gt;IConfigureOptions&lt;/code&gt;, &lt;code&gt;IPostConfigureOptions&lt;/code&gt; and &lt;code&gt;IValidateOptions&lt;/code&gt;. If you head back up to where I printed the dependency injection container, you see that every time you use &lt;code&gt;Configure&amp;lt;&amp;gt;&lt;/code&gt;, you get an &lt;code&gt;IConfigureOptions&lt;/code&gt;. I illustrated this process below, IOptions makes use of an OptionsFactory. This factory goes through all registered &amp;quot;option services&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211129/validated-strongly-typed-ioptions/003_ioptions.svg" width="837" height="1674" alt="Microsoft Extensions - IConfiguration - options factory" /&gt;&lt;/p&gt;
&lt;p&gt;You can add any number of implementations of these three interfaces. Implementations of the same interface execute in the order in which you define them. If you register an &lt;code&gt;IPostConfigureOptions&lt;/code&gt; or &lt;code&gt;IValidateOptions&lt;/code&gt; before the normal &lt;code&gt;IConfigureOptions&lt;/code&gt;, it won't run before it. The factory runs through 0 or more &lt;code&gt;IConfigureOptions&lt;/code&gt;, 0 or more &lt;code&gt;IPostConfigureOptions&lt;/code&gt; and finally 0 or more &lt;code&gt;IValidateOptions&lt;/code&gt; and always in that order.&lt;/p&gt;
&lt;p&gt;To demonstrate how this works, consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ConfigureLibraryExampleServiceOptions : IConfigureOptions&amp;lt;LibraryExampleServiceOptions&amp;gt;, IPostConfigureOptions&amp;lt;LibraryExampleServiceOptions&amp;gt;, IValidateOptions&amp;lt;LibraryExampleServiceOptions&amp;gt;
{
    private readonly ILogger _logger;

    public ConfigureLibraryExampleServiceOptions(ILogger&amp;lt;ConfigureLibraryExampleServiceOptions&amp;gt; logger)
    {
        _logger = logger;
    }
    
    public void Configure(LibraryExampleServiceOptions options)
    {
        _logger.LogInformation(&amp;quot;ConfigureExampleServiceOptions Configure&amp;quot;);
    }

    public void PostConfigure(string name, LibraryExampleServiceOptions options)
    {
        _logger.LogInformation(&amp;quot;ConfigureExampleServiceOptions PostConfigure&amp;quot;);
    }

    public ValidateOptionsResult Validate(string name, LibraryExampleServiceOptions options)
    {
        _logger.LogInformation(&amp;quot;ConfigureExampleServiceOptions ValidateOptionsResult&amp;quot;);
        return ValidateOptionsResult.Skip;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might assume that this validation triggers the moment we resolve an IOptions from the DI container. Unfortunately, this is not the case; it only triggers when using the &lt;code&gt;.Value&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var configuration = new ConfigurationBuilder()
    .AddInMemoryCollection(new Dictionary&amp;lt;string, string&amp;gt;() {
        [string.Join(&amp;quot;:&amp;quot;, LibraryExampleServiceOptions.DefaultConfigurationSectionName, nameof(LibraryExampleServiceOptions.BaseUrl))] = &amp;quot;http://example.com&amp;quot;
    })
    .Build();
var serviceProvider = new ServiceCollection()
    .AddLogging(builder =&amp;gt; builder.AddConsole())
    .AddExampleLibrary(configuration)
    .BuildServiceProvider();

var logger = serviceProvider.GetRequiredService&amp;lt;ILogger&amp;lt;Program&amp;gt;&amp;gt;();
logger.LogInformation(&amp;quot;Before retrieving IOptions&amp;quot;);
var options = serviceProvider.GetRequiredService&amp;lt;IOptions&amp;lt;LibraryExampleServiceOptions&amp;gt;&amp;gt;();
logger.LogInformation(&amp;quot;After retrieving IOptions; before IOptions.Value&amp;quot;);
var optionsValue = options.Value;
logger.LogInformation(&amp;quot;After IOptions.Value&amp;quot;);

Console.ReadLine();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;info: Program[0]
      Before retrieving IOptions
info: Program[0]
      After retrieving IOptions; before IOptions.Value
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions Configure
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions PostConfigure
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions ValidateOptionsResult
info: Program[0]
      After IOptions.Value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Circling back to validation, I've created an extension method that registers &lt;code&gt;DataAnnotationValidateOptions &lt;/code&gt;for us. One thing to note is that &lt;code&gt;IValidateOptions&lt;/code&gt; is a named option, whereas the normal &lt;code&gt;IOptions&lt;/code&gt; is an unnamed option. Microsoft solved this by providing a &amp;quot;DefaultName&amp;quot; for an options object which is an empty string.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static partial class ServiceCollectionExtensions
{
    public static IServiceCollection ConfigureWithValidation&amp;lt;TOptions&amp;gt;(this IServiceCollection services, IConfiguration config) where TOptions : class
        =&amp;gt; services.ConfigureWithValidation&amp;lt;TOptions&amp;gt;(Options.Options.DefaultName, config);
    
    public static IServiceCollection ConfigureWithValidation&amp;lt;TOptions&amp;gt;(this IServiceCollection services, string name, IConfiguration config) where TOptions : class
    {
        _ = config ?? throw new ArgumentNullException(nameof(config));
        services.Configure&amp;lt;TOptions&amp;gt;(name, config);
        services.AddDataAnnotationValidatedOptions&amp;lt;TOptions&amp;gt;(name);
        return services;
    }

    public static IServiceCollection ConfigureWithValidation&amp;lt;TOptions&amp;gt;(this IServiceCollection services, Action&amp;lt;TOptions&amp;gt; configureOptions) where TOptions : class
        =&amp;gt; services.ConfigureWithValidation&amp;lt;TOptions&amp;gt;(Options.Options.DefaultName, configureOptions);

    public static IServiceCollection ConfigureWithValidation&amp;lt;TOptions&amp;gt;(this IServiceCollection services, string name, Action&amp;lt;TOptions&amp;gt; configureOptions) where TOptions : class
    {
        services.Configure(name, configureOptions);
        services.AddDataAnnotationValidatedOptions&amp;lt;TOptions&amp;gt;(name);
        return services;
    }

    private static IServiceCollection AddDataAnnotationValidatedOptions&amp;lt;TOptions&amp;gt;(this IServiceCollection services, string name) where TOptions : class
    {
        services.TryAddEnumerable(ServiceDescriptor.Singleton&amp;lt;IValidateOptions&amp;lt;TOptions&amp;gt;&amp;gt;(new DataAnnotationValidateOptions&amp;lt;TOptions&amp;gt;(name)));
        return services;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we put it to the test, our settings object could look like this. In this case, we use the &lt;code&gt;Required&lt;/code&gt; and &lt;code&gt;Url&lt;/code&gt; attributes. You can use &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0" class="external"&gt;any of the attributes&lt;/a&gt; provided by default, or create your custom attributes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class LibraryExampleServiceOptions
{
    public const string DefaultConfigurationSectionName = nameof(LibraryExampleServiceOptions);

    [Required, Url]
    public string? BaseUrl { get;set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider nullability and default values of properties when defining them. In the spirit of the example, you might have a retry-count if it has the value 0; is that because you specified it or forgot to define it? That's why I always define properties as &lt;code&gt;[Required]&lt;/code&gt; and &lt;code&gt;Nullable&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;info: Program[0]
      Before retrieving IOptions
info: Program[0]
      After retrieving IOptions; before IOptions.Value
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions Configure
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions PostConfigure
info: Kaylumah.ValidatedStronglyTypedIOptions.Library.ConfigureLibraryExampleServiceOptions[0]
      ConfigureExampleServiceOptions ValidateOptionsResult
Unhandled exception. Microsoft.Extensions.Options.OptionsValidationException: DataAnnotation validation failed for 'LibraryExampleServiceOptions' members: 'BaseUrl' with the error: 'The BaseUrl field is not a valid fully-qualified http, https, or ftp URL.'.
   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)
   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()
   at Program.&amp;lt;Main&amp;gt;$(String[] args) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think that is pretty neat. But I am not a big fan of the formatting. I remember the last time I used the &lt;code&gt;Web API&lt;/code&gt; template, which resulted in a nicely formatted error. I had to dig in the ASPNET code, and it's the &lt;a href="https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Mvc/Mvc.Core/src/Infrastructure/ModelStateInvalidFilter.cs#L80" class="external"&gt;ModelStateInvalidFilter&lt;/a&gt; that transforms &lt;a href="https://github.com/dotnet/aspnetcore/blob/d9660d157627af710b71c636fa8cb139616cadba/src/Mvc/Mvc.Abstractions/src/ModelBinding/ModelStateDictionary.cs#L147" class="external"&gt;ModelStateDictionary.cs&lt;/a&gt; into a ValidationProblemDetails. I've added an example of this to the source repo, with the output shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;One or more validation errors occurred.&amp;quot;,
    &amp;quot;status&amp;quot;: 400,
    &amp;quot;traceId&amp;quot;: &amp;quot;00-50f5816f844377e66f37688f297dfd29-ab771434a82ee290-00&amp;quot;,
    &amp;quot;errors&amp;quot;: {
        &amp;quot;Name&amp;quot;: [&amp;quot;The Name field is required.&amp;quot;],
        &amp;quot;EmailAddresses[0].Label&amp;quot;: [&amp;quot;The Label field is required.&amp;quot;],
        &amp;quot;EmailAddresses[0].Address&amp;quot;: [&amp;quot;The Address field is required.&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, I added validation on both the parent and the child DTO. It appears, however, that doing the same with DataAnnotations does not work. To enable the same behaviour for DataAnnotations, we can create custom &lt;code&gt;ValidationAttributes&lt;/code&gt;. We begin with defining a special &lt;code&gt;ValidationResult&lt;/code&gt; that is a composite of multiple ValidationResults.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CompositeValidationResult : System.ComponentModel.DataAnnotations.ValidationResult
{
    private readonly List&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt; results = new();

    public IEnumerable&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt; Results =&amp;gt; results;

    public CompositeValidationResult(string? errorMessage) : base(errorMessage)
    {
    }

    public CompositeValidationResult(string errorMessage, IEnumerable&amp;lt;string&amp;gt;? memberNames) : base(errorMessage, memberNames)
    {
    }

    protected CompositeValidationResult(System.ComponentModel.DataAnnotations.ValidationResult validationResult) : base(validationResult)
    {
    }

    public void AddResult(System.ComponentModel.DataAnnotations.ValidationResult validationResult)
    {
        results.Add(validationResult);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we create a custom &lt;code&gt;ValidationAttribute&lt;/code&gt; for objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter)]
public sealed class ValidateObjectAttribute : ValidationAttribute
{
    protected override System.ComponentModel.DataAnnotations.ValidationResult IsValid(object? value, ValidationContext validationContext)
    {
        if (value != null &amp;amp;&amp;amp; validationContext != null)
        {
            var results = new List&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt;();
            var context = new ValidationContext(value, null, null);

            System.ComponentModel.DataAnnotations.Validator.TryValidateObject(value, context, results, true);

            if (results.Count != 0)
            {
                var compositeValidationResult = new CompositeValidationResult($&amp;quot;Validation for {validationContext.DisplayName} failed.&amp;quot;, new[] { validationContext.MemberName });
                results.ForEach(compositeValidationResult.AddResult);

                return compositeValidationResult;
            }
        }

        return System.ComponentModel.DataAnnotations.ValidationResult.Success;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, we need a &lt;code&gt;ValidationAttribute&lt;/code&gt; for collections.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter)]
public sealed class ValidateCollectionAttribute : ValidationAttribute
{
    protected override System.ComponentModel.DataAnnotations.ValidationResult IsValid(object? value, ValidationContext validationContext)
    {
        CompositeValidationResult? collectionCompositeValidationResult = null;

        if (value is IEnumerable collection &amp;amp;&amp;amp; validationContext != null)
        {
            var index = 0;
            foreach (var obj in collection)
            {
                var results = new List&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt;();
                var context = new ValidationContext(obj, null, null);

                System.ComponentModel.DataAnnotations.Validator.TryValidateObject(obj, context, results, true);

                if (results.Count != 0)
                {
                    var compositeValidationResult = new CompositeValidationResult($&amp;quot;Validation for {validationContext.MemberName}[{index}] failed.&amp;quot;, new[] { $&amp;quot;{validationContext.MemberName}[{index}]&amp;quot; });
                    results.ForEach(compositeValidationResult.AddResult);

                    if (collectionCompositeValidationResult == null)
                    {
                        collectionCompositeValidationResult = new CompositeValidationResult($&amp;quot;Validation for {validationContext.MemberName} failed.&amp;quot;, new[] { validationContext.MemberName });
                    }

                    collectionCompositeValidationResult.AddResult(compositeValidationResult);
                }

                index++;
            }

            if (collectionCompositeValidationResult != null)
            {
                return collectionCompositeValidationResult;
            }
        }

        return System.ComponentModel.DataAnnotations.ValidationResult.Success;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our validation would already trigger with just these attributes. But we are also interested in handling our CompositeValidationResult and pretty-printing it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class Validator
{
    public static ValidationResult[] ValidateReturnValue(object objectToValidate)
    {
        var validationResults = new List&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt;();

        if (objectToValidate == null)
        {
            validationResults.Add(new System.ComponentModel.DataAnnotations.ValidationResult(&amp;quot;Return value is required.&amp;quot;));
        }
        else
        {
            var validationContext = new ValidationContext(objectToValidate);

            System.ComponentModel.DataAnnotations.Validator.TryValidateObject(objectToValidate, validationContext, validationResults, true);

            if (validationResults.Count != 0)
            {
                var compositeValidationResult = new CompositeValidationResult($&amp;quot;Validation for {validationContext.DisplayName} failed.&amp;quot;, new[] { validationContext.MemberName });
                validationResults.ForEach(compositeValidationResult.AddResult);
            }
        }

        var structuredValidationResults = StructureValidationResults(validationResults);
        return structuredValidationResults;
    }

    private static ValidationResult[] StructureValidationResults(IEnumerable&amp;lt;System.ComponentModel.DataAnnotations.ValidationResult&amp;gt; validationResults)
    {
        var structuredValidationResults = new List&amp;lt;ValidationResult&amp;gt;();
        foreach (var validationResult in validationResults)
        {
            var structuredValidationResult = new ValidationResult
            {
                ErrorMessage = validationResult.ErrorMessage,
                MemberNames = validationResult.MemberNames.ToArray()
            };

            if (validationResult is CompositeValidationResult compositeValidationResult)
            {
                structuredValidationResult.ValidationResults = StructureValidationResults(compositeValidationResult.Results);
            }

            structuredValidationResults.Add(structuredValidationResult);
        }

        return structuredValidationResults.ToArray();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use it in an &lt;code&gt;IValidateOptions&lt;/code&gt; like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;internal class CustomValidate : IValidateOptions&amp;lt;NestedParent&amp;gt;
{
    public ValidateOptionsResult Validate(string name, NestedParent options)
    {
        var validationResults = Kaylumah.ValidatedStronglyTypedIOptions.Utilities.Validation.Validator.ValidateReturnValue(options);
        if (validationResults.Any())
        {
            var builder = new StringBuilder();
            foreach (var result in validationResults)
            {
                var pretty = PrettyPrint(result, string.Empty, true);
                builder.Append(pretty);
            }
            return ValidateOptionsResult.Fail(builder.ToString());
        }

        return ValidateOptionsResult.Success;
    }

    private string PrettyPrint(Kaylumah.ValidatedStronglyTypedIOptions.Utilities.Validation.ValidationResult root, string indent, bool last)
    {
        // Based on https://stackoverflow.com/a/1649223
        var sb = new StringBuilder();
        sb.Append(indent);
        if (last)
        {
            sb.Append(&amp;quot;|-&amp;quot;);
            indent += &amp;quot;  &amp;quot;;
        }
        else
        {
            sb.Append(&amp;quot;|-&amp;quot;);
            indent += &amp;quot;| &amp;quot;;
        }

        sb.AppendLine(root.ToString());

        if (root.ValidationResults != null)
        {
            for (var i = 0; i &amp;lt; root.ValidationResults.Length; i++)
            {
                var child = root.ValidationResults[i];
                var pretty = PrettyPrint(child, indent, i == root.ValidationResults.Length - 1);
                sb.Append(pretty);
            }
        }

        return sb.ToString();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which prints&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;Microsoft.Extensions.Options.OptionsValidationException : |-Children =&amp;gt; Validation for Children failed.
  |-Children[0] =&amp;gt; Validation for Children[0] failed.
    |-Name =&amp;gt; The Name field is required.

    Stack Trace:
       at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)
   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks more like it. One thing this approach, unfortunately, cannot solve is that errors occur at runtime. Wherewith &lt;code&gt;IConfiguration&lt;/code&gt;, we could get the error at startup; we don't have the same luxury with &lt;code&gt;IOptions&lt;/code&gt; since, as demonstrated, &lt;code&gt;Value&lt;/code&gt; triggers at runtime. It is, however, a step in the right direction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: since IOptions&amp;lt;&amp;gt; is an unbound generic you cannot retrieve all instances of it from the DI container to trigger this behaviour at startup&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="bonus-strongly-typed-options"&gt;&lt;a href="#bonus-strongly-typed-options"&gt;Bonus: Strongly typed options&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I never liked using &lt;code&gt;IOptions&amp;lt;&amp;gt;&lt;/code&gt; all over the place. I've found it especially bothersome in unit tests. I would either need &lt;code&gt;Options.Create&lt;/code&gt; or create an &lt;code&gt;IOptions&lt;/code&gt; Moq. If you don't rely on reloading configuration (remember &lt;code&gt;IOptions&lt;/code&gt; is a Singleton), you can register a typed instance, which I find pretty neat.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var serviceProvider = new ServiceCollection()
            .Configure&amp;lt;StronglyTypedOptions&amp;gt;(builder =&amp;gt; {
                builder.Name = &amp;quot;TestStronglyTypedOptions&amp;quot;;
            })
            .AddSingleton(sp =&amp;gt; sp.GetRequiredService&amp;lt;IOptions&amp;lt;StronglyTypedOptions&amp;gt;&amp;gt;().Value)
            .BuildServiceProvider();
var options = serviceProvider.GetRequiredService&amp;lt;IOptions&amp;lt;StronglyTypedOptions&amp;gt;&amp;gt;().Value;
var typedOptions = serviceProvider.GetRequiredService&amp;lt;StronglyTypedOptions&amp;gt;();
typedOptions.Name.Should().Be(options.Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the options and configuration patterns described in this article makes it a lot less likely to run into configuration errors, or at the very least, it makes it easier to troubleshoot configuration mistakes.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/ValidatedStronglyTypedIOptions" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="resources"&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration" class="external"&gt;Configuration in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0" class="external"&gt;Configuration in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/options" class="external"&gt;Options pattern in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0" class="external"&gt;Options pattern in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/11/14/capture-logs-in-unit-tests.html</id>
    <title type="text">Capture Logs in Unit Tests</title>
    <summary type="text">A guide to capturing logs in Xunit</summary>
    <published>DateTimeOffset_8</published>
    <updated>DateTimeOffset_8</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/11/14/capture-logs-in-unit-tests.html" />
    <category term="C#" />
    <category term="Testing" />
    <category term="Xunit" />
    <content type="html">&lt;p&gt;In application code, we are used to writing log statements primarily for diagnostic purposes. For instance, we use logs to capture unexpected error flows. Therefore it is not uncommon to want to capture the log output in our unit tests. You have three distinctive options to handle log output in unit tests, as far as I can tell.&lt;/p&gt;
&lt;h2 id="scenario"&gt;&lt;a href="#scenario"&gt;Scenario&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our test scenario is a service or system under test (SUT) that takes a string input and returns it without modification. We rely on &lt;code&gt;Microsoft Extensions&lt;/code&gt; for our logging purposes. As the test framework, we will be using &lt;code&gt;Xunit&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public interface IEchoService
{
    Task&amp;lt;string&amp;gt; Echo(string input);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The initial implementation of our SUT could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class EchoService : IEchoService
{
    private readonly ILogger&amp;lt;EchoService&amp;gt; _logger;

    public EchoService(ILogger&amp;lt;EchoService&amp;gt; logger)
    {
        _logger = logger;
    }

    public Task&amp;lt;string&amp;gt; Echo(string input)
    {
        _logger.LogInformation(&amp;quot;echo was invoked&amp;quot;);
        return Task.FromResult(input);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this article, the snippet above would be more than sufficient. But in a real-life application, I prefer to log the input as well. If, however, we would use simple string interpolation, we immediately get a Code-Analysis warning about it. The recommendation here is to use LoggerMessage that enables the use of &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/loggermessage?view=aspnetcore-6.0" class="external"&gt;high-performance logging&lt;/a&gt;. I've always found that implementing the LoggerMessage pattern required quite a bit of boilerplate. Luckily in .NET 6, this is a lot easier. We can &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator" class="external"&gt;generate&lt;/a&gt; all the boilerplate we need. As per usual, Andrew Lock &lt;a href="https://andrewlock.net/exploring-dotnet-6-part-8-improving-logging-performance-with-source-generators/" class="external"&gt;wrote a piece&lt;/a&gt; about this new feature already.&lt;/p&gt;
&lt;p&gt;After applying our &lt;code&gt;LoggerMessage&lt;/code&gt; changes to the SUT it looks like the snippet below. Please note that in order for this to work the class &lt;code&gt;EchoService&lt;/code&gt; it self is now marked as &lt;code&gt;partial&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public partial class EchoService : IEchoService
{
    private readonly ILogger&amp;lt;EchoService&amp;gt; _logger;

    public EchoService(ILogger&amp;lt;EchoService&amp;gt; logger)
    {
        _logger = logger;
    }

    public Task&amp;lt;string&amp;gt; Echo(string input)
    {
        //_logger.LogInformation(&amp;quot;echo was invoked&amp;quot;);

        // The logging message template should not vary between calls to ... csharp(CA2254)
        // _logger.LogInformation($&amp;quot;echo was invoked with {input}&amp;quot;);

        LogEchoCall(input);

        return Task.FromResult(input);
    }

    [LoggerMessage(1000, LogLevel.Information, &amp;quot;echo was invoked '{EchoInput}'&amp;quot;)]
    partial void LogEchoCall(string echoInput);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="option-1"&gt;&lt;a href="#option-1"&gt;Option 1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First up is doing absolutely nothing. Yeah, you read that correctly. You might find it silly to start this piece with the first option being nothing, but doing nothing with log statements in your test code is perfectly fine. Heck, even doing nothing comes in two flavours.&lt;/p&gt;
&lt;p&gt;If we use Dependency Injection in our test, we have access to &amp;quot;AddLogging()&amp;quot;. If we don't provide a logging provider, our code will run just fine. Otherwise, if you have already set up a logging provider or provided one explicitly, it will log to zero or more providers depending on your current configuration. For instance, you could use the ConsoleLoggerProvider to log to the console during the test. I often use the DI variant in my test since I am writing extension methods on IServiceCollection to write up my code anyway, so using the same extension method in test code simplifies matters.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_DependencyInjection_EmptyLoggingBuilder()
{
    var configuration = new ConfigurationBuilder().Build();
    var serviceProvider = new ServiceCollection()
        .AddLogging() // could also be part of AddEcho to make sure ILogger is available outside ASP.NET runtime
        .AddEcho(configuration)
        .BuildServiceProvider();
    var sut = serviceProvider.GetRequiredService&amp;lt;IEchoService&amp;gt;();
    var testInput = &amp;quot;Scenario: empty logging builder&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211114/capture-logs-in-unit-tests/001_NoLogger.png" width="1564" height="814" alt="VS Code - Dotnet Debugger - No ILogger Registered" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_DependencyInjection_ConsoleLoggingBuilder()
{
    var configuration = new ConfigurationBuilder().Build();
    var serviceProvider = new ServiceCollection()
        .AddLogging(loggingBuilder =&amp;gt; {
            loggingBuilder.AddConsole();
        })
        .AddEcho(configuration)
        .BuildServiceProvider();
    var sut = serviceProvider.GetRequiredService&amp;lt;IEchoService&amp;gt;();
    var testInput = &amp;quot;Scenario: console logging builder&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211114/capture-logs-in-unit-tests/002_ConsoleLogger.png" width="1564" height="814" alt="VS Code - Dotnet Debugger - console ILogger registered" /&gt;&lt;/p&gt;
&lt;p&gt;If, however, you cannot rely on dependency injection in your tests, you have the alternative of manual creating your SUT and relevant dependencies. The only dependency of our EchoService is an instance of ILogger. For testing purposes, you can use the NullLoggerFactory, which creates a logger that logs into the void.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_Manuel_NullLoggingFactory()
{
    var sut = new EchoService(NullLogger&amp;lt;EchoService&amp;gt;.Instance);
    var testInput = &amp;quot;Scenario: null logger factory&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211114/capture-logs-in-unit-tests/003_NullLogger.png" width="1564" height="814" alt="VS Code - Dotnet Debugger - null ILogger registered" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As you can see in the screenshot above, and empty logger and a NullLogger are not the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="option-2"&gt;&lt;a href="#option-2"&gt;Option 2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The second method uses the Moq framework, which makes it possible to hide the logger behind a Mock, which means it's a fake version of ILogger. In my previous article, &lt;a href="https://BaseUrl_2/2021/04/11/an-approach-to-writing-mocks.html" class="external"&gt;&amp;quot;Adventures with Mock&amp;quot;&lt;/a&gt;, I touched upon my preferred method of writing mocks. I even included an initial version of the LoggerMock. Since then, I have fleshed out the concept more, so here is an updated version of the Logger Mock.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class LoggerMock&amp;lt;TCategoryName&amp;gt; : Mock&amp;lt;ILogger&amp;lt;TCategoryName&amp;gt;&amp;gt;
{
    private readonly List&amp;lt;LogMessage&amp;gt; logMessages = new();

    public ReadOnlyCollection&amp;lt;LogMessage&amp;gt; LogMessages =&amp;gt; new(logMessages);

    protected LoggerMock()
    {
    }

    public static LoggerMock&amp;lt;TCategoryName&amp;gt; CreateDefault()
    {
        return new LoggerMock&amp;lt;TCategoryName&amp;gt;()
            .SetupLog()
            .SetupIsEnabled(LogLevel.Information);
    }

    public LoggerMock&amp;lt;TCategoryName&amp;gt; SetupIsEnabled(LogLevel logLevel, bool enabled = true)
    {
        Setup(x =&amp;gt; x.IsEnabled(It.Is&amp;lt;LogLevel&amp;gt;(p =&amp;gt; p.Equals(logLevel))))
            .Returns(enabled);
        return this;
    }

    public LoggerMock&amp;lt;TCategoryName&amp;gt; SetupLog()
    {
        Setup(logger =&amp;gt; logger.Log(
            It.IsAny&amp;lt;LogLevel&amp;gt;(),
            It.IsAny&amp;lt;EventId&amp;gt;(),
            It.Is&amp;lt;It.IsAnyType&amp;gt;((v, t) =&amp;gt; true),
            It.IsAny&amp;lt;Exception&amp;gt;(),
            It.Is&amp;lt;Func&amp;lt;It.IsAnyType, Exception?, string&amp;gt;&amp;gt;((v, t) =&amp;gt; true)
        ))
        .Callback(new InvocationAction(invocation =&amp;gt; {
            var logLevel = (LogLevel)invocation.Arguments[0];
            var eventId = (EventId)invocation.Arguments[1];
            var state = invocation.Arguments[2];
            var exception = (Exception?)invocation.Arguments[3];
            var formatter = invocation.Arguments[4];

            var invokeMethod = formatter.GetType().GetMethod(&amp;quot;Invoke&amp;quot;);
            var actualMessage = (string?)invokeMethod?.Invoke(formatter, new[] { state, exception });

            logMessages.Add(new LogMessage {
                EventId = eventId,
                LogLevel = logLevel,
                Message = actualMessage,
                Exception = exception,
                State = state
            });
        }));
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any &lt;code&gt;Mock&lt;/code&gt; created with Moq will provide you with the ability to assert invocations made to the mocked class. Since my approach makes the mock stateful, I can capture any request made against it. We can make concrete assertions because we can access information like &lt;code&gt;EventId&lt;/code&gt; and &lt;code&gt;LogLevel&lt;/code&gt;. If, for instance, you have alerts written against business events, you want to validate that the correct information passes into your logging system.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_Moq_DefaultMockedLogger()
{
    var loggerMock = LoggerMock&amp;lt;EchoService&amp;gt;.CreateDefault();
    var sut = new EchoService(loggerMock.Object);
    var testInput = &amp;quot;Scenario: mocked logger&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);

    loggerMock.LogMessages.Should().NotBeEmpty().And.HaveCount(1);
    loggerMock.VerifyEventWasLogged(new EventId(1000));
}

[Fact]
public async Task Test_Moq_LogLevelDisabledMockedLogger()
{
    var loggerMock = LoggerMock&amp;lt;EchoService&amp;gt;.CreateDefault().SetupIsEnabled(LogLevel.Information, enabled: false);
    var sut = new EchoService(loggerMock.Object);
    var testInput = &amp;quot;Scenario: log level disabled mocked logger&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);

    loggerMock.LogMessages.Should().BeEmpty();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211114/capture-logs-in-unit-tests/004_MockLogger.png" width="1564" height="814" alt="VS Code - Dotnet Debugger - mock ILogger registered" /&gt;&lt;/p&gt;
&lt;h2 id="options-3"&gt;&lt;a href="#options-3"&gt;Options 3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thus far, we have discussed options that would work outside &lt;code&gt;Xunit&lt;/code&gt;. The third technique is not limited to &lt;code&gt;Xunit&lt;/code&gt;, but its implementation is restricted to use in a &lt;code&gt;Xunit&lt;/code&gt; project because we will now rely on Xunit's &lt;code&gt;ITestOutputHelper&lt;/code&gt; mechanism. In most cases, we would use &lt;code&gt;ITestOutputHelper&lt;/code&gt; to log lines inside the test case itself; it is, however, possible to create an &lt;code&gt;ILogger&lt;/code&gt; that writes to &lt;code&gt;ITestOutputHelper&lt;/code&gt; so we can also capture logs our SUT produces.&lt;/p&gt;
&lt;p&gt;Microsoft has &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider" class="external"&gt;well-written documentation&lt;/a&gt; on how to create a custom logger provider. We start with a configuration class for our &lt;code&gt;XunitLogger&lt;/code&gt;. We will have no custom settings in this demo, but putting the configuration in place makes it easier to add settings later. The &lt;code&gt;ConsoleLogger&lt;/code&gt;, for example, uses configuration to control LogScope inclusion and timestamp formats.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class XunitLoggerConfiguration
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up is our Xunit logger itself. The ColoredConsole sample from the docs does nothing with scope, but to not limit ourselves later, we changed the implementation of &lt;code&gt;BeginScope&lt;/code&gt; to use &lt;code&gt;IExternalScopeProvider&lt;/code&gt;. To print the log line, we need the last argument of &lt;code&gt;Log&amp;lt;TState&amp;gt;&lt;/code&gt;, which is the formatter. We then pass it the Xunit's ITestOutputHelper to &lt;a href="https://xunit.net/docs/capturing-output" class="external"&gt;capture output&lt;/a&gt;. Depending on your specific needs, you can log the logger's category (name), event, log level, scope or even exception. For now, let's keep it simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class XunitLogger : ILogger
{
    private readonly string _loggerName;
    private readonly Func&amp;lt;XunitLoggerConfiguration&amp;gt; _getCurrentConfig;
    private readonly IExternalScopeProvider _externalScopeProvider;
    private readonly ITestOutputHelper _testOutputHelper;

    public XunitLogger(string loggerName, Func&amp;lt;XunitLoggerConfiguration&amp;gt; getCurrentConfig, IExternalScopeProvider externalScopeProvider, ITestOutputHelper testOutputHelper)
    {
        _loggerName = loggerName;
        _getCurrentConfig = getCurrentConfig;
        _externalScopeProvider = externalScopeProvider;
        _testOutputHelper = testOutputHelper;
    }

    public IDisposable BeginScope&amp;lt;TState&amp;gt;(TState state) =&amp;gt; _externalScopeProvider.Push(state);

    public bool IsEnabled(LogLevel logLevel) =&amp;gt; LogLevel.None != logLevel;

    public void Log&amp;lt;TState&amp;gt;(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func&amp;lt;TState, Exception?, string&amp;gt; formatter)
    {
        if (!IsEnabled(logLevel))
        {
            return;
        }

         var message = formatter(state, exception);
         _testOutputHelper.WriteLine(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An &lt;code&gt;ILoggerProvider&lt;/code&gt; is responsible for creating &lt;code&gt;ILogger&lt;/code&gt; instances; this means we also need the custom &lt;code&gt;XunitLoggerProvider&lt;/code&gt; to take care of making our &lt;code&gt;XunitLogger&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public sealed class XunitLoggerProvider : ILoggerProvider
{
    private readonly IDisposable _configurationOnChangeToken;
    private XunitLoggerConfiguration _currentConfiguration;
    private readonly ConcurrentDictionary&amp;lt;string, XunitLogger&amp;gt; _loggers = new();
    private readonly IExternalScopeProvider _externalScopeProvider = new LoggerExternalScopeProvider();
    private readonly ITestOutputHelper _testOutputHelper;

    public XunitLoggerProvider(IOptionsMonitor&amp;lt;XunitLoggerConfiguration&amp;gt; optionsMonitor, ITestOutputHelper testOutputHelper)
    {
        _currentConfiguration = optionsMonitor.CurrentValue;
        _configurationOnChangeToken = optionsMonitor.OnChange(updatedConfiguration =&amp;gt; _currentConfiguration = updatedConfiguration);
        _testOutputHelper = testOutputHelper;
    }

    public ILogger CreateLogger(string categoryName)
    {
        var logger = _loggers.GetOrAdd(categoryName, name =&amp;gt; new XunitLogger(name, GetCurrentConfiguration, _externalScopeProvider, _testOutputHelper));
        return logger;
    }

    public void Dispose()
    {
        _loggers.Clear();
        _configurationOnChangeToken.Dispose();
    }

    private XunitLoggerConfiguration GetCurrentConfiguration() =&amp;gt; _currentConfiguration;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final puzzle piece is an extension method that allows us to register the new logger type. Note that we also add &lt;code&gt;ITestOutputHelper&lt;/code&gt; to the DI container of the LoggingBuilder; that is why the &lt;code&gt;XunitLoggingProvider&lt;/code&gt; in the previous snippet can retrieve it from the dependency injection container.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static class XunitLoggingBuilderExtensions
{
    public static ILoggingBuilder AddXunit(this ILoggingBuilder builder, ITestOutputHelper testOutputHelper)
    {
        builder.AddConfiguration();

        builder.Services.TryAddSingleton(testOutputHelper);

        builder.Services.TryAddEnumerable(
            ServiceDescriptor.Singleton&amp;lt;ILoggerProvider, XunitLoggerProvider&amp;gt;());

        LoggerProviderOptions.RegisterProviderOptions
            &amp;lt;XunitLoggerConfiguration, XunitLoggerProvider&amp;gt;(builder.Services);

        return builder;
    }

    public static ILoggingBuilder AddXunit(this ILoggingBuilder builder, ITestOutputHelper testOutputHelper, Action&amp;lt;XunitLoggerConfiguration&amp;gt; configure)
    {
        builder.AddXunit(testOutputHelper);
        builder.Services.Configure(configure);

        return builder;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The usage is the same as the ConsoleLogger example we did previously.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_Custom_XunitLoggingBuilder()
{
    var configuration = new ConfigurationBuilder().Build();
    var serviceProvider = new ServiceCollection()
        .AddLogging(loggingBuilder =&amp;gt; {
            loggingBuilder.AddXunit(_testOutputHelper);
        })
        .AddEcho(configuration)
        .BuildServiceProvider();
    var sut = serviceProvider.GetRequiredService&amp;lt;IEchoService&amp;gt;();
    var testInput = &amp;quot;Scenario: custom logging builder&amp;quot;;
    var testResult = await sut.Echo(testInput).ConfigureAwait(false);
    testResult.Should().Be(testInput, &amp;quot;the input should have been returned&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20211114/capture-logs-in-unit-tests/005_XunitLogger.png" width="1564" height="814" alt="VS Code - Dotnet Debugger - Xunit ILogger registered" /&gt;&lt;/p&gt;
&lt;p&gt;The first time I ran this test, I was baffled. I could only see the console output from ConsoleLogger test we did previously. A quick google search brought me to the &lt;a href="https://github.com/xunit/xunit/issues/1141#issuecomment-555717377" class="external"&gt;solution&lt;/a&gt;. We need to tell the dotnet test runner to display it with &lt;code&gt;dotnet test --logger:&amp;quot;console;verbosity=detailed&amp;quot;&lt;/code&gt;. Telling an entire team they can no longer simply run &lt;code&gt;dotnet test&lt;/code&gt; was not a real solution; luckily, we can simplify things with &lt;code&gt;dotnet test --settings runsettings.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;RunSettings&amp;gt;
    &amp;lt;LoggerRunSettings&amp;gt;
        &amp;lt;Loggers&amp;gt;
            &amp;lt;Logger friendlyName=&amp;quot;console&amp;quot; enabled=&amp;quot;True&amp;quot;&amp;gt;
                &amp;lt;Configuration&amp;gt;
                    &amp;lt;Verbosity&amp;gt;detailed&amp;lt;/Verbosity&amp;gt;
                &amp;lt;/Configuration&amp;gt;
            &amp;lt;/Logger&amp;gt;
        &amp;lt;/Loggers&amp;gt;
    &amp;lt;/LoggerRunSettings&amp;gt;
&amp;lt;/RunSettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, explicitly passing &lt;code&gt;--settings&lt;/code&gt; every time does not solve anything. On the &lt;a href="https://docs.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022" class="external"&gt;Microsoft Docs&lt;/a&gt; I found the solution. We can tell MSBuild to use &lt;code&gt;RunSettingsFilePath&lt;/code&gt;, which takes care of it for us. If we now run &lt;code&gt;dotnet test&lt;/code&gt; we get proper output. For example, you can add a &lt;code&gt;Directory.Build.props&lt;/code&gt; to the root of your project.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;RunSettingsFilePath&amp;gt;$(MSBuildThisFileDirectory)runsettings.xml&amp;lt;/RunSettingsFilePath&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know I am not the first to write about this topic, but I hope to provide fresh insight into the subject matter. The different techniques all have their merit. I have used all three on other occasions and remind you that the NullLogger is a viable option in many cases. Nine times out of 10, you probably only care about the business logic to test. For the final remaining time, I can only say the well-known programming wisdom: &amp;quot;It depends&amp;quot;.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/CaptureLogsInUnitTests" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/07/17/decreasing-solution-build-time-with-filters.html</id>
    <title type="text">Decreasing Solution Build time with Filters</title>
    <summary type="text">How to use solution filters to increase focus and decrease build time</summary>
    <published>DateTimeOffset_9</published>
    <updated>DateTimeOffset_9</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/07/17/decreasing-solution-build-time-with-filters.html" />
    <category term="MSBuild" />
    <category term="Visual Studio 2019" />
    <content type="html">&lt;p&gt;There are many ways to structure your projects source code. My preference is a style called single-solution-model. Amongst other things, I like that it provides a single entry point to my project. If, however, your project grows, it can become slow to build it. I am sure some of you will be familiar with the following &lt;a href="https://imgs.xkcd.com/comics/compiling.png" class="external"&gt;xkcd joke&lt;/a&gt; or some variant of it:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/xkcd_joke_compiling.png" width="413" height="360" alt="xkcd_joke code is compiling" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-preview-1-now-available" class="external"&gt;next version&lt;/a&gt; of Visual Studio will come with a lot of promised performance improvements. VisualStudio 2022 is the first version that takes advantage of the 64-bit processor architecture. I have not yet tested it, but I am hopeful for a more performant experience developing when it ships.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While I think the 1600+ projects in a solution demo are cool, I would not see myself using the single solution model at that scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That brings me to the topic of today's post. I recently discovered a VS2019 feature I did not know that can bring some improvement to my experience. VS2019 introduced a new feature called &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/filtered-solutions?view=vs-2019" class="external"&gt;solution filters&lt;/a&gt;. I googled a bit against it and did not find a lot about it, except for the Microsoft Docs itself. So I wrote this post to help raise awareness for something I found very useful.&lt;/p&gt;
&lt;h2 id="project-setup"&gt;&lt;a href="#project-setup"&gt;Project Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think over my past couple of posts, it's become clear that I am a fan of the &lt;code&gt;Microsoft.Extensions&lt;/code&gt; repository. While Microsoft uses multiple solution files throughout the repository, I would opt for the single solution model.&lt;/p&gt;
&lt;p&gt;Many of the projects in the repo follow this pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Concept.Abstractions&lt;/code&gt; provides interfaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.Concept&lt;/code&gt; provides default implementation for &lt;code&gt;Concept.Abstractions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Concept.Concrete&lt;/code&gt; technology specific implementation for &lt;code&gt;Concept.Abstractions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new sln --name &amp;quot;SlnFilter&amp;quot;

dotnet new classlib --framework netstandard2.1 --name Kaylumah.SlnFilter.Extensions.Concept.Abstractions --output src/Kaylumah.SlnFilter.Extensions.Concept.Abstractions
dotnet new classlib --framework netstandard2.1 --name Kaylumah.SlnFilter.Extensions.Concept --output src/Kaylumah.SlnFilter.Extensions.Concept
dotnet new classlib --framework netstandard2.1 --name Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha --output src/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha
dotnet new classlib --framework netstandard2.1 --name Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo --output src/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo

dotnet new xunit --framework netcoreapp3.1 --name Kaylumah.SlnFilter.Extensions.Concept.Tests --output test/Kaylumah.SlnFilter.Extensions.Concept.Tests
dotnet new xunit --framework netcoreapp3.1 --name Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests --output test/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests
dotnet new xunit --framework netcoreapp3.1 --name Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo.Tests --output test/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo.Tests

dotnet sln add src/Kaylumah.SlnFilter.Extensions.Concept.Abstractions/Kaylumah.SlnFilter.Extensions.Concept.Abstractions.csproj
dotnet sln add src/Kaylumah.SlnFilter.Extensions.Concept/Kaylumah.SlnFilter.Extensions.Concept.csproj
dotnet sln add src/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.csproj
dotnet sln add src/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo.csproj
dotnet sln add test/Kaylumah.SlnFilter.Extensions.Concept.Tests/Kaylumah.SlnFilter.Extensions.Concept.Tests.csproj
dotnet sln add test/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests/Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests.csproj
dotnet sln add test/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo.Tests/Kaylumah.SlnFilter.Extensions.Concept.ConcreteBravo.Tests.csproj

dotnet new classlib --framework netstandard2.1 --name Kaylumah.SlnFilter.Test.Utilities --output test/Kaylumah.SlnFilter.Test.Utilities
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note &lt;code&gt;Kaylumah.SlnFilter.Test.Utilities&lt;/code&gt; should not yet be added to the solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="setting-up-our-filters"&gt;&lt;a href="#setting-up-our-filters"&gt;Setting up our filters&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After following these steps, our project should look like the picture below in Visual Studio.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/001_vs2019_sln_all_projects.png" width="1428" height="1040" alt="Visual Studio 2019 - Solution all projects loaded" /&gt;&lt;/p&gt;
&lt;p&gt;We can select one or more projects at a time and unload them from the solution.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/002_vs2019_sln_unload_projects.png" width="2360" height="1864" alt="Visual Studio 2019 - Unload project menu" /&gt;&lt;/p&gt;
&lt;p&gt;Up until now, this is how I would have done things. Just unload projects I won't need and don't worry about them anymore. What I did not know is that we save the current state of the solution.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/003_vs2019_sln_save_filter_001.png" width="2464" height="224" alt="Visual Studio 2019 - Save as Solution Filter" /&gt;&lt;/p&gt;
&lt;p&gt;Unloading projects manually to create filters can be error-prone. Since a solution filter only builds the projects selected by the filter missing a project causes the build to fail.&lt;/p&gt;
&lt;p&gt;An alternative can be to unload all projects, select the project you want, and use the &amp;quot;reload with dependencies&amp;quot; option.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/004_vs2019_sln_reload_project_dependencies.png" width="2316" height="1528" alt="Visual Studio 2019 - Reload Project with Dependencies" /&gt;&lt;/p&gt;
&lt;p&gt;Like before, we can save the solution filter with the &lt;code&gt;Save As Solution Filter&lt;/code&gt; option. The only difference is that we now get 4/7 projects as opposed to 5/7 projects. That's because we loaded the &lt;code&gt;ConcreteBravo.Tests&lt;/code&gt; projects and it's dependencies. Even though that loads &lt;code&gt;Extensions.Concept&lt;/code&gt; it does not load &lt;code&gt;Extensions.Concept.Tests&lt;/code&gt; since it is not a dependency of &lt;code&gt;ConcreteBravo.Tests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/005_vs2019_sln_save_filter_002.png" width="2464" height="2212" alt="Visual Studio 2019 - Save as Solution Filter - Scenario A" /&gt;&lt;/p&gt;
&lt;p&gt;While researching something unrelated to this post, I noticed that the &lt;a href="https://github.com/dotnet/efcore" class="external"&gt;EF Core team&lt;/a&gt; used this feature I did not know existed. The cool thing was that they also had a filter for all projects. So I had to try that out, and as it turns out, you can create a filter without unloading projects.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/006_vs2019_sln_save_filter_003.png" width="2464" height="2160" alt="Visual Studio 2019 - Save as Solution Filter - Scenario B" /&gt;&lt;/p&gt;
&lt;p&gt;The image below shows the difference between the three filters we created. It looks exactly like a traditional Solution Explorer with the addition that the name of the filter applied is displayed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/007_vs2019_slnf_project_overview.png" width="4284" height="1040" alt="Visual Studio 2019 - Solution Filter Scenarios Compared" /&gt;&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;SlnFilter.Alpha.slnf&lt;/code&gt; I created for &lt;code&gt;Concept.ConcreteAlpha&lt;/code&gt; implementation looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;solution&amp;quot;: {
    &amp;quot;path&amp;quot;: &amp;quot;SlnFilter.sln&amp;quot;,
    &amp;quot;projects&amp;quot;: [
      &amp;quot;src\\Kaylumah.SlnFilter.Extensions.Concept.Abstractions\\Kaylumah.SlnFilter.Extensions.Concept.Abstractions.csproj&amp;quot;,
      &amp;quot;src\\Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha\\Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.csproj&amp;quot;,
      &amp;quot;src\\Kaylumah.SlnFilter.Extensions.Concept\\Kaylumah.SlnFilter.Extensions.Concept.csproj&amp;quot;,
      &amp;quot;test\\Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests\\Kaylumah.SlnFilter.Extensions.Concept.ConcreteAlpha.Tests.csproj&amp;quot;,
      &amp;quot;test\\Kaylumah.SlnFilter.Extensions.Concept.Tests\\Kaylumah.SlnFilter.Extensions.Concept.Tests.csproj&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It contains a reference to the &lt;code&gt;sln-file&lt;/code&gt; and relative paths to all my &lt;code&gt;*.csprojs&lt;/code&gt; I included in the &lt;code&gt;.slnf-file&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="manage-solution-changes"&gt;&lt;a href="#manage-solution-changes"&gt;Manage solution changes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might be wondering what happens when I need to add new projects to my solution?&lt;/p&gt;
&lt;p&gt;To demonstrate, let us assume our test projects have a shared helper project. At this time, I want to update our &amp;quot;Concept.Bravo&amp;quot; solution filter. This time I don't want to use dotnet CLI but use &lt;code&gt;Add existing project&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You cannot use &lt;code&gt;dotnet sln add&lt;/code&gt; on slnf files, but you can use them with &lt;code&gt;dotnet build&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/008_vs2019_slnf_add_existing_project.png" width="3088" height="1644" alt="Visual Studio 2019 - Add Existing Project" /&gt;&lt;/p&gt;
&lt;p&gt;As soon as you did this, you get this pop-up stating a mismatch between the loaded projects and the project specified in the filter.&lt;/p&gt;
&lt;p&gt;If you followed the steps in a GIT environment, you would see that even before pressing &lt;code&gt;Update Solution Filter&lt;/code&gt; the underlying solution is already updated.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210717/decreasing-solution-build-time-with-filters/009_vs2019_slnf_update_solution_filter.png" width="1428" height="1040" alt="Visual Studio 2019 - Regenerate Solution Filter" /&gt;&lt;/p&gt;
&lt;h2 id="the-missing-bit"&gt;&lt;a href="#the-missing-bit"&gt;The missing bit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I discussed this feature at work as a potential workaround for an issue we had in structuring our projects. One of my colleagues remembered looking at it about a year ago and finding it lacking. A few minutes later, he found a &lt;a href="https://developercommunity.visualstudio.com/t/Solution-Filter-should-allow-for-Include/1090914?space=8&amp;amp;q=solution+filter" class="external"&gt;post&lt;/a&gt; on the developer community for Visual Studio. Funnily enough, it's a small world; the user-post links to a GitHub issue he created in this matter.&lt;/p&gt;
&lt;p&gt;The problem is the management of multiple solutions filters because the filters are inclusive with relative paths following the sln-filter location. A proposed improvement would be to use glob patterns to include/exclude projects. That would make it easier when following naming conventions to have always up-to-date filters.&lt;/p&gt;
&lt;p&gt;At a customer I work for, they use PowerShell as their script platform of choice, so I needed a deeper understanding of PowerShell. With PowerShell, it's reasonably easy to work with the file system and convert from and to JSON. So I thought, how hard can it be to script this.&lt;/p&gt;
&lt;p&gt;The following script loads the paths of all *.csproj present in the solution directory and filters them out by RegEx. It then writes it to disk in the .slnf-format.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ps"&gt;$inputSln = &amp;quot;SlnFilter.sln&amp;quot;
$outputSlnFilter = &amp;quot;SlnFilter.Generated.slnf&amp;quot;

$projectFiles = Get-ChildItem -Recurse -Filter &amp;quot;*.csproj&amp;quot; -Name
# $excludeFilters = @()
$excludeFilters = @('.ConcreteBravo')


$targetProjects = New-Object Collections.Generic.List[String]

foreach ($project in $projectFiles)
{
    $shouldInclude = $true

    foreach ($filter in $excludeFilters)
    {
        $shouldInclude = $project -notmatch $filter
        if (!$shouldInclude)
        {
            break
        }
    }

    if ($shouldInclude)
    {
        $targetProjects.Add($project)
    }
}

$sln = New-Object -TypeName psobject
$sln | Add-Member -MemberType NoteProperty -Name &amp;quot;path&amp;quot; -Value $inputSln
$sln | Add-Member -MemberType NoteProperty -Name &amp;quot;projects&amp;quot; -value $targetProjects

$root = New-Object -TypeName psobject
$root | Add-Member -MemberType NoteProperty -Name &amp;quot;solution&amp;quot; -value $sln

$root | ConvertTo-Json | Out-File $outputSlnFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I like this new feature as a way to manage my larger solutions. Of course, it's not practical to maintain my (very basic) script for this. It will be a huge help if you think this is a valuable feature to upvote the Visual Studio Community forum issue.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/SolutionFilter" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="sources"&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/filtered-solutions?view=vs-2019" class="external"&gt;slnf in VisualStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/solution-filters?view=vs-2019" class="external"&gt;slnf in MSBuild&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/05/23/generate-csharp-client-for-openapi.html</id>
    <title type="text">Generate C# client for OpenAPI</title>
    <summary type="text">A look at using OpenAPI clients in C#</summary>
    <published>DateTimeOffset_10</published>
    <updated>DateTimeOffset_10</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/05/23/generate-csharp-client-for-openapi.html" />
    <category term="C#" />
    <category term="NSwag" />
    <category term="OpenAPI" />
    <category term="Swashbuckle" />
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: on 2023-04-14 I published a revised version of this article which you can find here &lt;a href="https://BaseUrl_2/2023/04/14/csharp-client-for-openapi-revistted.html" class="external"&gt;&amp;quot;Generate C# client for OpenAPI - Revisited&amp;quot;&lt;/a&gt; it compares an alternative to the way described in this article. Including an update to &lt;code&gt;net7.0&lt;/code&gt;, but if you are looking specifically for configuring NSwag you can use this article for the general idea :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've recently worked on a project where I was the consumer of a third party API. Luckily for me, we decided on an Open API specification which made integrating services a breeze. If you have been following my content, you know I often use C# in my projects. So I needed a type-safe client for use in my C# code base.&lt;/p&gt;
&lt;p&gt;To accomplish my goals, I used the &lt;a href="https://github.com/RicoSuter/NSwag/wiki/NSwag.MSBuild" class="external"&gt;NSwag library&lt;/a&gt; created by Rico Suter. This project provides me with an MSBuild task for generating clients. In my case, I used a JSON file version to generate my client. NSwag is not limited to just one way of working.&lt;/p&gt;
&lt;h2 id="what-is-openapi"&gt;&lt;a href="#what-is-openapi"&gt;What is OpenAPI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, a quick recap of what is an OpenAPI. According to the &lt;a href="https://swagger.io/specification/" class="external"&gt;official definition&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.&lt;/p&gt;
&lt;p&gt;An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's pretty cool. Also, if you are wondering about the difference between OpenAPI / Swagger, Swagger is part of the OpenAPI initiative since 2015. But in short OpenAPI = specification, Swagger = Tooling. In this article, I am not going into much detail in setting up your API, but Microsoft &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-5.0#openapi-vs-swagger" class="external"&gt;described&lt;/a&gt; three versions on how to combine it with .NET Core.&lt;/p&gt;
&lt;h2 id="generate-client-from-file"&gt;&lt;a href="#generate-client-from-file"&gt;Generate client from file&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first version uses a file to generate our code. In our case, we will use a &lt;a href="https://petstore.swagger.io/v2/swagger.json" class="external"&gt;JSON file&lt;/a&gt; from the &lt;a href="https://petstore.swagger.io/" class="external"&gt;PetStore&lt;/a&gt; example project as provided by the swagger team.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new classlib --framework netstandard2.0 --output src/Sdks/PetStore --name Kaylumah.GenerateCSharpClientForOpenAPI.Sdks.PetStore
dotnet add package NSwag.MSBuild
dotnet add package System.ComponentModel.Annotations
dotnet add package Newtonsoft.Json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Safe the pet store OpenAPI JSON in the project we just created under the name &lt;code&gt;swagger.json&lt;/code&gt;. We also need a &lt;code&gt;nswag.json&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;runtime&amp;quot;: &amp;quot;NetCore31&amp;quot;,
    &amp;quot;documentGenerator&amp;quot;: {
        &amp;quot;fromDocument&amp;quot;: {
            &amp;quot;json&amp;quot;: &amp;quot;swagger.json&amp;quot;
        }
    },
    &amp;quot;codeGenerators&amp;quot;: {
        &amp;quot;openApiToCSharpClient&amp;quot;: {
            &amp;quot;output&amp;quot;: &amp;quot;Client.g.cs&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use an MSBuild task that calls NSwag. Update the &lt;code&gt;...Sdks.Petstore.csproj&lt;/code&gt; project file to look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;NSwag.MSBuild&amp;quot; Version=&amp;quot;13.11.1&amp;quot;&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;System.ComponentModel.Annotations&amp;quot; Version=&amp;quot;5.0.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;Target Name=&amp;quot;GenerateSdk&amp;quot; BeforeTargets=&amp;quot;Build&amp;quot;&amp;gt;
    &amp;lt;Exec Command=&amp;quot;$(NSwagExe_Core31) run nswag.json &amp;quot; /&amp;gt;
  &amp;lt;/Target&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After building the project, we have a file named &lt;code&gt;Client.g.cs&lt;/code&gt; containing everything we need to consume the PetStore API. We can use a console application to verify that we can make API calls.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new console --framework netcoreapp3.1 --output src/Client/ApiClient --name Kaylumah.GenerateCSharpClientForOpenAPI.Client.ApiClient
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example call we can make with our API looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace Kaylumah.GenerateCSharpClientForOpenAPI.Client.ApiClient
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var httpClient = new HttpClient();
            var apiClient = new MyNamespace.Client(httpClient);
            var result = await apiClient.GetInventoryAsync();
            Console.WriteLine(string.Join(&amp;quot;|&amp;quot;, result.Keys));
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="influence-created-output"&gt;&lt;a href="#influence-created-output"&gt;Influence created output&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have established that we have a working C# client for the PetStore API. Let us look at the generated result. We got DTO's for every definition in the definitions part of the specification. We also got a class named &lt;code&gt;Client&lt;/code&gt; with methods as &lt;code&gt;GetInventoryAsync&lt;/code&gt;. All the generated code in &lt;code&gt;Client.g.cs&lt;/code&gt; is part of the namespace &lt;code&gt;MyNamespace&lt;/code&gt;; this is not helpful if I wanted to create a project with many API clients.&lt;/p&gt;
&lt;p&gt;Two things influence the generated code. First, how you specify your fields has the most influence. For example, are your fields required, are they nullable and which kind of values are allowed. You cannot always influence this as sometimes you consume an external API; such is the case with our PetStore implementation. Luckily we can control the output by tuning values in our NSwag configuration. An eagle-eyed reader will have noticed that we are already doing this. Our nswag.json is responsible for the result. In this case, we are using the &lt;code&gt;output&lt;/code&gt; variable to control the generated file's name.&lt;/p&gt;
&lt;p&gt;We control the output by using an NSwag configuration document usually called &lt;code&gt;*.nswag&lt;/code&gt; or &lt;code&gt;nswag.json&lt;/code&gt;. It can be generated via NSwagStudio or manually. Over at the &lt;a href="https://github.com/RicoSuter/NSwag/wiki/NSwag-Configuration-Document" class="external"&gt;NSwag Wiki&lt;/a&gt; you can read all about it. It's outside of the scope of this article to go into all options, so I will demonstrate a couple of changes I like to make in my projects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can generate a nswag configuration file by running &lt;code&gt;&amp;lt;Exec Command=&amp;quot;$(NSwagExe_Core31) new&amp;quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I encourage you to take a look at the documentation to see all configuration options. Some options apply to every generator, and some only to C# clients. See the table below for links to every section. Every section describes the options and default values if applicable.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Settings&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/RicoSuter/NSwag/wiki/ClientGeneratorBaseSettings" class="external"&gt;ClientGeneratorBaseSettings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Common settings for all client code generators.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/RicoSuter/NSwag/wiki/CSharpGeneratorBaseSettings" class="external"&gt;CSharpGeneratorBaseSettings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Base settings for all C# code generators.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/RicoSuter/NSwag/wiki/CSharpClientGeneratorSettings" class="external"&gt;CSharpClientGeneratorSettings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Settings for C# clients.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you look closely at your build log, you see the following line &lt;code&gt;Executing file 'nswag.json' with variables ''...&lt;/code&gt;. So how do we pass variables to NSwag? Update the statement to &lt;code&gt;$(NSwagExe_Core31) run nswag.json /variables:Configuration=$(Configuration)&lt;/code&gt; . Here we define a variable named Configuration and assign it the MSBuild value for $(Configuration). If we build our project, the logline reads &lt;code&gt;Executing file 'nswag.json' with variables 'Configuration=Debug'...&lt;/code&gt;. You also have the option to supply default values in your NSwag configuration. This way, you don't see it as part of your build log, but it helps omit parts from the command.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;contractsNamespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Control the namespace of the generated code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;generateContractsOutput&lt;/code&gt; and &lt;code&gt;contractsOutputFilePath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Control seperation of contract and implementation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;generateClientInterfaces&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;create an interface&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exceptionClass&lt;/code&gt; and &lt;code&gt;className&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;control classnames&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operationGenerationMode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;how to create client for multiple endpoints&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After our modifications, our NSwag file looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;runtime&amp;quot;: &amp;quot;NetCore31&amp;quot;,
    &amp;quot;defaultVariables&amp;quot;: &amp;quot;Configuration=Debug&amp;quot;,
    &amp;quot;documentGenerator&amp;quot;: {
        &amp;quot;fromDocument&amp;quot;: {
            &amp;quot;json&amp;quot;: &amp;quot;$(InputDocument)&amp;quot;
        }
    },
    &amp;quot;codeGenerators&amp;quot;: {
        &amp;quot;openApiToCSharpClient&amp;quot;: {
            &amp;quot;generateClientInterfaces&amp;quot;: true,
            &amp;quot;exceptionClass&amp;quot;: &amp;quot;$(SdkName)ApiException&amp;quot;,
            &amp;quot;useBaseUrl&amp;quot;: true,
            &amp;quot;generateBaseUrlProperty&amp;quot;: true,
            &amp;quot;generateContractsOutput&amp;quot;: true,
            &amp;quot;contractsNamespace&amp;quot;: &amp;quot;$(SdkNamespace).Interface&amp;quot;,
            &amp;quot;contractsOutputFilePath&amp;quot;: &amp;quot;$(GeneratedContractFile)&amp;quot;,
            &amp;quot;className&amp;quot;: &amp;quot;$(SdkName)Client&amp;quot;,
            &amp;quot;operationGenerationMode&amp;quot;: &amp;quot;SingleClientFromOperationId&amp;quot;,
            &amp;quot;namespace&amp;quot;: &amp;quot;$(SdkNamespace).Service&amp;quot;,
            &amp;quot;output&amp;quot;: &amp;quot;$(GeneratedClientFile)&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To pass all the values to NSwag, we update our csproj file to look like this. For demonstration purposes, I show that the name of the MSBuild variable does not need to match the NSwag variable. Do take care that the variable names passed to NSwag need to match the name in nswag.json&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;NSwag.MSBuild&amp;quot; Version=&amp;quot;13.11.1&amp;quot;&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;System.ComponentModel.Annotations&amp;quot; Version=&amp;quot;5.0.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;Target Name=&amp;quot;GenerateSdk&amp;quot; BeforeTargets=&amp;quot;Build&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OpenAPIDocument&amp;gt;swagger.json&amp;lt;/OpenAPIDocument&amp;gt;
        &amp;lt;NSwagConfiguration&amp;gt;nswag.json&amp;lt;/NSwagConfiguration&amp;gt;

        &amp;lt;SdkNamespace&amp;gt;$(RootNamespace)&amp;lt;/SdkNamespace&amp;gt;
        &amp;lt;SdkName&amp;gt;PetStore&amp;lt;/SdkName&amp;gt;
        &amp;lt;GeneratedInterfaceFile&amp;gt;$(SdkName).Interface.g.cs&amp;lt;/GeneratedInterfaceFile&amp;gt;
        &amp;lt;GeneratedServiceFile&amp;gt;$(SdkName).Service.g.cs&amp;lt;/GeneratedServiceFile&amp;gt;

    &amp;lt;/PropertyGroup&amp;gt;
    &amp;lt;Error Text=&amp;quot;The OpenAPI document '$(OpenAPIDocument)' does not exists!&amp;quot; Condition=&amp;quot;!Exists('$(OpenAPIDocument)')&amp;quot; /&amp;gt;
    &amp;lt;Error Text=&amp;quot;The NSwag configuration '$(NSwagConfiguration)' does not exists!&amp;quot; Condition=&amp;quot;!Exists('$(NSwagConfiguration)')&amp;quot; /&amp;gt;
    &amp;lt;Exec Command=&amp;quot;$(NSwagExe_Core31) run $(NSwagConfiguration) /variables:Configuration=$(Configuration),InputDocument=$(OpenAPIDocument),SdkName=$(SdkName),SdkNamespace=$(SdkNamespace),GeneratedClientFile=$(GeneratedServiceFile),GeneratedContractFile=$(GeneratedInterfaceFile)&amp;quot; /&amp;gt;
  &amp;lt;/Target&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="generate-client-from-api-in-your-project"&gt;&lt;a href="#generate-client-from-api-in-your-project"&gt;Generate client from API in your project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our second version generates the SDK based on a .NET Core API project in our solution, which can be very useful if you want to provide the client in a NuGet package to other projects/teams in your organization. The project setup will be almost identical to our file-based setup.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new classlib --framework netstandard2.0 --output src/Sdks/FromNswagApi --name Kaylumah.GenerateCSharpClientForOpenAPI.Sdks.FromNswagApi
dotnet add package NSwag.MSBuild
dotnet add package System.ComponentModel.Annotations
dotnet add package Newtonsoft.Json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we are going to create an SDK we first need to generate our API project. We generate a webapi with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;dotnet new webapi --framework netcoreapp3.1 --output src/Apis/Nswag/WeatherForecastApi --name Kaylumah.GenerateCSharpClientForOpenAPI.Apis.Nswag.WeatherForecastApi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I am specifying the optional --framework option for creating the projects; this has two reasons. First, I prefer to use LTS versions of the Microsoft SDK and secondly, Microsoft made &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-5.0?view=aspnetcore-5.0#openapi-specification-on-by-default" class="external"&gt;changes&lt;/a&gt; to the webapi template in the NET5 SDK that makes it opt-out to use OpenAPI and defaults to Swashbuckle, which I don't want in this case.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;runtime&amp;quot;: &amp;quot;NetCore31&amp;quot;,
    &amp;quot;documentGenerator&amp;quot;: {
        &amp;quot;aspNetCoreToOpenApi&amp;quot;: {
            &amp;quot;project&amp;quot;: &amp;quot;../../Apis/Nswag/WeatherForecastApi/Kaylumah.GenerateCSharpClientForOpenAPI.Apis.Nswag.WeatherForecastApi.csproj&amp;quot;
        }
    },
    &amp;quot;codeGenerators&amp;quot;: {
        &amp;quot;openApiToCSharpClient&amp;quot;: {
            &amp;quot;generateClientInterfaces&amp;quot;: true,
            &amp;quot;exceptionClass&amp;quot;: &amp;quot;$(SdkName)ApiException&amp;quot;,
            &amp;quot;useBaseUrl&amp;quot;: true,
            &amp;quot;generateBaseUrlProperty&amp;quot;: true,
            &amp;quot;generateContractsOutput&amp;quot;: true,
            &amp;quot;contractsNamespace&amp;quot;: &amp;quot;$(SdkNamespace).Interface&amp;quot;,
            &amp;quot;contractsOutputFilePath&amp;quot;: &amp;quot;$(GeneratedContractFile)&amp;quot;,
            &amp;quot;className&amp;quot;: &amp;quot;$(SdkName)Client&amp;quot;,
            &amp;quot;operationGenerationMode&amp;quot;: &amp;quot;SingleClientFromOperationId&amp;quot;,
            &amp;quot;namespace&amp;quot;: &amp;quot;$(SdkNamespace).Service&amp;quot;,
            &amp;quot;output&amp;quot;: &amp;quot;$(GeneratedClientFile)&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like before, we need a &lt;code&gt;GenerateSdk&lt;/code&gt; target; the difference is that we don't have a &lt;code&gt;swagger.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Target Name=&amp;quot;GenerateSdk&amp;quot; BeforeTargets=&amp;quot;Build&amp;quot;&amp;gt;
&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;NSwagConfiguration&amp;gt;nswag.json&amp;lt;/NSwagConfiguration&amp;gt;

    &amp;lt;SdkNamespace&amp;gt;$(RootNamespace)&amp;lt;/SdkNamespace&amp;gt;
    &amp;lt;SdkName&amp;gt;Weather&amp;lt;/SdkName&amp;gt;
    &amp;lt;GeneratedInterfaceFile&amp;gt;$(SdkName).Interface.g.cs&amp;lt;/GeneratedInterfaceFile&amp;gt;
    &amp;lt;GeneratedServiceFile&amp;gt;$(SdkName).Service.g.cs&amp;lt;/GeneratedServiceFile&amp;gt;

&amp;lt;/PropertyGroup&amp;gt;
&amp;lt;Error Text=&amp;quot;The NSwag configuration '$(NSwagConfiguration)' does not exists!&amp;quot; Condition=&amp;quot;!Exists('$(NSwagConfiguration)')&amp;quot; /&amp;gt;
&amp;lt;Exec Command=&amp;quot;$(NSwagExe_Core31) run $(NSwagConfiguration) /variables:Configuration=$(Configuration),SdkName=$(SdkName),SdkNamespace=$(SdkNamespace),GeneratedClientFile=$(GeneratedServiceFile),GeneratedContractFile=$(GeneratedInterfaceFile)&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try to build our project now, we get an error.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;Microsoft (R) Build Engine version 16.9.0+57a23d249 for .NET
Copyright (C) Microsoft Corporation. All rights reserved.

  Determining projects to restore...
  All projects are up-to-date for restore.
  NSwag command line tool for .NET Core NetCore31, toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0))
  Visit http://NSwag.org for more information.
  NSwag bin directory: /Users/maxhamulyak/.nuget/packages/nswag.msbuild/13.11.1/tools/NetCore31
  
  Executing file 'nswag.json' with variables 'Configuration=Debug'...
  Launcher directory: /Users/maxhamulyak/.nuget/packages/nswag.msbuild/13.11.1/tools/NetCore31
  System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
   ---&amp;gt; System.InvalidOperationException: No service for type 'NSwag.Generation.IOpenApiDocumentGenerator' has been registered.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason behind this error is that the tool requires NSwag in the API project. To do this, we need to install the NSwag.AspNetCore package with &lt;code&gt;dotnet add package NSwag.AspNetCore&lt;/code&gt;.  The scope of this tutorial is not how to set up an API project with NSwag luckily, the &lt;a href="https://github.com/RicoSuter/NSwag#usage-in-c" class="external"&gt;guide&lt;/a&gt; is straightforward. We modify the &lt;code&gt;ConfigureServices&lt;/code&gt; method in Startup.cs with &lt;code&gt;services.AddOpenApiDocument();&lt;/code&gt; and we add &lt;code&gt;app.UseOpenApi();&lt;/code&gt; and &lt;code&gt;app.UseSwaggerUi3();&lt;/code&gt; to the &lt;code&gt;Configure&lt;/code&gt; method. We have an Open API specification for our WeatherForecast controller with these changes and can easily view and test it with Swagger UI.&lt;/p&gt;
&lt;p&gt;Now we can successfully generate a client for the WeatherForecastAPI!&lt;/p&gt;
&lt;h2 id="generate-client-from-swashbuckle-project"&gt;&lt;a href="#generate-client-from-swashbuckle-project"&gt;Generate client from Swashbuckle project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The third and final version I will look at is a combination of both previous versions. I already hinted at it in the last section, but Microsoft made some &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-5.0?view=aspnetcore-5.0#openapi-specification-on-by-default" class="external"&gt;changes&lt;/a&gt; to the template to generate them by default using Swashbuckle.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new classlib --framework netstandard2.0 --output src/Sdks/FromSwashbuckleApi --name Kaylumah.GenerateCSharpClientForOpenAPI.Sdks.FromSwashbuckleApi
dotnet add package NSwag.MSBuild
dotnet add package System.ComponentModel.Annotations
dotnet add package Newtonsoft.Json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like before, we also need a webapi project.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;dotnet new webapi --framework netcoreapp3.1 --output src/Apis/Swashbuckle/WeatherForecastApi --name Kaylumah.GenerateCSharpClientForOpenAPI.Apis.Swashbuckle.WeatherForecastApi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, we could launch the API project and browse to &lt;code&gt;https://localhost:5001/swagger/index.html&lt;/code&gt; and download the specification from there. But I will opt for automating the process with a &lt;a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore#swashbuckleaspnetcorecli" class="external"&gt;CLI&lt;/a&gt; provided as a dotnet tool by Swashbuckle.&lt;/p&gt;
&lt;p&gt;Since we are using netcoreapp3.1 we can make use of a local tool manifest.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;dotnet new tool-manifest
dotnet tool install --version 6.1.4 Swashbuckle.AspNetCore.Cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows us to run&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;swagger tofile --output [output] [startupassembly] [swaggerdoc]`. For example, in the FromSwashbuckleApi folder we would run `dotnet swagger tofile --output swagger.json ../../Apis/Swashbuckle/WeatherForecastApi/bin/Debug/netcoreapp3.1/Kaylumah.GenerateCSharpClientForOpenAPI.Apis.Swashbuckle.WeatherForecastApi.dll v1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the moment, this returns an error if you target a netcoreapp3.1 project when using a net5 SDK. This &lt;a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/2006" class="external"&gt;issue&lt;/a&gt; describes a change in 6.x of the tool. A workaround for this is using a global.json file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;sdk&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;3.1.406&amp;quot;,
        &amp;quot;rollForward&amp;quot;: &amp;quot;latestPatch&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the NSwag version, we still need to add Swashbuckle to the webapi. Luckily just as with NSwag the &lt;a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore#getting-started" class="external"&gt;guide&lt;/a&gt; is straightforward.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Target Name=&amp;quot;GenerateOpenAPI&amp;quot; BeforeTargets=&amp;quot;GenerateSdk&amp;quot;&amp;gt;
  &amp;lt;Exec Command=&amp;quot;dotnet swagger tofile --output swagger.json ../../Apis/Swashbuckle/WeatherForecastApi/bin/Debug/netcoreapp3.1/Kaylumah.GenerateCSharpClientForOpenAPI.Apis.Swashbuckle.WeatherForecastApi.dll v1&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;

&amp;lt;Target Name=&amp;quot;GenerateSdk&amp;quot; BeforeTargets=&amp;quot;Build&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OpenAPIDocument&amp;gt;swagger.json&amp;lt;/OpenAPIDocument&amp;gt;
    &amp;lt;NSwagConfiguration&amp;gt;nswag.json&amp;lt;/NSwagConfiguration&amp;gt;

    &amp;lt;SdkNamespace&amp;gt;$(RootNamespace)&amp;lt;/SdkNamespace&amp;gt;
    &amp;lt;SdkName&amp;gt;Weather&amp;lt;/SdkName&amp;gt;
    &amp;lt;GeneratedInterfaceFile&amp;gt;$(SdkName).Interface.g.cs&amp;lt;/GeneratedInterfaceFile&amp;gt;
    &amp;lt;GeneratedServiceFile&amp;gt;$(SdkName).Service.g.cs&amp;lt;/GeneratedServiceFile&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;Error Text=&amp;quot;The OpenAPI document '$(OpenAPIDocument)' does not exists!&amp;quot; Condition=&amp;quot;!Exists('$(OpenAPIDocument)')&amp;quot; /&amp;gt;
  &amp;lt;Error Text=&amp;quot;The NSwag configuration '$(NSwagConfiguration)' does not exists!&amp;quot; Condition=&amp;quot;!Exists('$(NSwagConfiguration)')&amp;quot; /&amp;gt;
  &amp;lt;Exec Command=&amp;quot;$(NSwagExe_Core31) run $(NSwagConfiguration) /variables:Configuration=$(Configuration),InputDocument=$(OpenAPIDocument),SdkName=$(SdkName),SdkNamespace=$(SdkNamespace),GeneratedClientFile=$(GeneratedServiceFile),GeneratedContractFile=$(GeneratedInterfaceFile)&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we generated a second version of our Weather API, let's quickly compare the two.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;// Swashbuckle
[System.CodeDom.Compiler.GeneratedCode(&amp;quot;NSwag&amp;quot;, &amp;quot;13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0))&amp;quot;)]
public partial interface IWeatherClient
{
    /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
    /// &amp;lt;exception cref=&amp;quot;WeatherApiException&amp;quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
    System.Threading.Tasks.Task&amp;lt;System.Collections.Generic.ICollection&amp;lt;WeatherForecast&amp;gt;&amp;gt; WeatherForecastAsync();

    /// &amp;lt;param name=&amp;quot;cancellationToken&amp;quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
    /// &amp;lt;exception cref=&amp;quot;WeatherApiException&amp;quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
    System.Threading.Tasks.Task&amp;lt;System.Collections.Generic.ICollection&amp;lt;WeatherForecast&amp;gt;&amp;gt; WeatherForecastAsync(System.Threading.CancellationToken cancellationToken);

}

// NSwag
[System.CodeDom.Compiler.GeneratedCode(&amp;quot;NSwag&amp;quot;, &amp;quot;13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0))&amp;quot;)]
public partial interface IWeatherClient
{
    /// &amp;lt;exception cref=&amp;quot;WeatherApiException&amp;quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
    System.Threading.Tasks.Task&amp;lt;System.Collections.Generic.ICollection&amp;lt;WeatherForecast&amp;gt;&amp;gt; WeatherForecast_GetAsync();

    /// &amp;lt;param name=&amp;quot;cancellationToken&amp;quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
    /// &amp;lt;exception cref=&amp;quot;WeatherApiException&amp;quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
    System.Threading.Tasks.Task&amp;lt;System.Collections.Generic.ICollection&amp;lt;WeatherForecast&amp;gt;&amp;gt; WeatherForecast_GetAsync(System.Threading.CancellationToken cancellationToken);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Funnily enough, even in a specification as small as these, there can already be differences!&lt;/p&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we have seen, there are multiple ways to generate a client by using &lt;code&gt;NSwag.MSBuild&lt;/code&gt;.
If I am writing an OpenAPI specification, I prefer the syntax of Swashbuckle for several things like API versioning. That, of course, is a personal preference, but since Microsoft now also offers Swashbuckle as a default, it is nice to know we can make Swashbuckle and NSwag play nice together. How I configure my API with OpenAPI, API Versioning, ProblemDetails will be part of a future blog post.&lt;/p&gt;
&lt;p&gt;So, where do we go from here? I did not mention it in the article, but in every generated client, we need to inject &lt;code&gt;System.Net.HttpClient&lt;/code&gt;, which means we can combine it with &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests" class="external"&gt;HttpClientFactory&lt;/a&gt; and all the options it provides. Alas, that is also a topic for another day.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/GenerateCSharpClientForOpenAPI" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="sources"&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/RicoSuter/NSwag/wiki/" class="external"&gt;NSwag GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" class="external"&gt;Swashbuckle GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/04/11/an-approach-to-writing-mocks.html</id>
    <title type="text">Experiment with Moq, an approach to writing mocks</title>
    <summary type="text">An experiment to create reusable mocks in my testing code</summary>
    <published>DateTimeOffset_11</published>
    <updated>DateTimeOffset_11</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/04/11/an-approach-to-writing-mocks.html" />
    <category term="C#" />
    <category term="Moq" />
    <category term="Testing" />
    <category term="Xunit" />
    <content type="html">&lt;p&gt;Recently I was looking into a new way to use mocks in my unit tests. My framework of choice to write unit tests is XUnit, whereas I use Moq to create Mocks. The theory behind Moq will still apply if you use a different testing framework, and perhaps some of the things I will demonstrate will be possible in other mocking frameworks.&lt;/p&gt;
&lt;p&gt;In many projects, I find that we look at essential things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How should the architecture look?&lt;/li&gt;
&lt;li&gt;Which design patterns should we use?&lt;/li&gt;
&lt;li&gt;Making sure we follow the SOLID principles.&lt;/li&gt;
&lt;li&gt;How should we structure our code base?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the same time, I find that we do not give our tests the same amount of love.&lt;/p&gt;
&lt;p&gt;Wouter Roos, a colleague of mine over at ilionx, gave me this idea, and after experimenting a bit with it, I like it so much that I decided to blog about it. I tried hard to find other articles about it but did not find a post doing something similar. It wanted to make sure that the idea would also transfer to other aspects like how to mock &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, that I stumbled upon &lt;a href="https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq" class="external"&gt;an excellent article&lt;/a&gt; by Adam Storr. Coincidentally Adam &lt;a href="https://exceptionnotfound.net/using-moq-to-create-fluent-test-classes-in-asp-net-core/" class="external"&gt;linked&lt;/a&gt; to a part in a series by Matthew Jones about Fluent Mocks. I have been reading articles written by  Matthew for some time now but missed this one. Matthews approach and, for that matter, Adam's proposal on testing ILogger are not quite the same as what I will propose, but I think these ideas will complement each other nicely. Funnily enough, I have had Adam's idea to create extensions methods on &lt;code&gt;Mock&amp;lt;T&amp;gt;&lt;/code&gt; before when setting up a mock filesystem for use in unit tests. However, I can extend on that premise with what I learned from Wouter and make it even better.&lt;/p&gt;
&lt;h2 id="system-setup"&gt;&lt;a href="#system-setup"&gt;System Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bear with me for a little while whilst we set up our demo scenario. In our architecture, we have defined three components. We have two resource access components and one manager. The manager is used to orchestrate our business code, and the resource access components interact with a resource, for example, a database.&lt;/p&gt;
&lt;!-- 
@startuml
title Architecture Component Diagram

component [Site\nManager] as Site
component [Article\nAccess] as Article
component [Author\nAccess] as Author


Site - -&gt; Article
Site - -&gt; Author
@enduml
 --&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210411/approach-to-writing-mocks/architecture.png" width="323" height="226" alt="Architecture Diagram for Blog Platform Scenario" /&gt;&lt;/p&gt;
&lt;p&gt;Since I am writing this blog post, what better example than a use case for a blogging platform. Imagine a platform where users can create and share their content. But you can only successfully start posts after you verified your account. In a sequence diagram, it might look something like this.&lt;/p&gt;
&lt;!-- 
@startuml
title UC: Create Article
autonumber "&lt;b&gt;[000]"

SiteManager -&gt; AuthorAccess: RetrieveAuthors
AuthorAccess - -&gt; SiteManager: RetrieveAuthorsResponse
SiteManager -&gt; SiteManager: is valid author?

SiteManager -&gt; ArticleAccess: CreateArticle
ArticleAccess - -&gt; SiteManager: CreateArticleResponse
@enduml
 --&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210411/approach-to-writing-mocks/sequence.png" width="487" height="297" alt="Sequence Diagram for Blog Platform Scenario" /&gt;&lt;/p&gt;
&lt;p&gt;I am going to use the dotnet CLI to create my project structure.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet new sln
dotnet new classlib --name Kaylumah.AdventuresWithMock.Access.Article.Interface --output src/Components/Access/Article/Interface --framework netstandard2.1
dotnet new classlib --name Kaylumah.AdventuresWithMock.Access.Article.Service --output src/Components/Access/Article/Service --framework netstandard2.1
dotnet new classlib --name Kaylumah.AdventuresWithMock.Access.Author.Interface --output src/Components/Access/Author/Interface --framework netstandard2.1
dotnet new classlib --name Kaylumah.AdventuresWithMock.Access.Author.Service --output src/Components/Access/Author/Service --framework netstandard2.1
dotnet new classlib --name Kaylumah.AdventuresWithMock.Manager.Site.Interface --output src/Components/Manager/Site/Interface --framework netstandard2.1
dotnet new classlib --name Kaylumah.AdventuresWithMock.Manager.Site.Service --output src/Components/Manager/Site/Service --framework netstandard2.1
dotnet new xunit --name Test.Unit --output test/Unit --framework netcoreapp3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- Command to print file tree --&gt;
&lt;!-- ls -aR | grep ":$" | perl -pe 's/:$//;s/[^-][^\/]*\//    /g;s/^    (\S)/└── \1/;s/(^    |    (?= ))/│   /g;s/    (\S)/└── \1/' --&gt;
&lt;pre&gt;&lt;code class="language-output"&gt;└── src
│   └── Components
│   │   └── Access
│   │   │   └── Article
│   │   │   │   └── Interface
│   │   │   │   └── Service
│   │   │   └── Author
│   │   │   │   └── Interface
│   │   │   │   └── Service
│   │   └── Manager
│   │   │   └── Site
│   │   │   │   └── Interface
│   │   │   │   └── Service
└── test
│   └── Unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went fine, you should have the following directory structure on disk. I like to split my components into an interface definition project and an actual implementation project. This split, of course, means that every &lt;code&gt;.Service&lt;/code&gt; project needs to reference the corresponding &lt;code&gt;.Interface&lt;/code&gt; project via &lt;code&gt;ProjectReference&lt;/code&gt;. Because of our architecture, the SiteManager service needs to reference the interface projects of both access services. Finally, our unit test project needs to reference the service projects so we can test them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may be wondering why I specified &lt;code&gt;--framework&lt;/code&gt; after each dotnet new command; this is because it would otherwise default to &lt;code&gt;NET5.0&lt;/code&gt;, which would be fine for a blog post like this, but since NET5 is not LTS, I mostly abstain from using it in my projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will not include every little DTO as part of this article since those classes will be available as part of &lt;a href="https://github.com/kaylumah/AdventuresWithMock" class="external"&gt;the source code&lt;/a&gt; in the end. For now, assume we have created our implementation to look like this.&lt;/p&gt;
&lt;p&gt;Our Article Access&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using System.Threading.Tasks;
using Kaylumah.AdventuresWithMock.Access.Article.Interface;

namespace Kaylumah.AdventuresWithMock.Access.Article.Service
{
    public class ArticleAccess : IArticleAccess
    {
        public Task&amp;lt;CreateArticlesResponse&amp;gt; CreateArticles(CreateArticlesRequest createArticlesRequest)
        {
            throw new NotImplementedException();
        }

        public Task DeleteArticles(DeleteArticlesRequest deleteArticlesRequest)
        {
            throw new NotImplementedException();
        }

        public Task&amp;lt;FilterArticleResponse&amp;gt; FilterArticles(FilterArticleCriteria filterArticleCriteria = null)
        {
            throw new NotImplementedException();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our Author Access&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using System.Threading.Tasks;
using Kaylumah.AdventuresWithMock.Access.Author.Interface;

namespace Kaylumah.AdventuresWithMock.Access.Author.Service
{
    public class AuthorAccess : IAuthorAccess
    {
        public Task&amp;lt;FilterAuthorResponse&amp;gt; FilterAuthors(FilterAuthorCriteria filterAuthorCriteria = null)
        {
            throw new NotImplementedException();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, our Site Manager, which should match our sequence diagram, looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System.Linq;
using System.Threading.Tasks;
using Kaylumah.AdventuresWithMock.Access.Article.Interface;
using Kaylumah.AdventuresWithMock.Access.Author.Interface;
using Kaylumah.AdventuresWithMock.Manager.Site.Interface;

namespace Kaylumah.AdventuresWithMock.Manager.Site.Service
{
    public class SiteManager : ISiteManager
    {

        private readonly IArticleAccess _articleAccess;
        private readonly IAuthorAccess _authorAccess;

        public SiteManager(IArticleAccess articleAccess, IAuthorAccess authorAccess)
        {
            _articleAccess = articleAccess;
            _authorAccess = authorAccess;
        }

        public async Task CreateArticle(Interface.CreateArticleRequest createArticleRequest)
        {
            // Hardcoded for now, would probably come from JWT user claim.
            var authorId = 666;

            var authorsResponse = await _authorAccess.FilterAuthors(new FilterAuthorCriteria {
                AuthorIds = new int[] { authorId }
            });

            var author = authorsResponse.Authors.SingleOrDefault(x =&amp;gt; x.Id.Equals(authorId));

            if (author == null)
            {
                return;
            }

            if (!author.Verfied)
            {
                return;
            }

            var article = new Access.Article.Interface.CreateArticleRequest
            { 
                AuthorId = authorId,
                Title = createArticleRequest.Title,
                Description = createArticleRequest.Content
            };

            var response = await _articleAccess.CreateArticles(new CreateArticlesRequest {
                CreateArticleRequests = new Access.Article.Interface.CreateArticleRequest[] {
                    article
                }
            });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait just a minute! You forgot to implement the access components and only gave us the manager one. I did not ;-) It is to prove a point. Since we are going to mock our dependencies, we don't use the actual implementation.&lt;/p&gt;
&lt;p&gt;Thank you for bearing with me; now that we have all that in place, we can finally get to the heart of the matter and start our adventure with Mock.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have yet to explain the reason behind the article. Let us look at how we might test this code traditionally with the following snippet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_SiteManager_CreateArticle_Traditionally()
{
    // Arange
    var authorAccessMock = new Mock&amp;lt;IAuthorAccess&amp;gt;();
    authorAccessMock.Setup(x =&amp;gt; x.FilterAuthors(It.Is&amp;lt;FilterAuthorCriteria&amp;gt;(p =&amp;gt; p.AuthorIds.Contains(666)))).ReturnsAsync(new FilterAuthorResponse {
        Authors = new Author[] {
            new Author {
                Id = 666,
                DisplayName = &amp;quot;Max&amp;quot;,
                Verfied = true
            }
        }
    });
    var articleAccessMock = new Mock&amp;lt;IArticleAccess&amp;gt;();
    articleAccessMock.Setup(x =&amp;gt; x.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;())).ReturnsAsync(new CreateArticlesResponse {
        Articles = new Article[] {
            new Article {
                Id = 1,
                AuthorId = 666,
                Title = &amp;quot;...&amp;quot;,
                Description = &amp;quot;...&amp;quot;
            }
        }
    });
    ISiteManager sut = new SiteManager(articleAccessMock.Object, authorAccessMock.Object);

    // Act
    var request = new Kaylumah.AdventuresWithMock.Manager.Site.Interface.CreateArticleRequest { 
        Title = &amp;quot;Pretty Title&amp;quot;,
        Content = &amp;quot;# AdventuresWithMock ...&amp;quot;
    };
    await sut.CreateArticle(request);

    // Assert
    authorAccessMock.Verify(x =&amp;gt; x.FilterAuthors(It.IsAny&amp;lt;FilterAuthorCriteria&amp;gt;()), Times.Once);
    articleAccessMock.Verify(x =&amp;gt; x.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;()), Times.Once);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is a lot of code to test a simple scenario. It is in its current form, even four lines longer than the code under test. Even worse, it's primarily boilerplate to set up the test. I often find myself repeating similar code for every test. Which is a violation of the &amp;quot;Don't Repeat Yourself&amp;quot; principle. So I am going to propose an alternative set up to my mock code. All you need to do is create a subclass from &lt;code&gt;Mock&amp;lt;T&amp;gt;&lt;/code&gt; for the system you want to stub, and you are good to go.&lt;/p&gt;
&lt;h2 id="mocking-data-access"&gt;&lt;a href="#mocking-data-access"&gt;Mocking Data Access&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We start with the AuthorsAccessMock. We will use our constructor to pass a &lt;code&gt;List&amp;lt;Author&amp;gt;&lt;/code&gt; and use Moq's &lt;code&gt;Setup&lt;/code&gt; method to return the internal state. Yes, that's right, because our mock is now a class we are stateful, this means we can now track state and changes on our mocks without relying on the &lt;code&gt;Verify&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System.Collections.Generic;
using System.Linq;
using Kaylumah.AdventuresWithMock.Access.Author.Interface;
using Moq;

namespace Test.Unit.Mocks
{
    public class AuthorAccessMock : Mock&amp;lt;IAuthorAccess&amp;gt;
    {
        public List&amp;lt;Author&amp;gt; Authors { get; }
        public AuthorAccessMock(List&amp;lt;Author&amp;gt; authors)
        {
            Authors = authors;

            Setup(x =&amp;gt; x.FilterAuthors(It.IsAny&amp;lt;FilterAuthorCriteria&amp;gt;()))
                .ReturnsAsync((FilterAuthorCriteria criteria) =&amp;gt; {

                    IQueryable&amp;lt;Author&amp;gt; result = Authors.AsQueryable();
                    if (criteria != null)
                    {
                        result = result.Where(x =&amp;gt; criteria.AuthorIds.Contains(x.Id));
                    }

                    return new FilterAuthorResponse {
                        Authors = result.ToArray()
                    };
                });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how does this impact our test? We create a new AuthorAccessMock and pass it to our system under test. Keep in mind this is still a &lt;code&gt;Mock&amp;lt;T&amp;gt;&lt;/code&gt;, so to give it, we do &lt;code&gt;authorAccessMock.Object&lt;/code&gt;. Our new setup drastically decreases the setup code in my test, and at the same time, it increases the reusability of my mocks&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_SiteManager_CreateArticle_RepoMocksDemo1()
{
    // Arange
    var authorAccessMock = new AuthorAccessMock(new List&amp;lt;Author&amp;gt; {
        new Author { Id = 666, DisplayName = &amp;quot;Max&amp;quot;, Verfied = false }
    });
    var articleAccessMock = new ArticleAccessMock();
    ISiteManager sut = new SiteManager(articleAccessMock.Object, authorAccessMock.Object);

    // Act
    var request = new Kaylumah.AdventuresWithMock.Manager.Site.Interface.CreateArticleRequest
    {
        Title = &amp;quot;Pretty Title&amp;quot;,
        Content = &amp;quot;# AdventuresWithMock ...&amp;quot;
    };
    await sut.CreateArticle(request);

    // Assert
    authorAccessMock.Verify(x =&amp;gt; x.FilterAuthors(It.IsAny&amp;lt;FilterAuthorCriteria&amp;gt;()), Times.Once);
    articleAccessMock.Verify(x =&amp;gt; x.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;()), Times.Never);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our AuthorAccess was a bit boring. Let's extend on the stateful premise by building our ArticleAccessMock, which looks a lot like a CRUD repository. There are a couple of things in the following snippet I like to point out.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I created another representation of our Article class, and this is so that our mock implementation does a soft delete. Since we are stateful, we can then make tests on that premise.&lt;/li&gt;
&lt;li&gt;I also track the requests DTOs to my service using Moq's Callback mechanism. This way, I can make assertions regarding the actual input request.&lt;/li&gt;
&lt;li&gt;I partially moved away from constructor set up to demonstrate this pattern nicely complements Matthew's FluentMocks pattern.&lt;/li&gt;
&lt;li&gt;Lastly, I also added a custom verify method, which takes a func as an argument; this makes it possible to write any validation I can imagine against my internal state.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Kaylumah.AdventuresWithMock.Access.Article.Interface;
using Moq;

namespace Test.Unit.Mocks
{
    public class ArticleAccessMock : Mock&amp;lt;IArticleAccess&amp;gt;
    {
        public class ArticleMock
        {
            public int Id { get;set; }
            public int AuthorId { get;set; }
            public string Title { get;set; }
            public string Content { get;set; }
            public bool Removed { get;set; }
        }

        public List&amp;lt;CreateArticlesRequest&amp;gt; CreateArticlesRequests { get; } = new List&amp;lt;CreateArticlesRequest&amp;gt;();
        public List&amp;lt;DeleteArticlesRequest&amp;gt; DeleteArticlesRequests { get; } = new List&amp;lt;DeleteArticlesRequest&amp;gt;();

        private List&amp;lt;ArticleMock&amp;gt; _articleState = new List&amp;lt;ArticleMock&amp;gt;();
        private int _numberOfArticlesBeforeCreate = 0;

        public ArticleAccessMock()
        {
            Setup(access =&amp;gt; access.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;()))
                .Callback&amp;lt;CreateArticlesRequest&amp;gt;(request =&amp;gt; {
                    CreateArticlesRequests.Add(request);
                    _numberOfArticlesBeforeCreate = _articleState.Count;
                    var nextId = _numberOfArticlesBeforeCreate + 1;
                    foreach(var createArticleRequest in request.CreateArticleRequests)
                    {
                        _articleState.Add(new ArticleMock {
                            Id = nextId,
                            AuthorId = createArticleRequest.AuthorId,
                            Content = createArticleRequest.Description,
                            Title = createArticleRequest.Title,
                            Removed = false
                        });
                        nextId++;
                    }
                })
                .ReturnsAsync(() =&amp;gt; new CreateArticlesResponse {
                    Articles = _articleState
                    .Skip(_numberOfArticlesBeforeCreate)
                    .Select(x =&amp;gt; new Article
                    {
                        Id = x.Id,
                        AuthorId = x.AuthorId,
                        Description = x.Content,
                        Title = x.Title
                    })
                    .ToArray()
                });
            
            Setup(access =&amp;gt; access.DeleteArticles(It.IsAny&amp;lt;DeleteArticlesRequest&amp;gt;()))
                .Callback&amp;lt;DeleteArticlesRequest&amp;gt;(deleteArticlesRequest =&amp;gt; {
                    DeleteArticlesRequests.Add(deleteArticlesRequest);
                    foreach(var deleteArticleRequests in deleteArticlesRequest.DeleteArticleRequests)
                    {
                        var existing = _articleState.SingleOrDefault(article =&amp;gt; deleteArticleRequests.ArticleId == article.Id);
                        if (existing != null)
                        {
                            existing.Removed = true;
                        }
                    }
                });
        }

        public ArticleAccessMock SetupFilterArticles(List&amp;lt;Article&amp;gt; articles)
        {
            _articleState = articles.Select(x =&amp;gt; new ArticleMock {
                Id = x.Id,
                AuthorId = x.AuthorId,
                Content = x.Description,
                Title = x.Title,
                Removed = false
            }).ToList();

            Setup(x =&amp;gt; x.FilterArticles(It.IsAny&amp;lt;FilterArticleCriteria&amp;gt;()))
                .ReturnsAsync((FilterArticleCriteria criteria) =&amp;gt; {
                    IQueryable&amp;lt;ArticleMock&amp;gt; result = _articleState.AsQueryable();
                    if (criteria != null)
                    {
                        result = result.Where(x =&amp;gt; criteria.ArticleIds.Contains(x.Id));
                    }
                    return new FilterArticleResponse {
                        Articles = result
                            .Where(x =&amp;gt; !x.Removed)
                            .Select(x =&amp;gt; new Article {
                                Id = x.Id,
                                AuthorId = x.AuthorId,
                                Description = x.Content,
                                Title = x.Title
                            })
                            .ToArray()
                    };
                });

            return this;
        }

        public bool VerifyArticles(Func&amp;lt;List&amp;lt;ArticleMock&amp;gt;, bool&amp;gt; predicate)
        {
           return predicate(_articleState);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I usually would not write a test for my Moq code. The following snippet's purpose is to demonstrate the statefulness of our mocks. On the other hand, our mocks are now lightweight implementations of service, so why not test them!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_ArticleAccessMock_StatefullDemo1()
{
    // Arange
    var articleAccessMock = new ArticleAccessMock()
        .SetupFilterArticles(new List&amp;lt;Article&amp;gt; {});
    var sut = articleAccessMock.Object;

    // Act
    var initialResponse = await sut.FilterArticles();
    var createResponse = await sut.CreateArticles(new CreateArticlesRequest {
        CreateArticleRequests = new CreateArticleRequest[] {
            new CreateArticleRequest {
                AuthorId = 666,
                Description = &amp;quot;1&amp;quot;,
                Title = &amp;quot;1&amp;quot;
            },
            new CreateArticleRequest {
                AuthorId = 666,
                Description = &amp;quot;2&amp;quot;,
                Title = &amp;quot;2&amp;quot;
            }
        }
    });

    var afterAddResponse = await sut.FilterArticles();

    await sut.DeleteArticles(new DeleteArticlesRequest {
        DeleteArticleRequests = new DeleteArticleRequest[] {
            new DeleteArticleRequest {
                ArticleId = createResponse.Articles.First().Id
            }
        }
    });

    var afterRemoveResponse = await sut.FilterArticles();


    // Assert
    initialResponse.Should().NotBeNull();
    initialResponse.Articles.Count().Should().Be(0, &amp;quot;No articles initially&amp;quot;);

    afterAddResponse.Should().NotBeNull();
    afterAddResponse.Articles.Count().Should().Be(2, &amp;quot;We created two articles&amp;quot;);

    afterRemoveResponse.Should().NotBeNull();
    afterRemoveResponse.Articles.Count().Should().Be(1, &amp;quot;There is only one article left&amp;quot;);

    // Verify result with predicate logic instead if Mock.Verify()
    articleAccessMock.VerifyArticles(articles =&amp;gt; articles.Count(x =&amp;gt; x.Removed) == 1).Should().BeTrue();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might ask yourself; Max, if you use a constructor to set up our mock, how would I deviate in my tests if I want to test error scenarios, for example? In that case, we might as well go full circle with the Fluent Mock approach. You could do it like the following snippet. You then choose to use the 'default' stateful mock or call the Setup methods you want to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public ArticleAccessMock MakeStateful(List&amp;lt;Article&amp;gt; articles)
{
    return this
        .SetupFilterArticles(articles)
        .SetupDeleteArticles()
        .SetupCreateArticles();
}

public ArticleAccessMock SetupDeleteArticles() { /* ... */ }
public ArticleAccessMock SetupCreateArticles() { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="mocking-ilogger"&gt;&lt;a href="#mocking-ilogger"&gt;Mocking ILogger&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did say that Adam's article also inspired me. So let us see how ILogger can implement stateful mocks. First, a quick reminder of what we are going to Mock. The &lt;a href="https://github.com/dotnet/runtime/blob/3cbbadee12cc95bd62c70786d5408a2277a21e0a/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/ILogger.cs#L23" class="external"&gt;ILogger interface&lt;/a&gt; looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;/// &amp;lt;summary&amp;gt;
/// Writes a log entry.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;logLevel&amp;quot;&amp;gt;Entry will be written on this level.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;eventId&amp;quot;&amp;gt;Id of the event.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;state&amp;quot;&amp;gt;The entry to be written. Can be also an object.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;exception&amp;quot;&amp;gt;The exception related to this entry.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;formatter&amp;quot;&amp;gt;Function to create a &amp;lt;see cref=&amp;quot;string&amp;quot;/&amp;gt; message of the &amp;lt;paramref name=&amp;quot;state&amp;quot;/&amp;gt; and &amp;lt;paramref name=&amp;quot;exception&amp;quot;/&amp;gt;.&amp;lt;/param&amp;gt;
/// &amp;lt;typeparam name=&amp;quot;TState&amp;quot;&amp;gt;The type of the object to be written.&amp;lt;/typeparam&amp;gt;
void Log&amp;lt;TState&amp;gt;(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func&amp;lt;TState, Exception?, string&amp;gt; formatter);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can not express how happy I am that I don't need to call the Logger like that. Luckily Microsoft offers a different extension method for every occasion. Unfortunately, Moq cannot test extension methods. Luckily for me, Adam figured out how to test it.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;LoggerMock&amp;lt;T&amp;gt;&lt;/code&gt; class that implements &lt;code&gt;Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; we are not going to add something custom to it just yet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using Microsoft.Extensions.Logging;
using Moq;

namespace Test.Unit.Mocks
{
    public class LoggerMock&amp;lt;T&amp;gt; : Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt;
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the same time, we will use the final result from Adam's post as a helper method to test our logging.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt; VerifyLogging&amp;lt;T&amp;gt;(this Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt; logger, string expectedMessage, LogLevel expectedLogLevel = LogLevel.Debug, Times? times = null)
{
    times ??= Times.Once();

    Func&amp;lt;object, Type, bool&amp;gt; state = (v, t) =&amp;gt; v.ToString().CompareTo(expectedMessage) == 0;

    logger.Verify(
        x =&amp;gt; x.Log(
            It.Is&amp;lt;LogLevel&amp;gt;(l =&amp;gt; l == expectedLogLevel),
            It.IsAny&amp;lt;EventId&amp;gt;(),
            It.Is&amp;lt;It.IsAnyType&amp;gt;((v, t) =&amp;gt; state(v, t)),
            It.IsAny&amp;lt;Exception&amp;gt;(),
            It.Is&amp;lt;Func&amp;lt;It.IsAnyType, Exception, string&amp;gt;&amp;gt;((v, t) =&amp;gt; true)), (Times)times);

    return logger;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that in place, let's update the manager to log.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public class SiteManager : ISiteManager
{

    // ...
    
    private readonly ILogger _logger;

    public SiteManager(IArticleAccess articleAccess, IAuthorAccess authorAccess, ILogger&amp;lt;SiteManager&amp;gt; logger)
    {
        // ...
        _logger = logger;
    }

    public async Task CreateArticle(Interface.CreateArticleRequest createArticleRequest)
    {
        // Hardcoded for now, would probably come from JWT user claim.
        var authorId = 666;

        /// ...

        if (author == null)
        {
            _logger.LogWarning($&amp;quot;No author found for {authorId}&amp;quot;);
            return;
        }

        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To put it to the test:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_SiteManager_CreateArticle_TestLogging()
{
    // Arange
    var loggerMock = new LoggerMock&amp;lt;SiteManager&amp;gt;();
    var authorAccessMock = new AuthorAccessMock(new List&amp;lt;Author&amp;gt; {});
    var articleAccessMock = new ArticleAccessMock();
    ISiteManager sut = new SiteManager(articleAccessMock.Object, authorAccessMock.Object, loggerMock.Object);

    // Act
    var request = new Kaylumah.AdventuresWithMock.Manager.Site.Interface.CreateArticleRequest
    {
        Title = &amp;quot;Pretty Title&amp;quot;,
        Content = &amp;quot;# AdventuresWithMock ...&amp;quot;
    };
    await sut.CreateArticle(request);

    // Assert
    authorAccessMock.Verify(x =&amp;gt; x.FilterAuthors(It.IsAny&amp;lt;FilterAuthorCriteria&amp;gt;()), Times.Once);
    articleAccessMock.Verify(x =&amp;gt; x.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;()), Times.Never);
    loggerMock.VerifyLogging(&amp;quot;No author found for 666&amp;quot;, Microsoft.Extensions.Logging.LogLevel.Warning);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait, did that just work on the first try? Did Adam's extension method not work on &lt;code&gt;Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;? Remember subclassing is an &lt;code&gt;is a&lt;/code&gt; relation ship which means that our MockLogger qualifies for this extension method.&lt;/p&gt;
&lt;p&gt;What would happen if have a lot of traffic and log thousands upon thousands of requests. In that case, we can move to an alternative for methods such as &lt;code&gt;LogInformation&lt;/code&gt;. For these scenarios, you can use &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/loggermessage?view=aspnetcore-5.0" class="external"&gt;LoggerMessage for high-performance logging&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using Microsoft.Extensions.Logging;

namespace Kaylumah.AdventuresWithMock.Manager.Site.Service
{
    public static class LoggerExtensions
    {
        private static readonly Action&amp;lt;ILogger, int, Exception&amp;gt; _authorNotVerfied =
            LoggerMessage.Define&amp;lt;int&amp;gt;(
                LogLevel.Information,
                EventIds.AuthorNotVerfied,
                &amp;quot;Author with Id {AuthorId} is not verfied!&amp;quot;
            );

        public static void LogAuthorNotVerfied(this ILogger logger, int authorId)
        {
            _authorNotVerfied(logger, authorId, null);
        }

        private static class EventIds
        {
            public static readonly EventId AuthorNotVerfied = new(100, nameof(AuthorNotVerfied));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[Fact]
public async Task Test_SiteManager_CreateArticle_TestLoggingExtensionMethod()
{
    // Arange
    var loggerMock = new LoggerMock&amp;lt;SiteManager&amp;gt;();
    var authorAccessMock = new AuthorAccessMock(new List&amp;lt;Author&amp;gt; {
        new Author { Id = 666, DisplayName = &amp;quot;Max&amp;quot;, Verfied = false }
    });
    var articleAccessMock = new ArticleAccessMock();
    ISiteManager sut = new SiteManager(articleAccessMock.Object, authorAccessMock.Object, loggerMock.Object);

    // Act
    var request = new Kaylumah.AdventuresWithMock.Manager.Site.Interface.CreateArticleRequest
    {
        Title = &amp;quot;Pretty Title&amp;quot;,
        Content = &amp;quot;# AdventuresWithMock ...&amp;quot;
    };
    await sut.CreateArticle(request);

    // Assert
    authorAccessMock.Verify(x =&amp;gt; x.FilterAuthors(It.IsAny&amp;lt;FilterAuthorCriteria&amp;gt;()), Times.Once);
    articleAccessMock.Verify(x =&amp;gt; x.CreateArticles(It.IsAny&amp;lt;CreateArticlesRequest&amp;gt;()), Times.Never);
    loggerMock.VerifyLogging(&amp;quot;Author with Id 666 is not verfied!&amp;quot;, Microsoft.Extensions.Logging.LogLevel.Information);
    loggerMock.VerifyEventIdWasCalled(new Microsoft.Extensions.Logging.EventId(100, &amp;quot;AuthorNotVerfied&amp;quot;));

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are probably as surprised as I was that it did not work. As it turns out, LoggerMessage actual checks against LogLevel enabled. So add the following to our LoggerMock.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public LoggerMock&amp;lt;T&amp;gt; SetupLogLevel(LogLevel logLevel, bool enabled = true)
{
    Setup(x =&amp;gt; x.IsEnabled(It.Is&amp;lt;LogLevel&amp;gt;(p =&amp;gt; p.Equals(logLevel))))
        .Returns(enabled);
    return this;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one last improvement I wish to make to our LoggerMock. Like our stateful repository mocks, I feel it would be beneficial to capture everything that goes into our mock—in my opinion, using Predicates and Linq gives me more control over my assertions than using mocks internals.&lt;/p&gt;
&lt;p&gt;Our final implementation looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;using System;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using Moq;

namespace Test.Unit.Mocks
{
    public class LoggerMock&amp;lt;T&amp;gt; : Mock&amp;lt;ILogger&amp;lt;T&amp;gt;&amp;gt;
    {
        public class LogMessageMock
        {
            public LogLevel LogLevel { get;set; }
            public EventId Event { get;set; }
            public string Message { get;set; }
        }

        public List&amp;lt;LogMessageMock&amp;gt; Messsages { get; } = new List&amp;lt;LogMessageMock&amp;gt;();

        public LoggerMock()
        {
            Setup(x =&amp;gt; x.Log(
                    It.IsAny&amp;lt;LogLevel&amp;gt;(),
                    It.IsAny&amp;lt;EventId&amp;gt;(),
                    It.Is&amp;lt;It.IsAnyType&amp;gt;((v, t) =&amp;gt; true),
                    It.IsAny&amp;lt;Exception&amp;gt;(),
                    It.Is&amp;lt;Func&amp;lt;It.IsAnyType, Exception, string&amp;gt;&amp;gt;((v, t) =&amp;gt; true)
                )
            )
            .Callback(new InvocationAction(invocation =&amp;gt;
            {
                // https://stackoverflow.com/questions/52707702/how-do-you-mock-ilogger-loginformation
                // https://github.com/moq/moq4/issues/918
                var logLevel = (LogLevel)invocation.Arguments[0];
                var eventId = (EventId)invocation.Arguments[1];
                var state = invocation.Arguments[2];
                var exception = (Exception?)invocation.Arguments[3];
                var formatter = invocation.Arguments[4];

                var invokeMethod = formatter
                    .GetType()
                    .GetMethod(&amp;quot;Invoke&amp;quot;);

                var logMessage = (string?)invokeMethod?.Invoke(formatter, new[] { state, exception });
                Messsages.Add(new LogMessageMock {
                    Event = eventId,
                    LogLevel = logLevel,
                    Message = logMessage
                });
            }));
        }

        public LoggerMock&amp;lt;T&amp;gt; SetupLogLevel(LogLevel logLevel, bool enabled = true)
        {
            Setup(x =&amp;gt; x.IsEnabled(It.Is&amp;lt;LogLevel&amp;gt;(p =&amp;gt; p.Equals(logLevel))))
                .Returns(enabled);
            return this;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="mocking-httpclient"&gt;&lt;a href="#mocking-httpclient"&gt;Mocking HttpClient&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though our article is getting to be on the length side, I found it helpful to include at least one more example. I could rewrite the filesystem sample I mentioned to match this pattern, but I decided to do that later. I thought it would be more useful to look into mocking an HttpClient. One option would be to hide HttpClient behind an interface, but since our ArticleAccess is already the lowest point in our architecture, I see no need to hide that we use a HttpClient.&lt;/p&gt;
&lt;p&gt;Since this is purely a demonstration, I am not going to set up an HTTP Server. Luckily we can use https://jsonplaceholder.typicode.com/posts for our needs. Suppose our CreateArticles method looked like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public async Task&amp;lt;CreateArticlesResponse&amp;gt; CreateArticles(CreateArticlesRequest createArticlesRequest)
{
    // NOTE: not going to call them in a loop, just for demo purposes.
    var json = JsonSerializer.Serialize(createArticlesRequest.CreateArticleRequests.First());
    var response = await _httpClient.PostAsync(&amp;quot;https://jsonplaceholder.typicode.com/posts&amp;quot;, new StringContent(json));
    if (!response.IsSuccessStatusCode)
    {
        throw new Exception(&amp;quot;Something went horribly wrong!&amp;quot;);
    }
    var responseText = await response.Content.ReadAsStringAsync();
    // Map it to response
    return new CreateArticlesResponse {};
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, you cannot achieve this by mocking HttpClient. You need to Mock HttpMessageHandler. Depending on your needs, it might look something like the following snippet. (Based on &lt;a href="https://stackoverflow.com/a/57199040/1936600" class="external"&gt;this stackoverflow answer&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Moq.Language;
using Moq.Protected;

namespace Test.Unit.Mocks
{
    public class HttpClientMock : Mock&amp;lt;HttpMessageHandler&amp;gt;
    {
        private readonly List&amp;lt;Tuple&amp;lt;HttpStatusCode, HttpContent&amp;gt;&amp;gt; _responses;
        public HttpClientMock(List&amp;lt;Tuple&amp;lt;HttpStatusCode, HttpContent&amp;gt;&amp;gt; responses) : base(MockBehavior.Strict)
        {
            _responses = responses;
            SetupResponses();
        }

        private void SetupResponses()
        {
            var handlerPart = this.Protected().SetupSequence&amp;lt;Task&amp;lt;HttpResponseMessage&amp;gt;&amp;gt;(
              &amp;quot;SendAsync&amp;quot;,
              ItExpr.IsAny&amp;lt;HttpRequestMessage&amp;gt;(),
              ItExpr.IsAny&amp;lt;CancellationToken&amp;gt;()
           );

            foreach (var item in _responses)
            {
                handlerPart = AdddReturnPart(handlerPart, item.Item1, item.Item2);
            }
        }

        private ISetupSequentialResult&amp;lt;Task&amp;lt;HttpResponseMessage&amp;gt;&amp;gt; AdddReturnPart(ISetupSequentialResult&amp;lt;Task&amp;lt;HttpResponseMessage&amp;gt;&amp;gt; handlerPart,
        HttpStatusCode statusCode, HttpContent content)
        {
            return handlerPart.ReturnsAsync(new HttpResponseMessage()
            {
                StatusCode = statusCode,
                Content = content
            });
        }

        public static implicit operator HttpClient (HttpClientMock mock)
        {
            // Since neither HttpClient or HttpClientMock is an interface we can use implicit operator to convert.
            // Safes us a call to mock.Object in the test code.
            return new HttpClient(mock.Object) {};
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The corresponding test would look like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public async Task Test_ArticleAccess_Returns200OK()
{
    var createArticleResponse = new StringContent(&amp;quot;{ 'id':'anId' }&amp;quot;, Encoding.UTF8, &amp;quot;application/json&amp;quot;);
    var httpClient = new HttpClientMock(new List&amp;lt;Tuple&amp;lt;HttpStatusCode, HttpContent&amp;gt;&amp;gt; {
        new Tuple&amp;lt;HttpStatusCode, HttpContent&amp;gt;(HttpStatusCode.OK, createArticleResponse),
    });
    var articleAccess = new ArticleAccess(httpClient);
    await articleAccess.CreateArticles(new CreateArticlesRequest{
        CreateArticleRequests = new CreateArticleRequest[] {
            new CreateArticleRequest {
                AuthorId = 666,
                Description = &amp;quot;...&amp;quot;,
                Title = &amp;quot;Demo&amp;quot;
            }
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="summary"&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That concludes my experiment for the day. I have shown three instances where you can apply your custom subclasses of &lt;code&gt;Mock&amp;lt;T&amp;gt;&lt;/code&gt;. The way I see it, it offers three distinct advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test code and mock code is separated.&lt;/li&gt;
&lt;li&gt;Mock code is reusable across tests.&lt;/li&gt;
&lt;li&gt;Stateful mocking allows for more readable verification in tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, creating a mock library will take some time. You could argue if it's worth the time to make a duplicate, albeit a simplified version of your data access. My personal opinion is that it makes debugging and reasoning about my tests easier than taking a deep dive in Invocations and Verify mock provides. As I have hopefully demonstrated is that one does not exclude the other. I think it can complement one and other.&lt;/p&gt;
&lt;p&gt;I am glad about the early results of my experiment, hence me writing this blog post. Over time you can evolve these mocks to be even better. For example, change tracking of entities could potentially be used cross mock. The HttpClientMock could use some more love. Imagine hiding every detail like StatusCode, HttpResponseMessage from the tester. I could have saved it for another blog, but I shared this abstraction to start a dialogue with my team about testing and test set up.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, feel free to reach out. I am curious to hear what you all think about this approach. Do you have suggestions or alternatives? I would love to hear about them.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/kaylumah/AdventuresWithMock" class="external"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;h2 id="sources"&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://exceptionnotfound.net/using-moq-to-create-fluent-test-classes-in-asp-net-core/" class="external"&gt;Fluent Mocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq" class="external"&gt;Testing ILogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Moq/moq4/wiki/Quickstart" class="external"&gt;Moq Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/webcom-engineering-and-product/a-cleaner-way-to-create-mocks-in-net-6e039c3d1db0" class="external"&gt;Cleaner way to create mocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/57199040/1936600" class="external"&gt;Testing HttpClient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2021/03/27/set-nuget-metadata-via-msbuild.html</id>
    <title type="text">Set NuGet metadata via MSBuild</title>
    <summary type="text">Discover how to use MSBuild to set your NuGet package's metadata</summary>
    <published>DateTimeOffset_12</published>
    <updated>DateTimeOffset_12</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2021/03/27/set-nuget-metadata-via-msbuild.html" />
    <category term="MSBuild" />
    <category term="NuGet" />
    <content type="html">&lt;p&gt;For .NET, the standard mechanism for sharing packages is NuGet. A &lt;code&gt;.nupkg&lt;/code&gt; file is an archive that contains your compiled code (DLLs), other files related to your code, and a manifest containing metadata (&lt;a href="https://docs.microsoft.com/en-us/nuget/what-is-nuget" class="external"&gt;source&lt;/a&gt;). This blog post will show you how data in this manifest can be controlled by using MSBuild.&lt;/p&gt;
&lt;p&gt;For simplification purposes, my sample project will consist of only a single class library project. I like you to keep in mind that this would scale to many projects as Microsoft did with the &lt;a href="https://github.com/dotnet/runtime" class="external"&gt;&amp;quot;Microsoft.Extensions packages&amp;quot;&lt;/a&gt;. The sky is the limit.&lt;/p&gt;
&lt;h2 id="setup"&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are bits of this demo that work cross-platform and bits that require you to run on Windows. For example, I like the control the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/" class="external"&gt;.NET CLI&lt;/a&gt; gives me when creating a new project. If you prefer to use &lt;a href="https://visualstudio.microsoft.com/vs/" class="external"&gt;Visual Studio&lt;/a&gt;, the result will remain the same.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;$ dotnet new sln

The template &amp;quot;Solution File&amp;quot; was created successfully.

$ dotnet new classlib --framework netstandard2.0 --output src/Kaylumah.Logging.Extensions.Abstractions

The template &amp;quot;Class library&amp;quot; was created successfully.

Processing post-creation actions...
Running 'dotnet restore' on src/Kaylumah.Logging.Extensions.Abstractions\Kaylumah.Logging.Extensions.Abstractions.csproj...
  Determining projects to restore...
  Restored C:\Projects\NugetMetadata\src\Kaylumah.Logging.Extensions.Abstractions\Kaylumah.Logging.Extensions.Abstractions.csproj (in 84 ms).
Restore succeeded.

$ dotnet sln add src/Kaylumah.Logging.Extensions.Abstractions/Kaylumah.Logging.Extensions.Abstractions.csproj

Project `src\Kaylumah.Logging.Extensions.Abstractions\Kaylumah.Logging.Extensions.Abstractions.csproj` added to the solution.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I chose &lt;code&gt;Kaylumah.Logging.Extensions.Abstractions&lt;/code&gt; to keep inline and in style with the extension packages Microsoft provides. By default, the namespace of the assembly sets the unique package identifier. Of course, this only matters when publishing the package to a NuGet source like &lt;code&gt;https://nuget.org&lt;/code&gt;. That is not this article's scope, as publishing the default template with only the empty &lt;code&gt;Class1.cs&lt;/code&gt; file would not benefit anyone by sharing it.&lt;/p&gt;
&lt;h2 id="why-do-we-even-need-metadata-in-our-packages"&gt;&lt;a href="#why-do-we-even-need-metadata-in-our-packages"&gt;Why do we even need metadata in our packages?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before showing you how I set metadata, I like to show you what happens without specifying any metadata. You can run the command &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-pack#description" class="external"&gt;&lt;code&gt;dotnet pack&lt;/code&gt;&lt;/a&gt; for a single project or an entire solution. If you do it for the solution, only projects that are &lt;code&gt;&amp;lt;IsPackable&amp;gt;true&amp;lt;/IsPackable&amp;gt;&lt;/code&gt; generate a package. The class library we created uses the &lt;code&gt;Microsoft.NET.Sdk&lt;/code&gt; and is packable by default.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;$ dotnet pack

Microsoft (R) Build Engine version 16.8.3+39993bd9d for .NET
Copyright (C) Microsoft Corporation. All rights reserved.

  Determining projects to restore...
  All projects are up-to-date for restore.
  Kaylumah.Logging.Extensions.Abstractions -&amp;gt; C:\Projects\NugetMetadata\src\Kaylumah.Logging.Extensions.Abstractions\bin\Debug\netstandard2.0\Kaylumah.Logging.Extensions.Abstractions.dll
  Successfully created package 'C:\Projects\NugetMetadata\src\Kaylumah.Logging.Extensions.Abstractions\bin\Debug\Kaylumah.Logging.Extensions.Abstractions.1.0.0.nupkg'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command generated the package in my bin folder. Since I did not specify a configuration, it chose the default configuration, which is Debug. So how do we inspect &lt;code&gt;Kaylumah.Logging.Extensions.Abstractions.1.0.0.nupkg&lt;/code&gt;? My prefered way is the &lt;a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer" class="external"&gt;NuGet Package Explorer&lt;/a&gt;, which is unfortunately only available on Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/001_npe_initial_metadata.png" width="4500" height="4000" alt="Without Metadata in NuGet Package Explorer" /&gt;&lt;/p&gt;
&lt;p&gt;There seems to be no metadata set by default. Let's, for a quick moment, compare it to what Microsoft adds to its packages. We can do this by downloading &lt;a href="https://www.nuget.org/api/v2/package/Microsoft.Extensions.Logging.Console/3.1.13" class="external"&gt;the package&lt;/a&gt; from nuget.org and view it like we just did for &lt;code&gt;Kaylumah.Logging.Extensions.Abstractions.1.0.0.nupkg&lt;/code&gt;. Alternatively, the NuGet Package Explorer also supports viewing metadata from remote sources such as nuget.org.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/002_console_logger_info.png" width="4500" height="6000" alt="Microsoft Extensions Logging Metadata in NuGet Package Explorer" /&gt;&lt;/p&gt;
&lt;p&gt;Now that is what I call metadata. Remember that &lt;code&gt;.nupkg&lt;/code&gt; files are archives; this means we can easily verify what the explorer was telling us about our package.  You can do this by changing the extension from &lt;code&gt;.nupkg&lt;/code&gt; to &lt;code&gt;.zip&lt;/code&gt; and then extracting it. It contains &lt;code&gt;Kaylumah.Logging.Extensions.Abstractions.nuspec&lt;/code&gt;, which is the manifest I was talking about in the introduction. At the moment, it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package xmlns=&amp;quot;http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd&amp;quot;&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;Kaylumah.Logging.Extensions.Abstractions&amp;lt;/id&amp;gt;
    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;authors&amp;gt;Kaylumah.Logging.Extensions.Abstractions&amp;lt;/authors&amp;gt;
    &amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;
    &amp;lt;description&amp;gt;Package Description&amp;lt;/description&amp;gt;
    &amp;lt;dependencies&amp;gt;
      &amp;lt;group targetFramework=&amp;quot;.NETStandard2.0&amp;quot; /&amp;gt;
    &amp;lt;/dependencies&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as expected, it matches what NuGet Package Explorer shows us. The default for both id and authors is the assembly namespace, whereas description defaults to &amp;quot;Package Description&amp;quot;, which tells our users nothing about what the package does.&lt;/p&gt;
&lt;h2 id="how-do-we-set-metadata"&gt;&lt;a href="#how-do-we-set-metadata"&gt;How do we set metadata?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have covered our basis, we can finally explain how we can set metadata via MSBuild.&lt;/p&gt;
&lt;h3 id="set-metadata-from-csproj"&gt;&lt;a href="#set-metadata-from-csproj"&gt;Set metadata from csproj&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since we are working on a single project, the logical place to set metadata is by editing our .csproj file. I will not cover every property today, so I refer you to &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#pack-target" class="external"&gt;pack target docs&lt;/a&gt; link. I will, however, cover properties I often use in my projects.&lt;/p&gt;
&lt;p&gt;So behind the scenes, what happens is that specific MSBuild properties map to properties in the .nuspec file. We have to either edit the existing &lt;code&gt;PropertyGroup&lt;/code&gt; in our file or add one to set properties. In my opinion, every package should contain branding (like authors, company and copyright information), a helpful description and categorized by a series of tags. So in the example below, I have set these values.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;Authors&amp;gt;Max Hamulyák&amp;lt;/Authors&amp;gt;
    &amp;lt;!-- Note: Company does not get added to the .nuspec but it is part of the Assembly...Attribute so I often set them all --&amp;gt;
    &amp;lt;Company&amp;gt;Kaylumah&amp;lt;/Company&amp;gt;
    &amp;lt;Description&amp;gt;Logging abstractions for Kaylumah.&amp;lt;/Description&amp;gt;
    &amp;lt;PackageTags&amp;gt;logging;abstractions&amp;lt;/PackageTags&amp;gt;
    &amp;lt;Copyright&amp;gt;Copyright (c) 2021 Kaylumah&amp;lt;/Copyright&amp;gt; 
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run &lt;code&gt;dotnet pack&lt;/code&gt; now, we can immediately see that our package no longer has empty metadata.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/003_npe_author_metadata.png" width="4500" height="4000" alt="With Author Metadata in NuGet Package Explorer" /&gt;&lt;/p&gt;
&lt;p&gt;You can also verify this in Visual Studio by checking your projects properties and clicking on the &lt;code&gt;Package&lt;/code&gt; tab.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/004_vs2019_author_metadata.png" width="4500" height="3000" alt="With Author Metadata in VS2019" /&gt;&lt;/p&gt;
&lt;p&gt;In the introduction, I talked about what exactly is a NuGet package. We are now at the part regarding other files. Since we already took care of branding, let us also add an icon. Our code is under license; how do we include it in the package?&lt;/p&gt;
&lt;p&gt;Add files named &lt;code&gt;Logo.png&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; to the folder containing our project. We can then use the tags &lt;code&gt;PackageIcon&lt;/code&gt; and &lt;code&gt;PackageLicenseFile&lt;/code&gt; respectfully. We also need to tell MSBuild that these files should be part of the package. The updated project file looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;Authors&amp;gt;Max Hamulyák&amp;lt;/Authors&amp;gt;
    &amp;lt;Company&amp;gt;Kaylumah&amp;lt;/Company&amp;gt;
    &amp;lt;Description&amp;gt;Logging abstractions for Kaylumah.&amp;lt;/Description&amp;gt;
    &amp;lt;PackageTags&amp;gt;logging;abstractions&amp;lt;/PackageTags&amp;gt;
    &amp;lt;Copyright&amp;gt;Copyright (c) 2021 Kaylumah&amp;lt;/Copyright&amp;gt;
    &amp;lt;PackageIcon&amp;gt;Logo.png&amp;lt;/PackageIcon&amp;gt;
    &amp;lt;PackageLicenseFile&amp;gt;LICENSE&amp;lt;/PackageLicenseFile&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Include=&amp;quot;Logo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;None Include=&amp;quot;LICENSE&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot;/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/005_npe_includingfiles_metadata.png" width="4500" height="4000" alt="Including NuGet Package Explorer FileMetadata" /&gt;&lt;/p&gt;
&lt;p&gt;Regarding these files, I like to say a couple of things before moving on to more advanced use cases.
There is more than one way to set both the Icon and the License files for starters, which the Microsoft Docs &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#pack-target" class="external"&gt;describe&lt;/a&gt;. Both used to have a &lt;code&gt;Url&lt;/code&gt; variant that would link to the Icon or License in question. Both of those options are now deprecated, and in the case of &lt;code&gt;PackageLicenseFile&lt;/code&gt;, the alternative is  &lt;code&gt;PackageLicenseExpression&lt;/code&gt;, which uses &lt;code&gt;SDPX&lt;/code&gt; license identifiers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: For backwards compatibility, &lt;code&gt;PackageLicenseUrl&lt;/code&gt; gets populated with &lt;code&gt;https://docs.microsoft.com/en-us/nuget/consume-packages/finding-and-choosing-packages#license-url-deprecation&lt;/code&gt; if you choose to use &lt;code&gt;PackageLicenseFile&lt;/code&gt; and with &lt;code&gt;https://licenses.nuget.org/MIT&lt;/code&gt; for example, if your SPDX would be MIT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second point I like to raise is regarding the file names.
In my example, the value for &lt;code&gt;PackageIcon&lt;/code&gt; and the name of my icon file match precisely; this is not necessary. What does matter is the name we specify in the package path. Failing to do so would, for example, trigger &amp;quot;NU5046: The icon file 'NotAnIcon.png' does not exist in the package. See a couple of samples below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- Visible 'False' hides the file in the Visual Studio explorer but still packages it under Logo.png --&amp;gt;
&amp;lt;None Include=&amp;quot;Logo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; Visible=&amp;quot;false&amp;quot; /&amp;gt;

&amp;lt;!-- Link changes the name Visual Studio displays in the explorer but still packages it under Logo.png --&amp;gt;
&amp;lt;None Include=&amp;quot;Logo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; Link=&amp;quot;NotAnIcon.png&amp;quot; /&amp;gt;

&amp;lt;!-- PackagePath rewrites the filename to Icon.png so PackageIcon remains unchanged --&amp;gt;
&amp;lt;None Include=&amp;quot;KaylumahLogo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;Icon.png&amp;quot; /&amp;gt;

&amp;lt;!-- PackagePath rewrites the filename to KaylumahLogo.png so set PackageIcon to &amp;quot;KaylumahLogo&amp;quot; --&amp;gt;
&amp;lt;None Include=&amp;quot;Icon.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;KaylumahLogo.png&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rewriting via package path only works for files with an extension. For historical purposes, both NuGet and MSBuild treat these files as directories. If we had used &lt;code&gt;LICENSE.txt&lt;/code&gt; over &lt;code&gt;LICENSE&lt;/code&gt;, we would have been able to modify the name in the package. However, our &lt;code&gt;LICENSE&lt;/code&gt; file can apply both the &lt;code&gt;Visible&lt;/code&gt; and the &lt;code&gt;Link&lt;/code&gt; example. For more information regarding Package Icons, see &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-an-icon-image-file" class="external"&gt;package-icon&lt;/a&gt;. For packing licenses without an extension see &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-a-file-without-an-extension" class="external"&gt;package-license-1&lt;/a&gt;, and licenses with an extension see &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-a-license-expression-or-a-license-file" class="external"&gt;package-license-2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep in mind that by adding both Icon and License files to the package, the overall package size slightly increases; this can cause slower restore times on initial package downloads. This performance penalty is a trade-off you have to decide for your self. Given today's network speeds, I think the impact isn't noticeable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="set-metadata-for-multiple-projects"&gt;&lt;a href="#set-metadata-for-multiple-projects"&gt;Set metadata for multiple projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So lets for a moment, assume our project is a huge success. We are creating more and more extension libraries. Think about the vast number of packages in &lt;code&gt;dotnet/runtime&lt;/code&gt;. Even if we would only include an implementation for &lt;code&gt;.Abstractions&lt;/code&gt; package, it would be very time consuming to do this for every project. It would also violate the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="external"&gt;DRY principle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started, create a file called &lt;code&gt;Directory.Build.props&lt;/code&gt; at the root of your solution. The way Microsoft handles this file, and in precisely that casing, is starting from your project folder; it goes up till it finds a match or it reaches the root of your drive. This &lt;code&gt;Directory.Build.props&lt;/code&gt; file follows the same syntax we use in our &lt;code&gt;.csproj&lt;/code&gt; files. To demonstrate, remove only the &lt;code&gt;Copyright&lt;/code&gt; tag from the project and recreate it in the &lt;code&gt;Directory.Build.props&lt;/code&gt; file. Now is the perfect moment to also demonstrate something I have not yet told you. We are using MSBuild to populate our metadata, and thus we can use the full force of MSBuild. For example, we can reference other variables and even use built-in functions. So the thing about our current Copyright implementation is that if after &lt;code&gt;31/12/2021&lt;/code&gt; I want to release the next version, I have to remember to update my copyright notice. We can achieve this by setting the copyright tag like below.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;Copyright&amp;gt;Copyright © $(Company) $([System.DateTime]::Now.Year)&amp;lt;/Copyright&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/006_npe_buildpropsv1.png" width="4500" height="4000" alt="Using BuildProps NuGet Package Explorer V1" /&gt;&lt;/p&gt;
&lt;p&gt;What happened? Something is wrong; why do I see the copyright year 2021, but not my company name? Before explaining it, let me prove it by adding a company tag to the &lt;code&gt;Directory.Build.props&lt;/code&gt; with a different value. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;Company&amp;gt;NotKaylumah&amp;lt;/Company&amp;gt;
        &amp;lt;Copyright&amp;gt;Copyright © $(Company) $([System.DateTime]::Now.Year)&amp;lt;/Copyright&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike the &lt;code&gt;Copyright&lt;/code&gt; tag do not remove the &lt;code&gt;Company&lt;/code&gt; tag from the &lt;code&gt;.csproj&lt;/code&gt; file. The result, this time, is a little different.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/007_npe_buildpropsv2.png" width="4500" height="4000" alt="Using BuildProps NuGet Package Explorer V2" /&gt;&lt;/p&gt;
&lt;p&gt;It appears that I have two different values for &lt;code&gt;Company&lt;/code&gt;; this happens because &lt;code&gt;Directory.Build.props&lt;/code&gt; gets imported before your project, and &lt;code&gt;Directory.Build.targets&lt;/code&gt; gets imported after. The latest registration wins. That is why if we would read the &lt;code&gt;System.Reflection.AssemblyCopyrightAttribute&lt;/code&gt; the value for &lt;code&gt;Company&lt;/code&gt; is &amp;quot;Kaylumah&amp;quot;, but when we set &lt;code&gt;Copyright&lt;/code&gt;, it is still &amp;quot;NotKaylumah&amp;quot;. You can verify this behaviour by running the preprocess command (&lt;code&gt;dotnet build -pp:fullproject.xml&lt;/code&gt;). See &lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2019" class="external"&gt;msbuild comand line reference&lt;/a&gt; for an explanation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Word of caution, you should not set every property this way. You should only set the values that are shared cross-project. For example, &lt;code&gt;Company&lt;/code&gt; and &lt;code&gt;Copyright&lt;/code&gt; are likely to be the same for every project. The &lt;code&gt;Authors&lt;/code&gt; and &lt;code&gt;PackageTags&lt;/code&gt; could be project-specific; heck, even &lt;code&gt;Description&lt;/code&gt; could be reused if so desired. One thing for sure is that &lt;code&gt;Id&lt;/code&gt; can not be recycled since every package requires a unique Id.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;Authors&amp;gt;Max Hamulyák&amp;lt;/Authors&amp;gt;
        &amp;lt;Company&amp;gt;Kaylumah&amp;lt;/Company&amp;gt;
        &amp;lt;Description&amp;gt;Logging abstractions for Kaylumah.&amp;lt;/Description&amp;gt;
        &amp;lt;Copyright&amp;gt;Copyright © $(Company) $([System.DateTime]::Now.Year)&amp;lt;/Copyright&amp;gt;
        &amp;lt;PackageTags&amp;gt;logging;abstractions&amp;lt;/PackageTags&amp;gt;
        &amp;lt;PackageIcon&amp;gt;Logo.png&amp;lt;/PackageIcon&amp;gt;
        &amp;lt;PackageLicenseFile&amp;gt;LICENSE&amp;lt;/PackageLicenseFile&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;None Include=&amp;quot;$(MSBuildThisFileDirectory)Logo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;None Include=&amp;quot;$(MSBuildThisFileDirectory)LICENSE&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/008_npe_buildpropsv3.png" width="4500" height="4000" alt="Using BuildProps NuGet Package Explorer V3" /&gt;&lt;/p&gt;
&lt;p&gt;In case you are wondering where did &lt;code&gt;$(MSBuildThisFileDirectory)&lt;/code&gt; come from, it is one of the predefined MSBuild variables you can use. It allows us to set the path without thinking about relative file paths; for other variables, see the &lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2019" class="external"&gt;Microsoft Docs&lt;/a&gt; on the topic.&lt;/p&gt;
&lt;h3 id="bonus-chapter"&gt;&lt;a href="#bonus-chapter"&gt;Bonus Chapter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have referred to the list of properties before. There are a couple of handy ones we have not yet discussed. I am talking about the repository fields, making sure that an artefact can always trace back to a specific revision of your source code.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NuSpec&lt;/th&gt;
&lt;th&gt;MSBuild&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Repository/Url&lt;/td&gt;
&lt;td&gt;RepositoryUrl&lt;/td&gt;
&lt;td&gt;URL where sourcecode is located i.e. &lt;code&gt;https://github.com/NuGet/NuGet.Client.git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repository/Type&lt;/td&gt;
&lt;td&gt;RepositoryType&lt;/td&gt;
&lt;td&gt;The repository type i.e. &lt;code&gt;git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repository/Branch&lt;/td&gt;
&lt;td&gt;RepositoryBranch&lt;/td&gt;
&lt;td&gt;Optional repository branch info i.e. &lt;code&gt;main&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repository/Commit&lt;/td&gt;
&lt;td&gt;RepositoryCommit&lt;/td&gt;
&lt;td&gt;Optional commit information i.e. &lt;code&gt;0e4d1b598f350b3dc675018d539114d1328189ef&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Before I explain this, I am getting a bit tired of running &lt;code&gt;dotnet pack&lt;/code&gt; every time. Lucky for me, there is a way to generate a package on build. Update the &lt;code&gt;.csproj&lt;/code&gt; file to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So back to repository info. MSBuild itself is not aware of things like source control. Fortunately, we can pass parameters from the outside to use inside MSBuild. For this, we have the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;-property&lt;/code&gt; switch. The following script retrieves the URL, branch name and SHA1 hash from the current commit.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#!/bin/sh -x

REPO_URL=$(git config --get remote.origin.url)
REPO_BRANCH=$(git branch --show-current)
REPO_COMMIT=$(git rev-parse HEAD)
dotnet build -p:RepositoryUrl=&amp;quot;$REPO_URL&amp;quot; -p:RepositoryBranch=&amp;quot;$REPO_BRANCH&amp;quot; -p:RepositoryCommit=&amp;quot;$REPO_COMMIT&amp;quot; -p:RepositoryType=&amp;quot;git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, we now generate a package on build. Let us verify we see repo info by opening the created package in NuGet Package Explorer.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://BaseUrl_1/assets/images/posts/20210327/nuget-metadata/009_npe_repoinfo.png" width="4500" height="4000" alt="Repo Info in NuGet Package Explorer" /&gt;&lt;/p&gt;
&lt;p&gt;Even though it is OK to add repo metadata this way, there is a better alternative. This alternative does more than add metadata; it also enables source code debugging from NuGet packages. How cool is that? This technology is called &lt;a href="https://github.com/dotnet/sourcelink" class="external"&gt;Source Link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like before with the properties, I have no wish to add source link to every package separately. For this, create &lt;code&gt;Directory.Build.targets&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
 &amp;lt;Project&amp;gt;
     &amp;lt;ItemGroup&amp;gt;
         &amp;lt;PackageReference Include=&amp;quot;Microsoft.SourceLink.GitHub&amp;quot; Version=&amp;quot;1.0.0&amp;quot; PrivateAssets=&amp;quot;all&amp;quot; IsImplicitlyDefined=&amp;quot;true&amp;quot; /&amp;gt;
     &amp;lt;/ItemGroup&amp;gt;
 &amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To configure source link, we need to update &lt;code&gt;Directory.Build.props&lt;/code&gt; as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;Authors&amp;gt;Max Hamulyák&amp;lt;/Authors&amp;gt;
        &amp;lt;Company&amp;gt;Kaylumah&amp;lt;/Company&amp;gt;
        &amp;lt;Description&amp;gt;Logging abstractions for Kaylumah.&amp;lt;/Description&amp;gt;
        &amp;lt;Copyright&amp;gt;Copyright © $(Company) $([System.DateTime]::Now.Year)&amp;lt;/Copyright&amp;gt;
        &amp;lt;PackageTags&amp;gt;logging;abstractions&amp;lt;/PackageTags&amp;gt;
        &amp;lt;PackageIcon&amp;gt;Logo.png&amp;lt;/PackageIcon&amp;gt;
        &amp;lt;PackageLicenseFile&amp;gt;LICENSE&amp;lt;/PackageLicenseFile&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;None Include=&amp;quot;$(MSBuildThisFileDirectory)Logo.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;None Include=&amp;quot;$(MSBuildThisFileDirectory)LICENSE&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;PublishRepositoryUrl&amp;gt;true&amp;lt;/PublishRepositoryUrl&amp;gt;
        &amp;lt;EmbedUntrackedSources&amp;gt;true&amp;lt;/EmbedUntrackedSources&amp;gt;
        &amp;lt;IncludeSymbols&amp;gt;true&amp;lt;/IncludeSymbols&amp;gt;
        &amp;lt;SymbolPackageFormat&amp;gt;snupkg&amp;lt;/SymbolPackageFormat&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To prove that it is still working, here is the entire &lt;code&gt;.nuspec&lt;/code&gt; file after adding Source Link&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package xmlns=&amp;quot;http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd&amp;quot;&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;Kaylumah.Logging.Extensions.Abstractions&amp;lt;/id&amp;gt;
    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;authors&amp;gt;Max Hamulyák&amp;lt;/authors&amp;gt;
    &amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;
    &amp;lt;license type=&amp;quot;file&amp;quot;&amp;gt;LICENSE&amp;lt;/license&amp;gt;
    &amp;lt;licenseUrl&amp;gt;https://aka.ms/deprecateLicenseUrl&amp;lt;/licenseUrl&amp;gt;
    &amp;lt;icon&amp;gt;Logo.png&amp;lt;/icon&amp;gt;
    &amp;lt;description&amp;gt;Logging abstractions for Kaylumah.&amp;lt;/description&amp;gt;
    &amp;lt;copyright&amp;gt;Copyright © Kaylumah 2021&amp;lt;/copyright&amp;gt;
    &amp;lt;tags&amp;gt;logging abstractions&amp;lt;/tags&amp;gt;
    &amp;lt;repository type=&amp;quot;git&amp;quot; url=&amp;quot;https://github.com/Kaylumah/NugetMetadataDemo.git&amp;quot; commit=&amp;quot;3378cf33e0061b234c1f58e060489efd81e08586&amp;quot; /&amp;gt;
    &amp;lt;dependencies&amp;gt;
      &amp;lt;group targetFramework=&amp;quot;.NETStandard2.0&amp;quot; /&amp;gt;
    &amp;lt;/dependencies&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="closing-thoughts"&gt;&lt;a href="#closing-thoughts"&gt;Closing Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We looked at setting metadata via MSBuild and sharing metadata between projects. You can take this even further by using MSBuild tasks to verify that packages must have a description like &lt;a href="https://github.com/dotnet/arcade/blob/9a72efb067b74bb9147f9413ade6173b568ea1af/src/Microsoft.DotNet.Arcade.Sdk/tools/Workarounds.targets#L79" class="external"&gt;shown here&lt;/a&gt;. It is also possible to create an entire SDK as Microsoft did with &lt;a href="https://github.com/dotnet/arcade" class="external"&gt;Arcade&lt;/a&gt;. Of course, Arcade goes much further than just specifying some metadata. You can read about how / why Microsoft did that &lt;a href="https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/" class="external"&gt;on the devblogs&lt;/a&gt;. I experimented with a custom SDK heavily inspired by Arcade, but that is a blog post for another day.&lt;/p&gt;
&lt;p&gt;For now, I hope I was able to teach you something about the power of MSBuild and how we can use it to manipulate our NuGet packages. If you have any questions, feel free to reach out.&lt;/p&gt;
&lt;p&gt;The corresponding source code for this article is on &lt;a href="https://github.com/Kaylumah/NugetMetadataDemo" class="external"&gt;GitHub&lt;/a&gt;, there you can see all the changes I addressed in sequence.&lt;/p&gt;
&lt;p&gt;See you next time, stay healthy and happy coding to all 🧸!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="sources"&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog was written based on personal experience when creating packages. If not already explicitly linked in the text, here are some of the primary sources used in the article.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019" class="external"&gt;Customize your build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets" class="external"&gt;MSBuild targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-dotnet-cli" class="external"&gt;Create a package dotnet cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli" class="external"&gt;Create and publish a package using dotnet cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2019" class="external"&gt;MSBuild reserved and well-known properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cezarypiatek.github.io/post/setting-assembly-and-package-metadata/" class="external"&gt;Setting assembly and nuget package metadata in .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <id>https://BaseUrl_1/2019/09/07/using-csharp-code-your-git-hooks.html</id>
    <title type="text">Using C# code in your git hooks</title>
    <summary type="text">Getting started with C# script in your client-side git hooks</summary>
    <published>DateTimeOffset_13</published>
    <updated>DateTimeOffset_14</updated>
    <author>
      <name>Max Hamulyák</name>
      <uri>/about</uri>
      <email>max@kaylumah.nl</email>
    </author>
    <link href="https://BaseUrl_1/2019/09/07/using-csharp-code-your-git-hooks.html" />
    <category term="C#" />
    <category term="Git" />
    <content type="html">&lt;h2 id="why-use-hooks"&gt;&lt;a href="#why-use-hooks"&gt;Why use hooks?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We, as developers, love platforms like GitHub, GitLab, Atlassian, Azure DevOps etc., as our managed git system and collaboration platform. We also love clean code and keep inventing new linters and rules to enforce it. In my opinion, every commit should allow the codebase to deploy to production. There is nothing worse than commits like “fixed style errors” or “fixed build”. These are often small mistakes you want to know as early as possible in your development cycle. You don’t want to break the build for the next developer because he pulled your ‘mistake’ or waste precious build minutes of your CI server. Say you have asked your teammate to review your code; in the meantime, the build server rejects your code. That means you have to go back and fix this, and your teammate has to come back and possibly review again after the changes (i.e., approvals reset on new commit). Doing so would waste a lot of time and effort.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I favour server-side hooks, but when using a SaaS solution, this is not always a possibility. I know I would not want someone to run arbitrary code on my servers. Unfortunately, a developer can bypass the client-side hooks. Until we can run, possibly sandboxed, server-side hooks on our prefered platform, we have to make the best of it by using client-side hooks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Githooks are scripts that can execute on certain parts of the git lifecycle. Hooks must be executable, but other than that, hooks' power is only limited to the developer's imagination. I have seen many samples of hooks written in JavaScript (node) using tools like &lt;a href="https://github.com/typicode/husky" class="external"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/conventional-changelog/commitlint" class="external"&gt;commitlint&lt;/a&gt; to enforce a certain way of working. When I was browsing the changes in the upcoming .NET Core 3.0 release, the concept of &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#local-dotnet-tools" class="external"&gt;local-tools&lt;/a&gt; got me thinking. I knew of the existence of &lt;a href="https://www.hanselman.com/blog/CAndNETCoreScriptingWithTheDotnetscriptGlobalTool.aspx" class="external"&gt;dotnet-script&lt;/a&gt;, would that make it possible to C# in my GitHooks?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: in the past I have used a set-up with node since I occasionally work with front-end frameworks like Angular. Since I had node installed I could use it even in my pure backend projects to enforce commit messages and such. For me it felt dirty, since that would require team members to have node installed. Using the dotnet cli feels less as a forced decision since members are likely to have it installed already.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="lets-get-started"&gt;&lt;a href="#lets-get-started"&gt;Let’s get started!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When creating a git repository there is a folder called hooks where all the git hooks are placed. For every event there is a sample post-fixed with .sample that shows the possibility of each hook. This directory is not under source control and we are going to create our own directory to be able to share the hooks with the team.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir git-hooks-example  
cd git-hooks-example  
git init  
dotnet new gitignore  
dotnet new tool-manifest  
dotnet tool install dotnet-script  
dotnet tool install dotnet-format  
mkdir .githooks
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="pre-commit-hook"&gt;&lt;a href="#pre-commit-hook"&gt;Pre-Commit Hook&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To demonstrate we are going to create a plain hook. To check if it is working &lt;strong&gt;git commit -m “”&lt;/strong&gt; (using empty commit message will abort the commit). You should see the line pre-commit hook printed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
Console.WriteLine(&amp;quot;pre-commit hook&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make it executable run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;find .git/hooks -type f -exec rm {} \;
find .githooks -type f -exec chmod +x {} \;
find .githooks -type f -exec ln -sf ../../{} .git/hooks/ \;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we can reference other files (and even load nuget packages) in our csx we will first create a couple of files so we can have code-reuse between the hooks.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;strong&gt;logger.csx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Logger
{
    public static void LogInfo(string message)
    {
        Console.ForegroundColor = ConsoleColor.White;
        Console.Error.WriteLine(message);
    }
    public static void LogError(string message)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Error.WriteLine(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file called &lt;strong&gt;command-line.csx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#load &amp;quot;logger.csx&amp;quot;
public class CommandLine
{
    public static string Execute(string command)
    {
        // according to: https://stackoverflow.com/a/15262019/637142
        // thans to this we will pass everything as one command
        command = command.Replace(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;\&amp;quot;\&amp;quot;&amp;quot;);
        var proc = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                FileName = &amp;quot;/bin/bash&amp;quot;,
                Arguments = &amp;quot;-c \&amp;quot;&amp;quot; + command + &amp;quot;\&amp;quot;&amp;quot;,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                CreateNoWindow = true
            }
        };
        proc.Start();
        proc.WaitForExit();
        if (proc.ExitCode != 0)
        {
            Logger.LogError(proc.StandardOutput.ReadToEnd());
            return proc.ExitCode.ToString();
        }
        return proc.StandardOutput.ReadToEnd();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file called &lt;strong&gt;dotnet-commands.csx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;command-line.csx&amp;quot;
public class DotnetCommands
{
    public static int FormatCode() =&amp;gt; ExecuteCommand(&amp;quot;dotnet format&amp;quot;);
    public static int BuildCode() =&amp;gt; ExecuteCommand(&amp;quot;dotnet build&amp;quot;);

    public static int TestCode() =&amp;gt; ExecuteCommand(&amp;quot;dotnet test&amp;quot;);

    private static int ExecuteCommand(string command)
    {
        string response = CommandLine.Execute(command);
        Int32.TryParse(response, out int exitCode);
        return exitCode;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file called &lt;strong&gt;git-commands.csx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;command-line.csx&amp;quot;
public class GitCommands
{
    public static void StashChanges()
    {
        CommandLine.Execute(&amp;quot;git stash -q --keep-index&amp;quot;);
    }
    public static void UnstashChanges()
    {
        CommandLine.Execute(&amp;quot;git stash pop -q&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a utility in place for Logging and running GIT and dotnet commands. Next we are going to start with out pre-commit hook. Create a file called &lt;strong&gt;pre-commit&lt;/strong&gt; The difference between this file and the others we just made is that we don’t specify the extension, and that using Shebang we explicitly load dotnet-script. For an explanation of each hook see the article posted below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorials/git-hooks" class="external"&gt;Git Hooks | Atlassian Git Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;git-commands.csx&amp;quot;
#load &amp;quot;dotnet-commands.csx&amp;quot;

// We'll only runchecks on changes that are a part of this commit so let's stash others
GitCommands.StashChanges();

int buildCode = DotnetCommands.BuildCode();

// We're done with checks, we can unstash changes
GitCommands.UnstashChanges();
if (buildCode != 0) {
    Logger.LogError(&amp;quot;Failed to pass the checks&amp;quot;);
    Environment.Exit(-1);
}
// All checks have passed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run &lt;strong&gt;git commit -m “”&lt;/strong&gt; again this time we get an error saying Failed to pass the checks, which makes sense since we don’t have a project yet. We are going to create a simple sln consisting of a classlibary and a test libary.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet new sln  
dotnet new classlib --framework netstandard2.1 --langVersion 8 --name SomeLib --output src/SomeLib  
dotnet new xunit --output tests/SomeLibTests  
dotnet sln add **/*.csproj 
cd tests/SomeLibTests/  
dotnet add reference ../../src/SomeLib/SomeLib.csproj  
cd ../../  
dotnet build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we use git commit -m “” one more time, we get the message about aborting the commit again. We now know that every commit will at least compile :-) If for example we remove the namespace ending curly brace from Class1 we get the error &lt;strong&gt;Class1.cs(7,6): error CS1513: }&lt;/strong&gt;. If we extend our pre-commit hook even further we can have &lt;a href="https://www.hanselman.com/blog/EditorConfigCodeFormattingFromTheCommandLineWithNETCoresDotnetFormatGlobalTool.aspx" class="external"&gt;dotnet-format&lt;/a&gt; and dotnet-test running on every commit. If we purposely write a failing test (1 equals 0 or something like that) the build won’t pass.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;git-commands.csx&amp;quot;
#load &amp;quot;dotnet-commands.csx&amp;quot;

Logger.LogInfo(&amp;quot;pre-commit hook&amp;quot;);

// We'll only runchecks on changes that are a part of this commit so let's stash others
GitCommands.StashChanges();

int formatCode = DotnetCommands.FormatCode();
int buildCode = DotnetCommands.BuildCode();
int testCode = DotnetCommands.TestCode();

// We're done with checks, we can unstash changes
GitCommands.UnstashChanges();
int exitCode = formatCode + buildCode + testCode;
if (exitCode != 0) {
    Logger.LogError(&amp;quot;Failed to pass the checks&amp;quot;);
    Environment.Exit(-1);
}
// All checks have passed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="prepare-commit-message-hook"&gt;&lt;a href="#prepare-commit-message-hook"&gt;Prepare-commit-message hook&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thus far, we have not really used anything we need C# for; Admittedly we are using C# to execute shell commands. For our next hook we are going to use System.IO. Imagine as a team you have a commit-message convention. Let's say you want each commit message to include a reference to your issue tracker.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;type(scope?): subject  #scope is optional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file &lt;strong&gt;prepare-commit-msg&lt;/strong&gt; in this hook we can provide a convenient commit message place holder if the user did not supply a message. To actual enforce the message, you need the &lt;strong&gt;commit-msg&lt;/strong&gt; hook. In this example, we only create a message for feature branches.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;util.csx&amp;quot;
#load &amp;quot;git-commands.csx&amp;quot;

Logger.LogInfo(&amp;quot;prepare-commit-msg hook&amp;quot;);

string commitMessageFilePath = Util.CommandLineArgument(Args, 0);
string commitType = Util.CommandLineArgument(Args, 1);
string commitHash = Util.CommandLineArgument(Args, 2);

if (commitType.Equals(&amp;quot;message&amp;quot;)) {
    // user supplied a commit message, no need to prefill.
    Logger.LogInfo(&amp;quot;commitType message&amp;quot;);
    Environment.Exit(0);
}

string[] files = GitCommands.ChangedFiles();
for(int i = 0; i &amp;lt; files.Length; i++) {
    // perhaps determine scope based on what was changed.
    Logger.LogInfo(files[i]);
}

string branch = GitCommands.CurrentBranch();
if (branch.StartsWith(&amp;quot;feature&amp;quot;)) {
    string messageToBe = &amp;quot;feat: ISS-XXX&amp;quot;;
    PrepareCommitMessage(commitMessageFilePath, messageToBe);
}

public static void PrepareCommitMessage(string messageFile, string message)
{
     string tempfile = Path.GetTempFileName();
    using (var writer = new StreamWriter(tempfile))
    using (var reader = new StreamReader(messageFile))
    {
        writer.WriteLine(message);
        while (!reader.EndOfStream)
            writer.WriteLine(reader.ReadLine());
    }
    File.Copy(tempfile, messageFile, true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a new helper called &lt;strong&gt;util.csx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Util
{
    public static string CommandLineArgument(IList&amp;lt;string&amp;gt; Args, int position)
    {
        if (Args.Count() &amp;gt;= position + 1)
        {
            return Args[position];
        }
        return string.Empty;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="commit-msg-hook"&gt;&lt;a href="#commit-msg-hook"&gt;Commit-msg Hook&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The final local git hook I took for a spin is the commit-msg hook. It uses a regex to make sure the commit message is according the specified format.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;util.csx&amp;quot;
#load &amp;quot;git-commands.csx&amp;quot;
using System.Text.RegularExpressions;

Logger.LogInfo(&amp;quot;commit-msg hook&amp;quot;);

string commitMessageFilePath = Util.CommandLineArgument(Args, 0);
string branch = GitCommands.CurrentBranch();
Logger.LogInfo(commitMessageFilePath);
Logger.LogInfo(branch);
string message = GetCommitedMessage(commitMessageFilePath);
Logger.LogInfo(message);

const string regex = @&amp;quot;\b(feat|bug)\b(\({1}\b(core)\b\){1})?(:){1}(\s){1}(ISS-[0-9]{0,3}){1}&amp;quot;;
var match = Regex.Match(message, regex);

if (!match.Success) {
    Logger.LogError(&amp;quot;Message does not match commit format&amp;quot;);
    Environment.Exit(1);
}

public static string GetCommitedMessage(string filePath) {
    return File.ReadAllLines(filePath)[0];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="pre-push-hook"&gt;&lt;a href="#pre-push-hook"&gt;pre push Hook&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is even possible to use NuGet packages in our hooks. Let say we want to prevent pushes to master (perhaps not even commits?). We can read a config file using Newtonsoft.Json and look for a protected branch and abort.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#!/usr/bin/env dotnet dotnet-script
#r &amp;quot;nuget: Newtonsoft.Json, 12.0.2&amp;quot;
#load &amp;quot;logger.csx&amp;quot;
#load &amp;quot;config.csx&amp;quot;
#load &amp;quot;git-commands.csx&amp;quot;
using Newtonsoft.Json;

string currentBranch = GitCommands.CurrentBranch().Trim();
Config currentConfig = GetConfig();
bool lockedBranch = currentConfig.ProtectedBranches.Contains(currentBranch);

if (lockedBranch) {
    Logger.LogError($&amp;quot;Trying to commit on protected branch '{currentBranch}'&amp;quot;);
    Environment.Exit(1);
}

public static Config GetConfig()
{
    return JsonConvert.DeserializeObject&amp;lt;Config&amp;gt;(File.ReadAllText(&amp;quot;.githooks/config.json&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My current hooks are far from the best, and perhaps C# is not the fastest language to use in git hook. I do, however consider the experiment a success. I much rather code in C# than in shell script. Ideas for further improvement include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;based on the list of changes, determine the scope of the change (i.e. only one directory changed we might know the scope)&lt;/li&gt;
&lt;li&gt;configure the regex, allowed scopes, allowed types&lt;/li&gt;
&lt;li&gt;improve pre-commit-msg for more scenarios&lt;/li&gt;
&lt;li&gt;enforce users to use the hooks&lt;/li&gt;
&lt;li&gt;managing versions of the hooks, on checkout old / different version of pull (with an update of the hooks) sync the directory. &lt;a href="https://www.viget.com/articles/two-ways-to-share-git-hooks-with-your-team/" class="external"&gt;(perhaps githook location)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know what you think :-)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/maxhamulyak/git-hooks-example" class="external"&gt;maxhamulyak/git-hooks-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy Coding 🍻&lt;/p&gt;</content>
  </entry>
</feed>